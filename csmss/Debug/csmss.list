
csmss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac80  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800ae20  0800ae20  0001ae20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3f4  0800b3f4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3f4  0800b3f4  0001b3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3fc  0800b3fc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3fc  0800b3fc  0001b3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b400  0800b400  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ef4  200001dc  0800b5e0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050d0  0800b5e0  000250d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121a0  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d56  00000000  00000000  000323ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00035148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9e  00000000  00000000  00036080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004558  00000000  00000000  00036c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011386  00000000  00000000  0003b176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091278  00000000  00000000  0004c4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005594  00000000  00000000  000dd774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e2d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae08 	.word	0x0800ae08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800ae08 	.word	0x0800ae08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <GPS_Init>:
	sprintf(buf, "%s\n", data);
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif
void GPS_Init()
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPS_GPIO_Port, GPS_Pin, GPIO_PIN_SET);
	//HAL_UART_Receive(GPS_USART, &rx_data, 1,10000);
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <GPS_Recieve>:


void GPS_Recieve(){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	while(rx_data != '\n' && rx_index < sizeof(rx_buffer)&&timeout >0) {
 8001014:	e016      	b.n	8001044 <GPS_Recieve+0x34>
		HAL_UART_Receive(GPS_USART, &rx_data, 1,500);
 8001016:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800101a:	2201      	movs	r2, #1
 800101c:	4919      	ldr	r1, [pc, #100]	; (8001084 <GPS_Recieve+0x74>)
 800101e:	481a      	ldr	r0, [pc, #104]	; (8001088 <GPS_Recieve+0x78>)
 8001020:	f001 fc1e 	bl	8002860 <HAL_UART_Receive>
		rx_buffer[rx_index++] = rx_data;
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <GPS_Recieve+0x7c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	b2d1      	uxtb	r1, r2
 800102c:	4a17      	ldr	r2, [pc, #92]	; (800108c <GPS_Recieve+0x7c>)
 800102e:	7011      	strb	r1, [r2, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <GPS_Recieve+0x74>)
 8001034:	7819      	ldrb	r1, [r3, #0]
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <GPS_Recieve+0x80>)
 8001038:	5499      	strb	r1, [r3, r2]
		timeout--;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <GPS_Recieve+0x84>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3b01      	subs	r3, #1
 8001040:	4a14      	ldr	r2, [pc, #80]	; (8001094 <GPS_Recieve+0x84>)
 8001042:	6013      	str	r3, [r2, #0]
	while(rx_data != '\n' && rx_index < sizeof(rx_buffer)&&timeout >0) {
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <GPS_Recieve+0x74>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b0a      	cmp	r3, #10
 800104a:	d008      	beq.n	800105e <GPS_Recieve+0x4e>
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <GPS_Recieve+0x7c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b25b      	sxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	db03      	blt.n	800105e <GPS_Recieve+0x4e>
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <GPS_Recieve+0x84>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1db      	bne.n	8001016 <GPS_Recieve+0x6>
	}

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif
		if(GPS_validate((char*) rx_buffer))
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <GPS_Recieve+0x80>)
 8001060:	f000 f81a 	bl	8001098 <GPS_validate>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <GPS_Recieve+0x60>
			GPS_parse((char*) rx_buffer);
 800106a:	4809      	ldr	r0, [pc, #36]	; (8001090 <GPS_Recieve+0x80>)
 800106c:	f000 f876 	bl	800115c <GPS_parse>
		rx_index = 0;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <GPS_Recieve+0x7c>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	2100      	movs	r1, #0
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <GPS_Recieve+0x80>)
 800107c:	f005 fe7f 	bl	8006d7e <memset>
	//HAL_UART_Receive(GPS_USART, &rx_data, 1,10000);
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200001f8 	.word	0x200001f8
 8001088:	200002d8 	.word	0x200002d8
 800108c:	2000027c 	.word	0x2000027c
 8001090:	200001fc 	.word	0x200001fc
 8001094:	20000000 	.word	0x20000000

08001098 <GPS_validate>:



int GPS_validate(char *nmeastr){
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b24      	cmp	r3, #36	; 0x24
 80010b2:	d103      	bne.n	80010bc <GPS_validate+0x24>
        i++;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3301      	adds	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80010ba:	e00c      	b.n	80010d6 <GPS_validate+0x3e>
        return 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	e047      	b.n	8001150 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4053      	eors	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        i++;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4413      	add	r3, r2
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d008      	beq.n	80010f4 <GPS_validate+0x5c>
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b2a      	cmp	r3, #42	; 0x2a
 80010ec:	d002      	beq.n	80010f4 <GPS_validate+0x5c>
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	2b4a      	cmp	r3, #74	; 0x4a
 80010f2:	dde5      	ble.n	80010c0 <GPS_validate+0x28>
    }

    if(i >= 75){
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	2b4a      	cmp	r3, #74	; 0x4a
 80010f8:	dd01      	ble.n	80010fe <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80010fa:	2300      	movs	r3, #0
 80010fc:	e028      	b.n	8001150 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b2a      	cmp	r3, #42	; 0x2a
 8001108:	d119      	bne.n	800113e <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3302      	adds	r3, #2
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	490a      	ldr	r1, [pc, #40]	; (8001158 <GPS_validate+0xc0>)
 800112e:	4618      	mov	r0, r3
 8001130:	f005 fd94 	bl	8006c5c <siprintf>
    return((checkcalcstr[0] == check[0])
 8001134:	7a3a      	ldrb	r2, [r7, #8]
 8001136:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001138:	429a      	cmp	r2, r3
 800113a:	d108      	bne.n	800114e <GPS_validate+0xb6>
 800113c:	e001      	b.n	8001142 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800113e:	2300      	movs	r3, #0
 8001140:	e006      	b.n	8001150 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001142:	7a7a      	ldrb	r2, [r7, #9]
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	429a      	cmp	r2, r3
 8001148:	d101      	bne.n	800114e <GPS_validate+0xb6>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <GPS_validate+0xb8>
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	0800ae20 	.word	0x0800ae20

0800115c <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af08      	add	r7, sp, #32
 8001162:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001164:	2206      	movs	r2, #6
 8001166:	494a      	ldr	r1, [pc, #296]	; (8001290 <GPS_parse+0x134>)
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f005 fe10 	bl	8006d8e <strncmp>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d137      	bne.n	80011e4 <GPS_parse+0x88>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001174:	4b47      	ldr	r3, [pc, #284]	; (8001294 <GPS_parse+0x138>)
 8001176:	9307      	str	r3, [sp, #28]
 8001178:	4b47      	ldr	r3, [pc, #284]	; (8001298 <GPS_parse+0x13c>)
 800117a:	9306      	str	r3, [sp, #24]
 800117c:	4b47      	ldr	r3, [pc, #284]	; (800129c <GPS_parse+0x140>)
 800117e:	9305      	str	r3, [sp, #20]
 8001180:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <GPS_parse+0x144>)
 8001182:	9304      	str	r3, [sp, #16]
 8001184:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <GPS_parse+0x148>)
 8001186:	9303      	str	r3, [sp, #12]
 8001188:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <GPS_parse+0x14c>)
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	4b47      	ldr	r3, [pc, #284]	; (80012ac <GPS_parse+0x150>)
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <GPS_parse+0x154>)
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <GPS_parse+0x158>)
 8001196:	4a48      	ldr	r2, [pc, #288]	; (80012b8 <GPS_parse+0x15c>)
 8001198:	4948      	ldr	r1, [pc, #288]	; (80012bc <GPS_parse+0x160>)
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f005 fd7e 	bl	8006c9c <siscanf>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	dd70      	ble.n	8001288 <GPS_parse+0x12c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80011a6:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <GPS_parse+0x164>)
 80011a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80011ac:	4b44      	ldr	r3, [pc, #272]	; (80012c0 <GPS_parse+0x164>)
 80011ae:	7e1b      	ldrb	r3, [r3, #24]
 80011b0:	4618      	mov	r0, r3
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	f000 f8a7 	bl	8001308 <GPS_nmea_to_dec>
 80011ba:	eef0 7a40 	vmov.f32	s15, s0
 80011be:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <GPS_parse+0x164>)
 80011c0:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80011c4:	4b3e      	ldr	r3, [pc, #248]	; (80012c0 <GPS_parse+0x164>)
 80011c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80011ca:	4b3d      	ldr	r3, [pc, #244]	; (80012c0 <GPS_parse+0x164>)
 80011cc:	7e5b      	ldrb	r3, [r3, #25]
 80011ce:	4618      	mov	r0, r3
 80011d0:	eeb0 0a67 	vmov.f32	s0, s15
 80011d4:	f000 f898 	bl	8001308 <GPS_nmea_to_dec>
 80011d8:	eef0 7a40 	vmov.f32	s15, s0
 80011dc:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <GPS_parse+0x164>)
 80011de:	edc3 7a00 	vstr	s15, [r3]
    		return;
 80011e2:	e051      	b.n	8001288 <GPS_parse+0x12c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80011e4:	2206      	movs	r2, #6
 80011e6:	4937      	ldr	r1, [pc, #220]	; (80012c4 <GPS_parse+0x168>)
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f005 fdd0 	bl	8006d8e <strncmp>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d114      	bne.n	800121e <GPS_parse+0xc2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 80011f4:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <GPS_parse+0x16c>)
 80011f6:	9305      	str	r3, [sp, #20]
 80011f8:	4b34      	ldr	r3, [pc, #208]	; (80012cc <GPS_parse+0x170>)
 80011fa:	9304      	str	r3, [sp, #16]
 80011fc:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <GPS_parse+0x174>)
 80011fe:	9303      	str	r3, [sp, #12]
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <GPS_parse+0x14c>)
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	4b29      	ldr	r3, [pc, #164]	; (80012ac <GPS_parse+0x150>)
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <GPS_parse+0x154>)
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <GPS_parse+0x158>)
 800120e:	4a2a      	ldr	r2, [pc, #168]	; (80012b8 <GPS_parse+0x15c>)
 8001210:	4930      	ldr	r1, [pc, #192]	; (80012d4 <GPS_parse+0x178>)
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f005 fd42 	bl	8006c9c <siscanf>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	e034      	b.n	8001288 <GPS_parse+0x12c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 800121e:	2206      	movs	r2, #6
 8001220:	492d      	ldr	r1, [pc, #180]	; (80012d8 <GPS_parse+0x17c>)
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f005 fdb3 	bl	8006d8e <strncmp>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d110      	bne.n	8001250 <GPS_parse+0xf4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <GPS_parse+0x180>)
 8001230:	9303      	str	r3, [sp, #12]
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <GPS_parse+0x15c>)
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <GPS_parse+0x14c>)
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <GPS_parse+0x150>)
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <GPS_parse+0x154>)
 8001240:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <GPS_parse+0x158>)
 8001242:	4927      	ldr	r1, [pc, #156]	; (80012e0 <GPS_parse+0x184>)
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f005 fd29 	bl	8006c9c <siscanf>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	e01b      	b.n	8001288 <GPS_parse+0x12c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001250:	2206      	movs	r2, #6
 8001252:	4924      	ldr	r1, [pc, #144]	; (80012e4 <GPS_parse+0x188>)
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f005 fd9a 	bl	8006d8e <strncmp>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d113      	bne.n	8001288 <GPS_parse+0x12c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <GPS_parse+0x18c>)
 8001262:	9305      	str	r3, [sp, #20]
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <GPS_parse+0x190>)
 8001266:	9304      	str	r3, [sp, #16]
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <GPS_parse+0x194>)
 800126a:	9303      	str	r3, [sp, #12]
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <GPS_parse+0x174>)
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <GPS_parse+0x198>)
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <GPS_parse+0x19c>)
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <GPS_parse+0x1a0>)
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <GPS_parse+0x1a4>)
 800127c:	4921      	ldr	r1, [pc, #132]	; (8001304 <GPS_parse+0x1a8>)
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f005 fd0c 	bl	8006c9c <siscanf>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
            return;
    }
}
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	0800ae28 	.word	0x0800ae28
 8001294:	200002ac 	.word	0x200002ac
 8001298:	200002a8 	.word	0x200002a8
 800129c:	200002a4 	.word	0x200002a4
 80012a0:	200002a0 	.word	0x200002a0
 80012a4:	2000029c 	.word	0x2000029c
 80012a8:	20000299 	.word	0x20000299
 80012ac:	2000028c 	.word	0x2000028c
 80012b0:	20000298 	.word	0x20000298
 80012b4:	20000290 	.word	0x20000290
 80012b8:	20000294 	.word	0x20000294
 80012bc:	0800ae30 	.word	0x0800ae30
 80012c0:	20000280 	.word	0x20000280
 80012c4:	0800ae58 	.word	0x0800ae58
 80012c8:	200002b8 	.word	0x200002b8
 80012cc:	200002b4 	.word	0x200002b4
 80012d0:	200002b0 	.word	0x200002b0
 80012d4:	0800ae60 	.word	0x0800ae60
 80012d8:	0800ae80 	.word	0x0800ae80
 80012dc:	200002bc 	.word	0x200002bc
 80012e0:	0800ae88 	.word	0x0800ae88
 80012e4:	0800aea4 	.word	0x0800aea4
 80012e8:	200002d4 	.word	0x200002d4
 80012ec:	200002d0 	.word	0x200002d0
 80012f0:	200002cd 	.word	0x200002cd
 80012f4:	200002cc 	.word	0x200002cc
 80012f8:	200002c8 	.word	0x200002c8
 80012fc:	200002c4 	.word	0x200002c4
 8001300:	200002c0 	.word	0x200002c0
 8001304:	0800aeac 	.word	0x0800aeac

08001308 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001308:	b480      	push	{r7}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001312:	4603      	mov	r3, r0
 8001314:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001316:	ed97 7a01 	vldr	s14, [r7, #4]
 800131a:	eddf 6a20 	vldr	s13, [pc, #128]	; 800139c <GPS_nmea_to_dec+0x94>
 800131e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001326:	ee17 3a90 	vmov	r3, s15
 800132a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	2264      	movs	r2, #100	; 0x64
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001344:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001348:	ed97 7a03 	vldr	s14, [r7, #12]
 800134c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80013a0 <GPS_nmea_to_dec+0x98>
 8001350:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001354:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	ed97 7a02 	vldr	s14, [r7, #8]
 8001366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	2b53      	cmp	r3, #83	; 0x53
 8001372:	d002      	beq.n	800137a <GPS_nmea_to_dec+0x72>
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	2b57      	cmp	r3, #87	; 0x57
 8001378:	d105      	bne.n	8001386 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800137a:	edd7 7a05 	vldr	s15, [r7, #20]
 800137e:	eef1 7a67 	vneg.f32	s15, s15
 8001382:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	ee07 3a90 	vmov	s15, r3
}
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	371c      	adds	r7, #28
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	42c80000 	.word	0x42c80000
 80013a0:	42700000 	.word	0x42700000

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a8:	f000 faaa 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ac:	f000 f840 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b0:	f000 f8c8 	bl	8001544 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013b4:	f000 f89c 	bl	80014f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 80013b8:	f7ff fe22 	bl	8001000 <GPS_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013bc:	f001 fe4c 	bl	8003058 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of gps_semaphore */
  gps_semaphoreHandle = osSemaphoreNew(1, 0, &gps_semaphore_attributes);
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <main+0x64>)
 80013c2:	2100      	movs	r1, #0
 80013c4:	2001      	movs	r0, #1
 80013c6:	f001 ff3e 	bl	8003246 <osSemaphoreNew>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a0f      	ldr	r2, [pc, #60]	; (800140c <main+0x68>)
 80013ce:	6013      	str	r3, [r2, #0]

  /* creation of UART2_semaphore */
  UART2_semaphoreHandle = osSemaphoreNew(1, 0, &UART2_semaphore_attributes);
 80013d0:	4a0f      	ldr	r2, [pc, #60]	; (8001410 <main+0x6c>)
 80013d2:	2100      	movs	r1, #0
 80013d4:	2001      	movs	r0, #1
 80013d6:	f001 ff36 	bl	8003246 <osSemaphoreNew>
 80013da:	4603      	mov	r3, r0
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <main+0x70>)
 80013de:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <main+0x74>)
 80013e2:	2100      	movs	r1, #0
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <main+0x78>)
 80013e6:	f001 fe81 	bl	80030ec <osThreadNew>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <main+0x7c>)
 80013ee:	6013      	str	r3, [r2, #0]

  /* creation of Recieve_uart */
  Recieve_uartHandle = osThreadNew(StartTask02, NULL, &Recieve_uart_attributes);
 80013f0:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <main+0x80>)
 80013f2:	2100      	movs	r1, #0
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <main+0x84>)
 80013f6:	f001 fe79 	bl	80030ec <osThreadNew>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a0b      	ldr	r2, [pc, #44]	; (800142c <main+0x88>)
 80013fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001400:	f001 fe4e 	bl	80030a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001404:	e7fe      	b.n	8001404 <main+0x60>
 8001406:	bf00      	nop
 8001408:	0800af74 	.word	0x0800af74
 800140c:	20000584 	.word	0x20000584
 8001410:	0800af84 	.word	0x0800af84
 8001414:	200005d8 	.word	0x200005d8
 8001418:	0800af2c 	.word	0x0800af2c
 800141c:	08001579 	.word	0x08001579
 8001420:	20000320 	.word	0x20000320
 8001424:	0800af50 	.word	0x0800af50
 8001428:	08001589 	.word	0x08001589
 800142c:	20000324 	.word	0x20000324

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b094      	sub	sp, #80	; 0x50
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	2230      	movs	r2, #48	; 0x30
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f005 fc9d 	bl	8006d7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <SystemClock_Config+0xb8>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <SystemClock_Config+0xb8>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001462:	6413      	str	r3, [r2, #64]	; 0x40
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <SystemClock_Config+0xb8>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <SystemClock_Config+0xbc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800147c:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <SystemClock_Config+0xbc>)
 800147e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <SystemClock_Config+0xbc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001490:	2302      	movs	r3, #2
 8001492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001494:	2301      	movs	r3, #1
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001498:	2310      	movs	r3, #16
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800149c:	2300      	movs	r3, #0
 800149e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fd33 	bl	8001f10 <HAL_RCC_OscConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014b0:	f000 f878 	bl	80015a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	230f      	movs	r3, #15
 80014b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 ff96 	bl	8002400 <HAL_RCC_ClockConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014da:	f000 f863 	bl	80015a4 <Error_Handler>
  }
}
 80014de:	bf00      	nop
 80014e0:	3750      	adds	r7, #80	; 0x50
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40007000 	.word	0x40007000

080014f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_USART2_UART_Init+0x4c>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <MX_USART2_UART_Init+0x50>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_USART2_UART_Init+0x4c>)
 80014fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_USART2_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_USART2_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001528:	f001 f94a 	bl	80027c0 <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001532:	f000 f837 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200002d8 	.word	0x200002d8
 8001540:	40004400 	.word	0x40004400

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_GPIO_Init+0x30>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <MX_GPIO_Init+0x30>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_GPIO_Init+0x30>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800

08001578 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001580:	2001      	movs	r0, #1
 8001582:	f001 fe45 	bl	8003210 <osDelay>
 8001586:	e7fb      	b.n	8001580 <StartDefaultTask+0x8>

08001588 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	GPS_Recieve();
 8001590:	f7ff fd3e 	bl	8001010 <GPS_Recieve>
	vTaskDelay(pdMS_TO_TICKS(1000)); // Delay for 1000 ms (1 second)
 8001594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001598:	f002 ff46 	bl	8004428 <vTaskDelay>
//    for(;;)
//    {
//      osDelay(1);
//    }
  /* USER CODE END StartTask02 */
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ac:	e7fe      	b.n	80015ac <Error_Handler+0x8>
	...

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_MspInit+0x64>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a15      	ldr	r2, [pc, #84]	; (8001614 <HAL_MspInit+0x64>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_MspInit+0x64>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_MspInit+0x64>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <HAL_MspInit+0x64>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_MspInit+0x64>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	210f      	movs	r1, #15
 80015f2:	f06f 0001 	mvn.w	r0, #1
 80015f6:	f000 fad0 	bl	8001b9a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2105      	movs	r1, #5
 80015fe:	2005      	movs	r0, #5
 8001600:	f000 facb 	bl	8001b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001604:	2005      	movs	r0, #5
 8001606:	f000 fae4 	bl	8001bd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a19      	ldr	r2, [pc, #100]	; (800169c <HAL_UART_MspInit+0x84>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12b      	bne.n	8001692 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_UART_MspInit+0x88>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_UART_MspInit+0x88>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001672:	230c      	movs	r3, #12
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001682:	2307      	movs	r3, #7
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_UART_MspInit+0x8c>)
 800168e:	f000 fabb 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40004400 	.word	0x40004400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d8:	f000 f964 	bl	80019a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016dc:	f003 fb20 	bl	8004d20 <xTaskGetSchedulerState>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d001      	beq.n	80016ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80016e6:	f004 f907 	bl	80058f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}

080016ee <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return 1;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_kill>:

int _kill(int pid, int sig)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001716:	f005 fb97 	bl	8006e48 <__errno>
 800171a:	4603      	mov	r3, r0
 800171c:	2216      	movs	r2, #22
 800171e:	601a      	str	r2, [r3, #0]
  return -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_exit>:

void _exit (int status)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ffe7 	bl	800170c <_kill>
  while (1) {}    /* Make sure we hang here */
 800173e:	e7fe      	b.n	800173e <_exit+0x12>

08001740 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001752:	f3af 8000 	nop.w
 8001756:	4601      	mov	r1, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf0      	blt.n	8001752 <_read+0x12>
  }

  return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e009      	b.n	80017a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60ba      	str	r2, [r7, #8]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbf1      	blt.n	800178c <_write+0x12>
  }
  return len;
 80017a8:	687b      	ldr	r3, [r7, #4]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_close>:

int _close(int file)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017da:	605a      	str	r2, [r3, #4]
  return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_isatty>:

int _isatty(int file)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f005 fafc 	bl	8006e48 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20010000 	.word	0x20010000
 800187c:	00000400 	.word	0x00000400
 8001880:	2000062c 	.word	0x2000062c
 8001884:	200050d0 	.word	0x200050d0

08001888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018b0:	f7ff ffea 	bl	8001888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018b6:	490d      	ldr	r1, [pc, #52]	; (80018ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018cc:	4c0a      	ldr	r4, [pc, #40]	; (80018f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018da:	f005 fabb 	bl	8006e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7ff fd61 	bl	80013a4 <main>
  bx  lr    
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80018f0:	0800b404 	.word	0x0800b404
  ldr r2, =_sbss
 80018f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80018f8:	200050d0 	.word	0x200050d0

080018fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <HAL_Init+0x40>)
 800190a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_Init+0x40>)
 8001916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_Init+0x40>)
 8001922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 f92b 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	200f      	movs	r0, #15
 8001930:	f000 f808 	bl	8001944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fe3c 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x54>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x58>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195a:	fbb3 f3f1 	udiv	r3, r3, r1
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f943 	bl	8001bee <HAL_SYSTICK_Config>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e00e      	b.n	8001990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d80a      	bhi.n	800198e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f000 f90b 	bl	8001b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_InitTick+0x5c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000004 	.word	0x20000004
 800199c:	2000000c 	.word	0x2000000c
 80019a0:	20000008 	.word	0x20000008

080019a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x20>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_IncTick+0x24>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_IncTick+0x24>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	2000000c 	.word	0x2000000c
 80019c8:	20000630 	.word	0x20000630

080019cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_GetTick+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000630 	.word	0x20000630

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4907      	ldr	r1, [pc, #28]	; (8001a80 <__NVIC_EnableIRQ+0x38>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f7ff ff8e 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff29 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff3e 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff8e 	bl	8001ad8 <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5d 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff31 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffa2 	bl	8001b40 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	e159      	b.n	8001ed8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c24:	2201      	movs	r2, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f040 8148 	bne.w	8001ed2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d005      	beq.n	8001c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d130      	bne.n	8001cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 0201 	and.w	r2, r3, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d017      	beq.n	8001cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d123      	bne.n	8001d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3208      	adds	r2, #8
 8001d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	08da      	lsrs	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3208      	adds	r2, #8
 8001d46:	69b9      	ldr	r1, [r7, #24]
 8001d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0203 	and.w	r2, r3, #3
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80a2 	beq.w	8001ed2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b57      	ldr	r3, [pc, #348]	; (8001ef0 <HAL_GPIO_Init+0x2e8>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a56      	ldr	r2, [pc, #344]	; (8001ef0 <HAL_GPIO_Init+0x2e8>)
 8001d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b54      	ldr	r3, [pc, #336]	; (8001ef0 <HAL_GPIO_Init+0x2e8>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001daa:	4a52      	ldr	r2, [pc, #328]	; (8001ef4 <HAL_GPIO_Init+0x2ec>)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a49      	ldr	r2, [pc, #292]	; (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d019      	beq.n	8001e0a <HAL_GPIO_Init+0x202>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a48      	ldr	r2, [pc, #288]	; (8001efc <HAL_GPIO_Init+0x2f4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_GPIO_Init+0x1fe>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a47      	ldr	r2, [pc, #284]	; (8001f00 <HAL_GPIO_Init+0x2f8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00d      	beq.n	8001e02 <HAL_GPIO_Init+0x1fa>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a46      	ldr	r2, [pc, #280]	; (8001f04 <HAL_GPIO_Init+0x2fc>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <HAL_GPIO_Init+0x1f6>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a45      	ldr	r2, [pc, #276]	; (8001f08 <HAL_GPIO_Init+0x300>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_GPIO_Init+0x1f2>
 8001df6:	2304      	movs	r3, #4
 8001df8:	e008      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e004      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	f002 0203 	and.w	r2, r2, #3
 8001e12:	0092      	lsls	r2, r2, #2
 8001e14:	4093      	lsls	r3, r2
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e1c:	4935      	ldr	r1, [pc, #212]	; (8001ef4 <HAL_GPIO_Init+0x2ec>)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2a:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e4e:	4a2f      	ldr	r2, [pc, #188]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e54:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e78:	4a24      	ldr	r2, [pc, #144]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea2:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ecc:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b0f      	cmp	r3, #15
 8001edc:	f67f aea2 	bls.w	8001c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	40020400 	.word	0x40020400
 8001f00:	40020800 	.word	0x40020800
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40013c00 	.word	0x40013c00

08001f10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e267      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d075      	beq.n	800201a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2e:	4b88      	ldr	r3, [pc, #544]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d00c      	beq.n	8001f54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f3a:	4b85      	ldr	r3, [pc, #532]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d112      	bne.n	8001f6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f46:	4b82      	ldr	r3, [pc, #520]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f52:	d10b      	bne.n	8001f6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	4b7e      	ldr	r3, [pc, #504]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d05b      	beq.n	8002018 <HAL_RCC_OscConfig+0x108>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d157      	bne.n	8002018 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e242      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f74:	d106      	bne.n	8001f84 <HAL_RCC_OscConfig+0x74>
 8001f76:	4b76      	ldr	r3, [pc, #472]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a75      	ldr	r2, [pc, #468]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e01d      	b.n	8001fc0 <HAL_RCC_OscConfig+0xb0>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x98>
 8001f8e:	4b70      	ldr	r3, [pc, #448]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a6f      	ldr	r2, [pc, #444]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b6d      	ldr	r3, [pc, #436]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a6c      	ldr	r2, [pc, #432]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0xb0>
 8001fa8:	4b69      	ldr	r3, [pc, #420]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a68      	ldr	r2, [pc, #416]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	4b66      	ldr	r3, [pc, #408]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a65      	ldr	r2, [pc, #404]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d013      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fd00 	bl	80019cc <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7ff fcfc 	bl	80019cc <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e207      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b5b      	ldr	r3, [pc, #364]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xc0>
 8001fee:	e014      	b.n	800201a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff fcec 	bl	80019cc <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7ff fce8 	bl	80019cc <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e1f3      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	4b51      	ldr	r3, [pc, #324]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xe8>
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d063      	beq.n	80020ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002026:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002032:	4b47      	ldr	r3, [pc, #284]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800203a:	2b08      	cmp	r3, #8
 800203c:	d11c      	bne.n	8002078 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800203e:	4b44      	ldr	r3, [pc, #272]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d116      	bne.n	8002078 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_RCC_OscConfig+0x152>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d001      	beq.n	8002062 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e1c7      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002062:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4937      	ldr	r1, [pc, #220]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	e03a      	b.n	80020ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002080:	4b34      	ldr	r3, [pc, #208]	; (8002154 <HAL_RCC_OscConfig+0x244>)
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7ff fca1 	bl	80019cc <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208e:	f7ff fc9d 	bl	80019cc <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e1a8      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ac:	4b28      	ldr	r3, [pc, #160]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4925      	ldr	r1, [pc, #148]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	600b      	str	r3, [r1, #0]
 80020c0:	e015      	b.n	80020ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c2:	4b24      	ldr	r3, [pc, #144]	; (8002154 <HAL_RCC_OscConfig+0x244>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7ff fc80 	bl	80019cc <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d0:	f7ff fc7c 	bl	80019cc <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e187      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d036      	beq.n	8002168 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d016      	beq.n	8002130 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_RCC_OscConfig+0x248>)
 8002104:	2201      	movs	r2, #1
 8002106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7ff fc60 	bl	80019cc <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff fc5c 	bl	80019cc <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e167      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8002124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x200>
 800212e:	e01b      	b.n	8002168 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_OscConfig+0x248>)
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002136:	f7ff fc49 	bl	80019cc <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213c:	e00e      	b.n	800215c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800213e:	f7ff fc45 	bl	80019cc <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d907      	bls.n	800215c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e150      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
 8002150:	40023800 	.word	0x40023800
 8002154:	42470000 	.word	0x42470000
 8002158:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	4b88      	ldr	r3, [pc, #544]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ea      	bne.n	800213e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 8097 	beq.w	80022a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217a:	4b81      	ldr	r3, [pc, #516]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10f      	bne.n	80021a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	4b7d      	ldr	r3, [pc, #500]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a7c      	ldr	r2, [pc, #496]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b7a      	ldr	r3, [pc, #488]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a6:	4b77      	ldr	r3, [pc, #476]	; (8002384 <HAL_RCC_OscConfig+0x474>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d118      	bne.n	80021e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b2:	4b74      	ldr	r3, [pc, #464]	; (8002384 <HAL_RCC_OscConfig+0x474>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a73      	ldr	r2, [pc, #460]	; (8002384 <HAL_RCC_OscConfig+0x474>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021be:	f7ff fc05 	bl	80019cc <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c6:	f7ff fc01 	bl	80019cc <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e10c      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCC_OscConfig+0x474>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x2ea>
 80021ec:	4b64      	ldr	r3, [pc, #400]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	4a63      	ldr	r2, [pc, #396]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6713      	str	r3, [r2, #112]	; 0x70
 80021f8:	e01c      	b.n	8002234 <HAL_RCC_OscConfig+0x324>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x30c>
 8002202:	4b5f      	ldr	r3, [pc, #380]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	4a5e      	ldr	r2, [pc, #376]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6713      	str	r3, [r2, #112]	; 0x70
 800220e:	4b5c      	ldr	r3, [pc, #368]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a5b      	ldr	r2, [pc, #364]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0x324>
 800221c:	4b58      	ldr	r3, [pc, #352]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	4a57      	ldr	r2, [pc, #348]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	6713      	str	r3, [r2, #112]	; 0x70
 8002228:	4b55      	ldr	r3, [pc, #340]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	4a54      	ldr	r2, [pc, #336]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800222e:	f023 0304 	bic.w	r3, r3, #4
 8002232:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d015      	beq.n	8002268 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223c:	f7ff fbc6 	bl	80019cc <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002242:	e00a      	b.n	800225a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7ff fbc2 	bl	80019cc <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0cb      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225a:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0ee      	beq.n	8002244 <HAL_RCC_OscConfig+0x334>
 8002266:	e014      	b.n	8002292 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002268:	f7ff fbb0 	bl	80019cc <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226e:	e00a      	b.n	8002286 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7ff fbac 	bl	80019cc <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e0b5      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002286:	4b3e      	ldr	r3, [pc, #248]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1ee      	bne.n	8002270 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d105      	bne.n	80022a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002298:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	4a38      	ldr	r2, [pc, #224]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800229e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80a1 	beq.w	80023f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ae:	4b34      	ldr	r3, [pc, #208]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d05c      	beq.n	8002374 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d141      	bne.n	8002346 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b31      	ldr	r3, [pc, #196]	; (8002388 <HAL_RCC_OscConfig+0x478>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7ff fb80 	bl	80019cc <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d0:	f7ff fb7c 	bl	80019cc <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e087      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e2:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	019b      	lsls	r3, r3, #6
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	3b01      	subs	r3, #1
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	061b      	lsls	r3, r3, #24
 8002312:	491b      	ldr	r1, [pc, #108]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_RCC_OscConfig+0x478>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7ff fb55 	bl	80019cc <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002326:	f7ff fb51 	bl	80019cc <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e05c      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x416>
 8002344:	e054      	b.n	80023f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <HAL_RCC_OscConfig+0x478>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fb3e 	bl	80019cc <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002354:	f7ff fb3a 	bl	80019cc <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e045      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x444>
 8002372:	e03d      	b.n	80023f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d107      	bne.n	800238c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e038      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000
 8002388:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x4ec>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d028      	beq.n	80023ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d121      	bne.n	80023ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d11a      	bne.n	80023ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d111      	bne.n	80023ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	3b01      	subs	r3, #1
 80023d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d107      	bne.n	80023ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800

08002400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0cc      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002414:	4b68      	ldr	r3, [pc, #416]	; (80025b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d90c      	bls.n	800243c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b65      	ldr	r3, [pc, #404]	; (80025b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b63      	ldr	r3, [pc, #396]	; (80025b8 <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0b8      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002454:	4b59      	ldr	r3, [pc, #356]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a58      	ldr	r2, [pc, #352]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800245e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800246c:	4b53      	ldr	r3, [pc, #332]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a52      	ldr	r2, [pc, #328]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002476:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002478:	4b50      	ldr	r3, [pc, #320]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	494d      	ldr	r1, [pc, #308]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d044      	beq.n	8002520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d119      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e07f      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d003      	beq.n	80024be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024be:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e06f      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ce:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e067      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024de:	4b37      	ldr	r3, [pc, #220]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f023 0203 	bic.w	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4934      	ldr	r1, [pc, #208]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f0:	f7ff fa6c 	bl	80019cc <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	e00a      	b.n	800250e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f8:	f7ff fa68 	bl	80019cc <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e04f      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 020c 	and.w	r2, r3, #12
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	429a      	cmp	r2, r3
 800251e:	d1eb      	bne.n	80024f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d20c      	bcs.n	8002548 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e032      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4916      	ldr	r1, [pc, #88]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	490e      	ldr	r1, [pc, #56]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002586:	f000 f821 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 800258a:	4602      	mov	r2, r0
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	490a      	ldr	r1, [pc, #40]	; (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	5ccb      	ldrb	r3, [r1, r3]
 800259a:	fa22 f303 	lsr.w	r3, r2, r3
 800259e:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f9cc 	bl	8001944 <HAL_InitTick>

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023c00 	.word	0x40023c00
 80025bc:	40023800 	.word	0x40023800
 80025c0:	0800af94 	.word	0x0800af94
 80025c4:	20000004 	.word	0x20000004
 80025c8:	20000008 	.word	0x20000008

080025cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d0:	b090      	sub	sp, #64	; 0x40
 80025d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
 80025d8:	2300      	movs	r3, #0
 80025da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025dc:	2300      	movs	r3, #0
 80025de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025e4:	4b59      	ldr	r3, [pc, #356]	; (800274c <HAL_RCC_GetSysClockFreq+0x180>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d00d      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x40>
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	f200 80a1 	bhi.w	8002738 <HAL_RCC_GetSysClockFreq+0x16c>
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x34>
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d003      	beq.n	8002606 <HAL_RCC_GetSysClockFreq+0x3a>
 80025fe:	e09b      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002600:	4b53      	ldr	r3, [pc, #332]	; (8002750 <HAL_RCC_GetSysClockFreq+0x184>)
 8002602:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002604:	e09b      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002606:	4b53      	ldr	r3, [pc, #332]	; (8002754 <HAL_RCC_GetSysClockFreq+0x188>)
 8002608:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800260a:	e098      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800260c:	4b4f      	ldr	r3, [pc, #316]	; (800274c <HAL_RCC_GetSysClockFreq+0x180>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002616:	4b4d      	ldr	r3, [pc, #308]	; (800274c <HAL_RCC_GetSysClockFreq+0x180>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d028      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002622:	4b4a      	ldr	r3, [pc, #296]	; (800274c <HAL_RCC_GetSysClockFreq+0x180>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	099b      	lsrs	r3, r3, #6
 8002628:	2200      	movs	r2, #0
 800262a:	623b      	str	r3, [r7, #32]
 800262c:	627a      	str	r2, [r7, #36]	; 0x24
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002634:	2100      	movs	r1, #0
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <HAL_RCC_GetSysClockFreq+0x188>)
 8002638:	fb03 f201 	mul.w	r2, r3, r1
 800263c:	2300      	movs	r3, #0
 800263e:	fb00 f303 	mul.w	r3, r0, r3
 8002642:	4413      	add	r3, r2
 8002644:	4a43      	ldr	r2, [pc, #268]	; (8002754 <HAL_RCC_GetSysClockFreq+0x188>)
 8002646:	fba0 1202 	umull	r1, r2, r0, r2
 800264a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800264c:	460a      	mov	r2, r1
 800264e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002652:	4413      	add	r3, r2
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002658:	2200      	movs	r2, #0
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	61fa      	str	r2, [r7, #28]
 800265e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002662:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002666:	f7fe fb17 	bl	8000c98 <__aeabi_uldivmod>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4613      	mov	r3, r2
 8002670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002672:	e053      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002674:	4b35      	ldr	r3, [pc, #212]	; (800274c <HAL_RCC_GetSysClockFreq+0x180>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	2200      	movs	r2, #0
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	617a      	str	r2, [r7, #20]
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002686:	f04f 0b00 	mov.w	fp, #0
 800268a:	4652      	mov	r2, sl
 800268c:	465b      	mov	r3, fp
 800268e:	f04f 0000 	mov.w	r0, #0
 8002692:	f04f 0100 	mov.w	r1, #0
 8002696:	0159      	lsls	r1, r3, #5
 8002698:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800269c:	0150      	lsls	r0, r2, #5
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	ebb2 080a 	subs.w	r8, r2, sl
 80026a6:	eb63 090b 	sbc.w	r9, r3, fp
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026be:	ebb2 0408 	subs.w	r4, r2, r8
 80026c2:	eb63 0509 	sbc.w	r5, r3, r9
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	00eb      	lsls	r3, r5, #3
 80026d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026d4:	00e2      	lsls	r2, r4, #3
 80026d6:	4614      	mov	r4, r2
 80026d8:	461d      	mov	r5, r3
 80026da:	eb14 030a 	adds.w	r3, r4, sl
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	eb45 030b 	adc.w	r3, r5, fp
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026f2:	4629      	mov	r1, r5
 80026f4:	028b      	lsls	r3, r1, #10
 80026f6:	4621      	mov	r1, r4
 80026f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026fc:	4621      	mov	r1, r4
 80026fe:	028a      	lsls	r2, r1, #10
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	2200      	movs	r2, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	60fa      	str	r2, [r7, #12]
 800270c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002710:	f7fe fac2 	bl	8000c98 <__aeabi_uldivmod>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4613      	mov	r3, r2
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_GetSysClockFreq+0x180>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	3301      	adds	r3, #1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800272c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002736:	e002      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetSysClockFreq+0x184>)
 800273a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800273c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002740:	4618      	mov	r0, r3
 8002742:	3740      	adds	r7, #64	; 0x40
 8002744:	46bd      	mov	sp, r7
 8002746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	00f42400 	.word	0x00f42400
 8002754:	017d7840 	.word	0x017d7840

08002758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_RCC_GetHCLKFreq+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000004 	.word	0x20000004

08002770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002774:	f7ff fff0 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	0a9b      	lsrs	r3, r3, #10
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4903      	ldr	r1, [pc, #12]	; (8002794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	0800afa4 	.word	0x0800afa4

08002798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800279c:	f7ff ffdc 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	0b5b      	lsrs	r3, r3, #13
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4903      	ldr	r1, [pc, #12]	; (80027bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	0800afa4 	.word	0x0800afa4

080027c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e042      	b.n	8002858 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fe ff16 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2224      	movs	r2, #36	; 0x24
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f97f 	bl	8002b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695a      	ldr	r2, [r3, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b20      	cmp	r3, #32
 800287e:	f040 8081 	bne.w	8002984 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_UART_Receive+0x2e>
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e079      	b.n	8002986 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2222      	movs	r2, #34	; 0x22
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028a6:	f7ff f891 	bl	80019cc <HAL_GetTick>
 80028aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	88fa      	ldrh	r2, [r7, #6]
 80028b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	88fa      	ldrh	r2, [r7, #6]
 80028b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c0:	d108      	bne.n	80028d4 <HAL_UART_Receive+0x74>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d104      	bne.n	80028d4 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	e003      	b.n	80028dc <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80028dc:	e047      	b.n	800296e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2200      	movs	r2, #0
 80028e6:	2120      	movs	r1, #32
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f850 	bl	800298e <UART_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e042      	b.n	8002986 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10c      	bne.n	8002920 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002912:	b29a      	uxth	r2, r3
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	3302      	adds	r3, #2
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	e01f      	b.n	8002960 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002928:	d007      	beq.n	800293a <HAL_UART_Receive+0xda>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <HAL_UART_Receive+0xe8>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	701a      	strb	r2, [r3, #0]
 8002946:	e008      	b.n	800295a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002954:	b2da      	uxtb	r2, r3
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3301      	adds	r3, #1
 800295e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1b2      	bne.n	80028de <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	e000      	b.n	8002986 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
  }
}
 8002986:	4618      	mov	r0, r3
 8002988:	3720      	adds	r7, #32
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	4613      	mov	r3, r2
 800299c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800299e:	e03b      	b.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a6:	d037      	beq.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a8:	f7ff f810 	bl	80019cc <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	6a3a      	ldr	r2, [r7, #32]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d302      	bcc.n	80029be <UART_WaitOnFlagUntilTimeout+0x30>
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e03a      	b.n	8002a38 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d023      	beq.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x8a>
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b80      	cmp	r3, #128	; 0x80
 80029d4:	d020      	beq.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x8a>
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b40      	cmp	r3, #64	; 0x40
 80029da:	d01d      	beq.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d116      	bne.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f81d 	bl	8002a40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2208      	movs	r2, #8
 8002a0a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e00f      	b.n	8002a38 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	4013      	ands	r3, r2
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d0b4      	beq.n	80029a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b095      	sub	sp, #84	; 0x54
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	330c      	adds	r3, #12
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a52:	e853 3f00 	ldrex	r3, [r3]
 8002a56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	330c      	adds	r3, #12
 8002a66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a68:	643a      	str	r2, [r7, #64]	; 0x40
 8002a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a70:	e841 2300 	strex	r3, r2, [r1]
 8002a74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1e5      	bne.n	8002a48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3314      	adds	r3, #20
 8002a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	e853 3f00 	ldrex	r3, [r3]
 8002a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3314      	adds	r3, #20
 8002a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa4:	e841 2300 	strex	r3, r2, [r1]
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1e5      	bne.n	8002a7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d119      	bne.n	8002aec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	330c      	adds	r3, #12
 8002abe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	e853 3f00 	ldrex	r3, [r3]
 8002ac6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f023 0310 	bic.w	r3, r3, #16
 8002ace:	647b      	str	r3, [r7, #68]	; 0x44
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ad8:	61ba      	str	r2, [r7, #24]
 8002ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002adc:	6979      	ldr	r1, [r7, #20]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	e841 2300 	strex	r3, r2, [r1]
 8002ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e5      	bne.n	8002ab8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002afa:	bf00      	nop
 8002afc:	3754      	adds	r7, #84	; 0x54
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b0c:	b0c0      	sub	sp, #256	; 0x100
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b24:	68d9      	ldr	r1, [r3, #12]
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	ea40 0301 	orr.w	r3, r0, r1
 8002b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b60:	f021 010c 	bic.w	r1, r1, #12
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b82:	6999      	ldr	r1, [r3, #24]
 8002b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	ea40 0301 	orr.w	r3, r0, r1
 8002b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b8f      	ldr	r3, [pc, #572]	; (8002dd4 <UART_SetConfig+0x2cc>)
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d005      	beq.n	8002ba8 <UART_SetConfig+0xa0>
 8002b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b8d      	ldr	r3, [pc, #564]	; (8002dd8 <UART_SetConfig+0x2d0>)
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d104      	bne.n	8002bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ba8:	f7ff fdf6 	bl	8002798 <HAL_RCC_GetPCLK2Freq>
 8002bac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bb0:	e003      	b.n	8002bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bb2:	f7ff fddd 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 8002bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc4:	f040 810c 	bne.w	8002de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bda:	4622      	mov	r2, r4
 8002bdc:	462b      	mov	r3, r5
 8002bde:	1891      	adds	r1, r2, r2
 8002be0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002be2:	415b      	adcs	r3, r3
 8002be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bea:	4621      	mov	r1, r4
 8002bec:	eb12 0801 	adds.w	r8, r2, r1
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	eb43 0901 	adc.w	r9, r3, r1
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c0a:	4690      	mov	r8, r2
 8002c0c:	4699      	mov	r9, r3
 8002c0e:	4623      	mov	r3, r4
 8002c10:	eb18 0303 	adds.w	r3, r8, r3
 8002c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c18:	462b      	mov	r3, r5
 8002c1a:	eb49 0303 	adc.w	r3, r9, r3
 8002c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c36:	460b      	mov	r3, r1
 8002c38:	18db      	adds	r3, r3, r3
 8002c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	eb42 0303 	adc.w	r3, r2, r3
 8002c42:	657b      	str	r3, [r7, #84]	; 0x54
 8002c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c4c:	f7fe f824 	bl	8000c98 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002c56:	fba3 2302 	umull	r2, r3, r3, r2
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	011c      	lsls	r4, r3, #4
 8002c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c62:	2200      	movs	r2, #0
 8002c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c70:	4642      	mov	r2, r8
 8002c72:	464b      	mov	r3, r9
 8002c74:	1891      	adds	r1, r2, r2
 8002c76:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c78:	415b      	adcs	r3, r3
 8002c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c80:	4641      	mov	r1, r8
 8002c82:	eb12 0a01 	adds.w	sl, r2, r1
 8002c86:	4649      	mov	r1, r9
 8002c88:	eb43 0b01 	adc.w	fp, r3, r1
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ca0:	4692      	mov	sl, r2
 8002ca2:	469b      	mov	fp, r3
 8002ca4:	4643      	mov	r3, r8
 8002ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8002caa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cae:	464b      	mov	r3, r9
 8002cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8002cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	18db      	adds	r3, r3, r3
 8002cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	eb42 0303 	adc.w	r3, r2, r3
 8002cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ce2:	f7fd ffd9 	bl	8000c98 <__aeabi_uldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4611      	mov	r1, r2
 8002cec:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002cee:	fba3 2301 	umull	r2, r3, r3, r1
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2264      	movs	r2, #100	; 0x64
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	1acb      	subs	r3, r1, r3
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d02:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002d04:	fba3 2302 	umull	r2, r3, r3, r2
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d10:	441c      	add	r4, r3
 8002d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d16:	2200      	movs	r2, #0
 8002d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d24:	4642      	mov	r2, r8
 8002d26:	464b      	mov	r3, r9
 8002d28:	1891      	adds	r1, r2, r2
 8002d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d2c:	415b      	adcs	r3, r3
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d34:	4641      	mov	r1, r8
 8002d36:	1851      	adds	r1, r2, r1
 8002d38:	6339      	str	r1, [r7, #48]	; 0x30
 8002d3a:	4649      	mov	r1, r9
 8002d3c:	414b      	adcs	r3, r1
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d4c:	4659      	mov	r1, fp
 8002d4e:	00cb      	lsls	r3, r1, #3
 8002d50:	4651      	mov	r1, sl
 8002d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d56:	4651      	mov	r1, sl
 8002d58:	00ca      	lsls	r2, r1, #3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4642      	mov	r2, r8
 8002d62:	189b      	adds	r3, r3, r2
 8002d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d68:	464b      	mov	r3, r9
 8002d6a:	460a      	mov	r2, r1
 8002d6c:	eb42 0303 	adc.w	r3, r2, r3
 8002d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d88:	460b      	mov	r3, r1
 8002d8a:	18db      	adds	r3, r3, r3
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8e:	4613      	mov	r3, r2
 8002d90:	eb42 0303 	adc.w	r3, r2, r3
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d9e:	f7fd ff7b 	bl	8000c98 <__aeabi_uldivmod>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002da8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	2164      	movs	r1, #100	; 0x64
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	3332      	adds	r3, #50	; 0x32
 8002dba:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	f003 0207 	and.w	r2, r3, #7
 8002dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4422      	add	r2, r4
 8002dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dd0:	e106      	b.n	8002fe0 <UART_SetConfig+0x4d8>
 8002dd2:	bf00      	nop
 8002dd4:	40011000 	.word	0x40011000
 8002dd8:	40011400 	.word	0x40011400
 8002ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002df2:	4642      	mov	r2, r8
 8002df4:	464b      	mov	r3, r9
 8002df6:	1891      	adds	r1, r2, r2
 8002df8:	6239      	str	r1, [r7, #32]
 8002dfa:	415b      	adcs	r3, r3
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e02:	4641      	mov	r1, r8
 8002e04:	1854      	adds	r4, r2, r1
 8002e06:	4649      	mov	r1, r9
 8002e08:	eb43 0501 	adc.w	r5, r3, r1
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	00eb      	lsls	r3, r5, #3
 8002e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1a:	00e2      	lsls	r2, r4, #3
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	461d      	mov	r5, r3
 8002e20:	4643      	mov	r3, r8
 8002e22:	18e3      	adds	r3, r4, r3
 8002e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e28:	464b      	mov	r3, r9
 8002e2a:	eb45 0303 	adc.w	r3, r5, r3
 8002e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e4e:	4629      	mov	r1, r5
 8002e50:	008b      	lsls	r3, r1, #2
 8002e52:	4621      	mov	r1, r4
 8002e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e58:	4621      	mov	r1, r4
 8002e5a:	008a      	lsls	r2, r1, #2
 8002e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e60:	f7fd ff1a 	bl	8000c98 <__aeabi_uldivmod>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4b60      	ldr	r3, [pc, #384]	; (8002fec <UART_SetConfig+0x4e4>)
 8002e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	011c      	lsls	r4, r3, #4
 8002e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e84:	4642      	mov	r2, r8
 8002e86:	464b      	mov	r3, r9
 8002e88:	1891      	adds	r1, r2, r2
 8002e8a:	61b9      	str	r1, [r7, #24]
 8002e8c:	415b      	adcs	r3, r3
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e94:	4641      	mov	r1, r8
 8002e96:	1851      	adds	r1, r2, r1
 8002e98:	6139      	str	r1, [r7, #16]
 8002e9a:	4649      	mov	r1, r9
 8002e9c:	414b      	adcs	r3, r1
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eac:	4659      	mov	r1, fp
 8002eae:	00cb      	lsls	r3, r1, #3
 8002eb0:	4651      	mov	r1, sl
 8002eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eb6:	4651      	mov	r1, sl
 8002eb8:	00ca      	lsls	r2, r1, #3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ec8:	464b      	mov	r3, r9
 8002eca:	460a      	mov	r2, r1
 8002ecc:	eb42 0303 	adc.w	r3, r2, r3
 8002ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ede:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002eec:	4649      	mov	r1, r9
 8002eee:	008b      	lsls	r3, r1, #2
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ef6:	4641      	mov	r1, r8
 8002ef8:	008a      	lsls	r2, r1, #2
 8002efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002efe:	f7fd fecb 	bl	8000c98 <__aeabi_uldivmod>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	4b38      	ldr	r3, [pc, #224]	; (8002fec <UART_SetConfig+0x4e4>)
 8002f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2264      	movs	r2, #100	; 0x64
 8002f12:	fb02 f303 	mul.w	r3, r2, r3
 8002f16:	1acb      	subs	r3, r1, r3
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	3332      	adds	r3, #50	; 0x32
 8002f1c:	4a33      	ldr	r2, [pc, #204]	; (8002fec <UART_SetConfig+0x4e4>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f28:	441c      	add	r4, r3
 8002f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f2e:	2200      	movs	r2, #0
 8002f30:	673b      	str	r3, [r7, #112]	; 0x70
 8002f32:	677a      	str	r2, [r7, #116]	; 0x74
 8002f34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f38:	4642      	mov	r2, r8
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	1891      	adds	r1, r2, r2
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	415b      	adcs	r3, r3
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f48:	4641      	mov	r1, r8
 8002f4a:	1851      	adds	r1, r2, r1
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	4649      	mov	r1, r9
 8002f50:	414b      	adcs	r3, r1
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f60:	4659      	mov	r1, fp
 8002f62:	00cb      	lsls	r3, r1, #3
 8002f64:	4651      	mov	r1, sl
 8002f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f6a:	4651      	mov	r1, sl
 8002f6c:	00ca      	lsls	r2, r1, #3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	4619      	mov	r1, r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	4642      	mov	r2, r8
 8002f76:	189b      	adds	r3, r3, r2
 8002f78:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	460a      	mov	r2, r1
 8002f7e:	eb42 0303 	adc.w	r3, r2, r3
 8002f82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f8e:	667a      	str	r2, [r7, #100]	; 0x64
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f9c:	4649      	mov	r1, r9
 8002f9e:	008b      	lsls	r3, r1, #2
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fa6:	4641      	mov	r1, r8
 8002fa8:	008a      	lsls	r2, r1, #2
 8002faa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fae:	f7fd fe73 	bl	8000c98 <__aeabi_uldivmod>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <UART_SetConfig+0x4e4>)
 8002fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	2164      	movs	r1, #100	; 0x64
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	3332      	adds	r3, #50	; 0x32
 8002fca:	4a08      	ldr	r2, [pc, #32]	; (8002fec <UART_SetConfig+0x4e4>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	f003 020f 	and.w	r2, r3, #15
 8002fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4422      	add	r2, r4
 8002fde:	609a      	str	r2, [r3, #8]
}
 8002fe0:	bf00      	nop
 8002fe2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fec:	51eb851f 	.word	0x51eb851f

08002ff0 <__NVIC_SetPriority>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6039      	str	r1, [r7, #0]
 8002ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	2b00      	cmp	r3, #0
 8003002:	db0a      	blt.n	800301a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	b2da      	uxtb	r2, r3
 8003008:	490c      	ldr	r1, [pc, #48]	; (800303c <__NVIC_SetPriority+0x4c>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	440b      	add	r3, r1
 8003014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003018:	e00a      	b.n	8003030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4908      	ldr	r1, [pc, #32]	; (8003040 <__NVIC_SetPriority+0x50>)
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	3b04      	subs	r3, #4
 8003028:	0112      	lsls	r2, r2, #4
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	440b      	add	r3, r1
 800302e:	761a      	strb	r2, [r3, #24]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000e100 	.word	0xe000e100
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003048:	2100      	movs	r1, #0
 800304a:	f06f 0004 	mvn.w	r0, #4
 800304e:	f7ff ffcf 	bl	8002ff0 <__NVIC_SetPriority>
#endif
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800305e:	f3ef 8305 	mrs	r3, IPSR
 8003062:	603b      	str	r3, [r7, #0]
  return(result);
 8003064:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800306a:	f06f 0305 	mvn.w	r3, #5
 800306e:	607b      	str	r3, [r7, #4]
 8003070:	e00c      	b.n	800308c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <osKernelInitialize+0x44>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d105      	bne.n	8003086 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800307a:	4b08      	ldr	r3, [pc, #32]	; (800309c <osKernelInitialize+0x44>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003080:	2300      	movs	r3, #0
 8003082:	607b      	str	r3, [r7, #4]
 8003084:	e002      	b.n	800308c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800308c:	687b      	ldr	r3, [r7, #4]
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000634 	.word	0x20000634

080030a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030a6:	f3ef 8305 	mrs	r3, IPSR
 80030aa:	603b      	str	r3, [r7, #0]
  return(result);
 80030ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80030b2:	f06f 0305 	mvn.w	r3, #5
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	e010      	b.n	80030dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <osKernelStart+0x48>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d109      	bne.n	80030d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80030c2:	f7ff ffbf 	bl	8003044 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <osKernelStart+0x48>)
 80030c8:	2202      	movs	r2, #2
 80030ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80030cc:	f001 f9e0 	bl	8004490 <vTaskStartScheduler>
      stat = osOK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	607b      	str	r3, [r7, #4]
 80030d4:	e002      	b.n	80030dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80030d6:	f04f 33ff 	mov.w	r3, #4294967295
 80030da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030dc:	687b      	ldr	r3, [r7, #4]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000634 	.word	0x20000634

080030ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08e      	sub	sp, #56	; 0x38
 80030f0:	af04      	add	r7, sp, #16
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030fc:	f3ef 8305 	mrs	r3, IPSR
 8003100:	617b      	str	r3, [r7, #20]
  return(result);
 8003102:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003104:	2b00      	cmp	r3, #0
 8003106:	d17e      	bne.n	8003206 <osThreadNew+0x11a>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d07b      	beq.n	8003206 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003112:	2318      	movs	r3, #24
 8003114:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800311a:	f04f 33ff 	mov.w	r3, #4294967295
 800311e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d045      	beq.n	80031b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <osThreadNew+0x48>
        name = attr->name;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <osThreadNew+0x6e>
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b38      	cmp	r3, #56	; 0x38
 800314c:	d805      	bhi.n	800315a <osThreadNew+0x6e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <osThreadNew+0x72>
        return (NULL);
 800315a:	2300      	movs	r3, #0
 800315c:	e054      	b.n	8003208 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00e      	beq.n	8003194 <osThreadNew+0xa8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2b5b      	cmp	r3, #91	; 0x5b
 800317c:	d90a      	bls.n	8003194 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <osThreadNew+0xa8>
        mem = 1;
 800318e:	2301      	movs	r3, #1
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	e010      	b.n	80031b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10c      	bne.n	80031b6 <osThreadNew+0xca>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d108      	bne.n	80031b6 <osThreadNew+0xca>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <osThreadNew+0xca>
          mem = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	e001      	b.n	80031b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d110      	bne.n	80031de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031c4:	9202      	str	r2, [sp, #8]
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6a3a      	ldr	r2, [r7, #32]
 80031d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 ff86 	bl	80040e4 <xTaskCreateStatic>
 80031d8:	4603      	mov	r3, r0
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	e013      	b.n	8003206 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d110      	bne.n	8003206 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	f107 0310 	add.w	r3, r7, #16
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 ffd1 	bl	800419e <xTaskCreate>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d001      	beq.n	8003206 <osThreadNew+0x11a>
            hTask = NULL;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003206:	693b      	ldr	r3, [r7, #16]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3728      	adds	r7, #40	; 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003218:	f3ef 8305 	mrs	r3, IPSR
 800321c:	60bb      	str	r3, [r7, #8]
  return(result);
 800321e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <osDelay+0x1c>
    stat = osErrorISR;
 8003224:	f06f 0305 	mvn.w	r3, #5
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	e007      	b.n	800323c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f001 f8f6 	bl	8004428 <vTaskDelay>
    }
  }

  return (stat);
 800323c:	68fb      	ldr	r3, [r7, #12]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003246:	b580      	push	{r7, lr}
 8003248:	b08a      	sub	sp, #40	; 0x28
 800324a:	af02      	add	r7, sp, #8
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003256:	f3ef 8305 	mrs	r3, IPSR
 800325a:	613b      	str	r3, [r7, #16]
  return(result);
 800325c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800325e:	2b00      	cmp	r3, #0
 8003260:	d175      	bne.n	800334e <osSemaphoreNew+0x108>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d072      	beq.n	800334e <osSemaphoreNew+0x108>
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	429a      	cmp	r2, r3
 800326e:	d86e      	bhi.n	800334e <osSemaphoreNew+0x108>
    mem = -1;
 8003270:	f04f 33ff 	mov.w	r3, #4294967295
 8003274:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d015      	beq.n	80032a8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d006      	beq.n	8003292 <osSemaphoreNew+0x4c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b4f      	cmp	r3, #79	; 0x4f
 800328a:	d902      	bls.n	8003292 <osSemaphoreNew+0x4c>
        mem = 1;
 800328c:	2301      	movs	r3, #1
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	e00c      	b.n	80032ac <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d108      	bne.n	80032ac <osSemaphoreNew+0x66>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d104      	bne.n	80032ac <osSemaphoreNew+0x66>
          mem = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	e001      	b.n	80032ac <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d04c      	beq.n	800334e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d128      	bne.n	800330c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d10a      	bne.n	80032d6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2203      	movs	r2, #3
 80032c6:	9200      	str	r2, [sp, #0]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2100      	movs	r1, #0
 80032cc:	2001      	movs	r0, #1
 80032ce:	f000 f993 	bl	80035f8 <xQueueGenericCreateStatic>
 80032d2:	61f8      	str	r0, [r7, #28]
 80032d4:	e005      	b.n	80032e2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80032d6:	2203      	movs	r2, #3
 80032d8:	2100      	movs	r1, #0
 80032da:	2001      	movs	r0, #1
 80032dc:	f000 fa04 	bl	80036e8 <xQueueGenericCreate>
 80032e0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d022      	beq.n	800332e <osSemaphoreNew+0xe8>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01f      	beq.n	800332e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80032ee:	2300      	movs	r3, #0
 80032f0:	2200      	movs	r2, #0
 80032f2:	2100      	movs	r1, #0
 80032f4:	69f8      	ldr	r0, [r7, #28]
 80032f6:	f000 fabf 	bl	8003878 <xQueueGenericSend>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d016      	beq.n	800332e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003300:	69f8      	ldr	r0, [r7, #28]
 8003302:	f000 fd33 	bl	8003d6c <vQueueDelete>
            hSemaphore = NULL;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	e010      	b.n	800332e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d108      	bne.n	8003324 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	461a      	mov	r2, r3
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fa41 	bl	80037a2 <xQueueCreateCountingSemaphoreStatic>
 8003320:	61f8      	str	r0, [r7, #28]
 8003322:	e004      	b.n	800332e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 fa72 	bl	8003810 <xQueueCreateCountingSemaphore>
 800332c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00c      	beq.n	800334e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <osSemaphoreNew+0xfc>
          name = attr->name;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	e001      	b.n	8003346 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003346:	6979      	ldr	r1, [r7, #20]
 8003348:	69f8      	ldr	r0, [r7, #28]
 800334a:	f000 fe43 	bl	8003fd4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800334e:	69fb      	ldr	r3, [r7, #28]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4a07      	ldr	r2, [pc, #28]	; (8003384 <vApplicationGetIdleTaskMemory+0x2c>)
 8003368:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	4a06      	ldr	r2, [pc, #24]	; (8003388 <vApplicationGetIdleTaskMemory+0x30>)
 800336e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	601a      	str	r2, [r3, #0]
}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20000638 	.word	0x20000638
 8003388:	20000694 	.word	0x20000694

0800338c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800339c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4a06      	ldr	r2, [pc, #24]	; (80033bc <vApplicationGetTimerTaskMemory+0x30>)
 80033a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033aa:	601a      	str	r2, [r3, #0]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	20000894 	.word	0x20000894
 80033bc:	200008f0 	.word	0x200008f0

080033c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f103 0208 	add.w	r2, r3, #8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f04f 32ff 	mov.w	r2, #4294967295
 80033d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f103 0208 	add.w	r2, r3, #8
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f103 0208 	add.w	r2, r3, #8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	601a      	str	r2, [r3, #0]
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003462:	b480      	push	{r7}
 8003464:	b085      	sub	sp, #20
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003478:	d103      	bne.n	8003482 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	e00c      	b.n	800349c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3308      	adds	r3, #8
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e002      	b.n	8003490 <vListInsert+0x2e>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	429a      	cmp	r2, r3
 800349a:	d2f6      	bcs.n	800348a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	601a      	str	r2, [r3, #0]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6892      	ldr	r2, [r2, #8]
 80034ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6852      	ldr	r2, [r2, #4]
 80034f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d103      	bne.n	8003508 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003552:	f002 f93f 	bl	80057d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	68f9      	ldr	r1, [r7, #12]
 8003560:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	441a      	add	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	3b01      	subs	r3, #1
 8003584:	68f9      	ldr	r1, [r7, #12]
 8003586:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	441a      	add	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	22ff      	movs	r2, #255	; 0xff
 8003596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	22ff      	movs	r2, #255	; 0xff
 800359e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d114      	bne.n	80035d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01a      	beq.n	80035e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3310      	adds	r3, #16
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 f9f5 	bl	80049a4 <xTaskRemoveFromEventList>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d012      	beq.n	80035e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <xQueueGenericReset+0xcc>)
 80035c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	e009      	b.n	80035e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	3310      	adds	r3, #16
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff fef2 	bl	80033c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3324      	adds	r3, #36	; 0x24
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff feed 	bl	80033c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035e6:	f002 f925 	bl	8005834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035ea:	2301      	movs	r3, #1
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	e000ed04 	.word	0xe000ed04

080035f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08e      	sub	sp, #56	; 0x38
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800361e:	bf00      	nop
 8003620:	e7fe      	b.n	8003620 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
}
 800363a:	bf00      	nop
 800363c:	e7fe      	b.n	800363c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <xQueueGenericCreateStatic+0x52>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <xQueueGenericCreateStatic+0x56>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <xQueueGenericCreateStatic+0x58>
 800364e:	2300      	movs	r3, #0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	623b      	str	r3, [r7, #32]
}
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <xQueueGenericCreateStatic+0x7e>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <xQueueGenericCreateStatic+0x82>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <xQueueGenericCreateStatic+0x84>
 800367a:	2300      	movs	r3, #0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	61fb      	str	r3, [r7, #28]
}
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003696:	2350      	movs	r3, #80	; 0x50
 8003698:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b50      	cmp	r3, #80	; 0x50
 800369e:	d00a      	beq.n	80036b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	61bb      	str	r3, [r7, #24]
}
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80036b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00d      	beq.n	80036de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f83f 	bl	800375c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3730      	adds	r7, #48	; 0x30
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	; 0x28
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	4613      	mov	r3, r2
 80036f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <xQueueGenericCreate+0x2a>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	613b      	str	r3, [r7, #16]
}
 800370e:	bf00      	nop
 8003710:	e7fe      	b.n	8003710 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	3350      	adds	r3, #80	; 0x50
 8003720:	4618      	mov	r0, r3
 8003722:	f002 f979 	bl	8005a18 <pvPortMalloc>
 8003726:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d011      	beq.n	8003752 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	3350      	adds	r3, #80	; 0x50
 8003736:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003740:	79fa      	ldrb	r2, [r7, #7]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f805 	bl	800375c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003752:	69bb      	ldr	r3, [r7, #24]
	}
 8003754:	4618      	mov	r0, r3
 8003756:	3720      	adds	r7, #32
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d103      	bne.n	8003778 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	e002      	b.n	800377e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800378a:	2101      	movs	r1, #1
 800378c:	69b8      	ldr	r0, [r7, #24]
 800378e:	f7ff fecb 	bl	8003528 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b08a      	sub	sp, #40	; 0x28
 80037a6:	af02      	add	r7, sp, #8
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	61bb      	str	r3, [r7, #24]
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d90a      	bls.n	80037e8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	617b      	str	r3, [r7, #20]
}
 80037e4:	bf00      	nop
 80037e6:	e7fe      	b.n	80037e6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80037e8:	2302      	movs	r3, #2
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	2100      	movs	r1, #0
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7ff ff00 	bl	80035f8 <xQueueGenericCreateStatic>
 80037f8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003806:	69fb      	ldr	r3, [r7, #28]
	}
 8003808:	4618      	mov	r0, r3
 800380a:	3720      	adds	r7, #32
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10a      	bne.n	8003836 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	613b      	str	r3, [r7, #16]
}
 8003832:	bf00      	nop
 8003834:	e7fe      	b.n	8003834 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	d90a      	bls.n	8003854 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	60fb      	str	r3, [r7, #12]
}
 8003850:	bf00      	nop
 8003852:	e7fe      	b.n	8003852 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003854:	2202      	movs	r2, #2
 8003856:	2100      	movs	r1, #0
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff ff45 	bl	80036e8 <xQueueGenericCreate>
 800385e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800386c:	697b      	ldr	r3, [r7, #20]
	}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08e      	sub	sp, #56	; 0x38
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003886:	2300      	movs	r3, #0
 8003888:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <xQueueGenericSend+0x32>
	__asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038a6:	bf00      	nop
 80038a8:	e7fe      	b.n	80038a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d103      	bne.n	80038b8 <xQueueGenericSend+0x40>
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <xQueueGenericSend+0x44>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <xQueueGenericSend+0x46>
 80038bc:	2300      	movs	r3, #0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <xQueueGenericSend+0x60>
	__asm volatile
 80038c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038d4:	bf00      	nop
 80038d6:	e7fe      	b.n	80038d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d103      	bne.n	80038e6 <xQueueGenericSend+0x6e>
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <xQueueGenericSend+0x72>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <xQueueGenericSend+0x74>
 80038ea:	2300      	movs	r3, #0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <xQueueGenericSend+0x8e>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	623b      	str	r3, [r7, #32]
}
 8003902:	bf00      	nop
 8003904:	e7fe      	b.n	8003904 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003906:	f001 fa0b 	bl	8004d20 <xTaskGetSchedulerState>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <xQueueGenericSend+0x9e>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <xQueueGenericSend+0xa2>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <xQueueGenericSend+0xa4>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10a      	bne.n	8003936 <xQueueGenericSend+0xbe>
	__asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	61fb      	str	r3, [r7, #28]
}
 8003932:	bf00      	nop
 8003934:	e7fe      	b.n	8003934 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003936:	f001 ff4d 	bl	80057d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <xQueueGenericSend+0xd4>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d129      	bne.n	80039a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003952:	f000 fa2e 	bl	8003db2 <prvCopyDataToQueue>
 8003956:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	2b00      	cmp	r3, #0
 800395e:	d010      	beq.n	8003982 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	3324      	adds	r3, #36	; 0x24
 8003964:	4618      	mov	r0, r3
 8003966:	f001 f81d 	bl	80049a4 <xTaskRemoveFromEventList>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d013      	beq.n	8003998 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003970:	4b3f      	ldr	r3, [pc, #252]	; (8003a70 <xQueueGenericSend+0x1f8>)
 8003972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	e00a      	b.n	8003998 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003988:	4b39      	ldr	r3, [pc, #228]	; (8003a70 <xQueueGenericSend+0x1f8>)
 800398a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003998:	f001 ff4c 	bl	8005834 <vPortExitCritical>
				return pdPASS;
 800399c:	2301      	movs	r3, #1
 800399e:	e063      	b.n	8003a68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d103      	bne.n	80039ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039a6:	f001 ff45 	bl	8005834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e05c      	b.n	8003a68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039b4:	f107 0314 	add.w	r3, r7, #20
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 f857 	bl	8004a6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039be:	2301      	movs	r3, #1
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039c2:	f001 ff37 	bl	8005834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039c6:	f000 fdc9 	bl	800455c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039ca:	f001 ff03 	bl	80057d4 <vPortEnterCritical>
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039d4:	b25b      	sxtb	r3, r3
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039da:	d103      	bne.n	80039e4 <xQueueGenericSend+0x16c>
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ea:	b25b      	sxtb	r3, r3
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d103      	bne.n	80039fa <xQueueGenericSend+0x182>
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039fa:	f001 ff1b 	bl	8005834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039fe:	1d3a      	adds	r2, r7, #4
 8003a00:	f107 0314 	add.w	r3, r7, #20
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 f846 	bl	8004a98 <xTaskCheckForTimeOut>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d124      	bne.n	8003a5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a14:	f000 fac5 	bl	8003fa2 <prvIsQueueFull>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d018      	beq.n	8003a50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	3310      	adds	r3, #16
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 ff6c 	bl	8004904 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a2e:	f000 fa50 	bl	8003ed2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a32:	f000 fda1 	bl	8004578 <xTaskResumeAll>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f47f af7c 	bne.w	8003936 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a3e:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <xQueueGenericSend+0x1f8>)
 8003a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	e772      	b.n	8003936 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a52:	f000 fa3e 	bl	8003ed2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a56:	f000 fd8f 	bl	8004578 <xTaskResumeAll>
 8003a5a:	e76c      	b.n	8003936 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a5e:	f000 fa38 	bl	8003ed2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a62:	f000 fd89 	bl	8004578 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3738      	adds	r7, #56	; 0x38
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	e000ed04 	.word	0xe000ed04

08003a74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b090      	sub	sp, #64	; 0x40
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d103      	bne.n	8003ab0 <xQueueGenericSendFromISR+0x3c>
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <xQueueGenericSendFromISR+0x40>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <xQueueGenericSendFromISR+0x42>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003acc:	bf00      	nop
 8003ace:	e7fe      	b.n	8003ace <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d103      	bne.n	8003ade <xQueueGenericSendFromISR+0x6a>
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <xQueueGenericSendFromISR+0x6e>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <xQueueGenericSendFromISR+0x70>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	623b      	str	r3, [r7, #32]
}
 8003afa:	bf00      	nop
 8003afc:	e7fe      	b.n	8003afc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003afe:	f001 ff4b 	bl	8005998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b02:	f3ef 8211 	mrs	r2, BASEPRI
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	61fa      	str	r2, [r7, #28]
 8003b18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d302      	bcc.n	8003b30 <xQueueGenericSendFromISR+0xbc>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d12f      	bne.n	8003b90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b46:	f000 f934 	bl	8003db2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d112      	bne.n	8003b7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d016      	beq.n	8003b8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5e:	3324      	adds	r3, #36	; 0x24
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 ff1f 	bl	80049a4 <xTaskRemoveFromEventList>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00e      	beq.n	8003b8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	e007      	b.n	8003b8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b7e:	3301      	adds	r3, #1
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	b25a      	sxtb	r2, r3
 8003b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003b8e:	e001      	b.n	8003b94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3740      	adds	r7, #64	; 0x40
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	; 0x30
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10a      	bne.n	8003bdc <xQueueReceive+0x30>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	623b      	str	r3, [r7, #32]
}
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d103      	bne.n	8003bea <xQueueReceive+0x3e>
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <xQueueReceive+0x42>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <xQueueReceive+0x44>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <xQueueReceive+0x5e>
	__asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	61fb      	str	r3, [r7, #28]
}
 8003c06:	bf00      	nop
 8003c08:	e7fe      	b.n	8003c08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c0a:	f001 f889 	bl	8004d20 <xTaskGetSchedulerState>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <xQueueReceive+0x6e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <xQueueReceive+0x72>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <xQueueReceive+0x74>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <xQueueReceive+0x8e>
	__asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	61bb      	str	r3, [r7, #24]
}
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c3a:	f001 fdcb 	bl	80057d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01f      	beq.n	8003c8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c4e:	f000 f91a 	bl	8003e86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	1e5a      	subs	r2, r3, #1
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00f      	beq.n	8003c82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	3310      	adds	r3, #16
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fe9c 	bl	80049a4 <xTaskRemoveFromEventList>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c72:	4b3d      	ldr	r3, [pc, #244]	; (8003d68 <xQueueReceive+0x1bc>)
 8003c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c82:	f001 fdd7 	bl	8005834 <vPortExitCritical>
				return pdPASS;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e069      	b.n	8003d5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c90:	f001 fdd0 	bl	8005834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e062      	b.n	8003d5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c9e:	f107 0310 	add.w	r3, r7, #16
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fee2 	bl	8004a6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cac:	f001 fdc2 	bl	8005834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cb0:	f000 fc54 	bl	800455c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cb4:	f001 fd8e 	bl	80057d4 <vPortEnterCritical>
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cbe:	b25b      	sxtb	r3, r3
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d103      	bne.n	8003cce <xQueueReceive+0x122>
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cd4:	b25b      	sxtb	r3, r3
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cda:	d103      	bne.n	8003ce4 <xQueueReceive+0x138>
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce4:	f001 fda6 	bl	8005834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ce8:	1d3a      	adds	r2, r7, #4
 8003cea:	f107 0310 	add.w	r3, r7, #16
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fed1 	bl	8004a98 <xTaskCheckForTimeOut>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d123      	bne.n	8003d44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cfe:	f000 f93a 	bl	8003f76 <prvIsQueueEmpty>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d017      	beq.n	8003d38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	3324      	adds	r3, #36	; 0x24
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fdf7 	bl	8004904 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d18:	f000 f8db 	bl	8003ed2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d1c:	f000 fc2c 	bl	8004578 <xTaskResumeAll>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d189      	bne.n	8003c3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <xQueueReceive+0x1bc>)
 8003d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	e780      	b.n	8003c3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3a:	f000 f8ca 	bl	8003ed2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d3e:	f000 fc1b 	bl	8004578 <xTaskResumeAll>
 8003d42:	e77a      	b.n	8003c3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d46:	f000 f8c4 	bl	8003ed2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d4a:	f000 fc15 	bl	8004578 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d50:	f000 f911 	bl	8003f76 <prvIsQueueEmpty>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f43f af6f 	beq.w	8003c3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3730      	adds	r7, #48	; 0x30
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	e000ed04 	.word	0xe000ed04

08003d6c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <vQueueDelete+0x28>
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	60bb      	str	r3, [r7, #8]
}
 8003d90:	bf00      	nop
 8003d92:	e7fe      	b.n	8003d92 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f947 	bl	8004028 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d102      	bne.n	8003daa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f001 ff03 	bl	8005bb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b086      	sub	sp, #24
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10d      	bne.n	8003dec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d14d      	bne.n	8003e74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 ffbd 	bl	8004d5c <xTaskPriorityDisinherit>
 8003de2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	e043      	b.n	8003e74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d119      	bne.n	8003e26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6858      	ldr	r0, [r3, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	f003 f850 	bl	8006ea2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	441a      	add	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d32b      	bcc.n	8003e74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	605a      	str	r2, [r3, #4]
 8003e24:	e026      	b.n	8003e74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	68d8      	ldr	r0, [r3, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	f003 f836 	bl	8006ea2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	425b      	negs	r3, r3
 8003e40:	441a      	add	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d207      	bcs.n	8003e62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	425b      	negs	r3, r3
 8003e5c:	441a      	add	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d105      	bne.n	8003e74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e7c:	697b      	ldr	r3, [r7, #20]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d018      	beq.n	8003eca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	441a      	add	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d303      	bcc.n	8003eba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68d9      	ldr	r1, [r3, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6838      	ldr	r0, [r7, #0]
 8003ec6:	f002 ffec 	bl	8006ea2 <memcpy>
	}
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003eda:	f001 fc7b 	bl	80057d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ee4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ee6:	e011      	b.n	8003f0c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d012      	beq.n	8003f16 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3324      	adds	r3, #36	; 0x24
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fd55 	bl	80049a4 <xTaskRemoveFromEventList>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f00:	f000 fe2c 	bl	8004b5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	dce9      	bgt.n	8003ee8 <prvUnlockQueue+0x16>
 8003f14:	e000      	b.n	8003f18 <prvUnlockQueue+0x46>
					break;
 8003f16:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	22ff      	movs	r2, #255	; 0xff
 8003f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f20:	f001 fc88 	bl	8005834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f24:	f001 fc56 	bl	80057d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f2e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f30:	e011      	b.n	8003f56 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d012      	beq.n	8003f60 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3310      	adds	r3, #16
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fd30 	bl	80049a4 <xTaskRemoveFromEventList>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f4a:	f000 fe07 	bl	8004b5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f4e:	7bbb      	ldrb	r3, [r7, #14]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	dce9      	bgt.n	8003f32 <prvUnlockQueue+0x60>
 8003f5e:	e000      	b.n	8003f62 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f60:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	22ff      	movs	r2, #255	; 0xff
 8003f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f6a:	f001 fc63 	bl	8005834 <vPortExitCritical>
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f7e:	f001 fc29 	bl	80057d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e001      	b.n	8003f94 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f94:	f001 fc4e 	bl	8005834 <vPortExitCritical>

	return xReturn;
 8003f98:	68fb      	ldr	r3, [r7, #12]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003faa:	f001 fc13 	bl	80057d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d102      	bne.n	8003fc0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	e001      	b.n	8003fc4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fc4:	f001 fc36 	bl	8005834 <vPortExitCritical>

	return xReturn;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e014      	b.n	800400e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fe4:	4a0f      	ldr	r2, [pc, #60]	; (8004024 <vQueueAddToRegistry+0x50>)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10b      	bne.n	8004008 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ff0:	490c      	ldr	r1, [pc, #48]	; (8004024 <vQueueAddToRegistry+0x50>)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	; (8004024 <vQueueAddToRegistry+0x50>)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004006:	e006      	b.n	8004016 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3301      	adds	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b07      	cmp	r3, #7
 8004012:	d9e7      	bls.n	8003fe4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	20000cf0 	.word	0x20000cf0

08004028 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e016      	b.n	8004064 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004036:	4a10      	ldr	r2, [pc, #64]	; (8004078 <vQueueUnregisterQueue+0x50>)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	429a      	cmp	r2, r3
 8004044:	d10b      	bne.n	800405e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004046:	4a0c      	ldr	r2, [pc, #48]	; (8004078 <vQueueUnregisterQueue+0x50>)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2100      	movs	r1, #0
 800404c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004050:	4a09      	ldr	r2, [pc, #36]	; (8004078 <vQueueUnregisterQueue+0x50>)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	2200      	movs	r2, #0
 800405a:	605a      	str	r2, [r3, #4]
				break;
 800405c:	e006      	b.n	800406c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3301      	adds	r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b07      	cmp	r3, #7
 8004068:	d9e5      	bls.n	8004036 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800406a:	bf00      	nop
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	20000cf0 	.word	0x20000cf0

0800407c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800408c:	f001 fba2 	bl	80057d4 <vPortEnterCritical>
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004096:	b25b      	sxtb	r3, r3
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d103      	bne.n	80040a6 <vQueueWaitForMessageRestricted+0x2a>
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ac:	b25b      	sxtb	r3, r3
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d103      	bne.n	80040bc <vQueueWaitForMessageRestricted+0x40>
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040bc:	f001 fbba 	bl	8005834 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3324      	adds	r3, #36	; 0x24
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fc3b 	bl	800494c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040d6:	6978      	ldr	r0, [r7, #20]
 80040d8:	f7ff fefb 	bl	8003ed2 <prvUnlockQueue>
	}
 80040dc:	bf00      	nop
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08e      	sub	sp, #56	; 0x38
 80040e8:	af04      	add	r7, sp, #16
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <xTaskCreateStatic+0x2a>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	623b      	str	r3, [r7, #32]
}
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <xTaskCreateStatic+0x46>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	61fb      	str	r3, [r7, #28]
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800412a:	235c      	movs	r3, #92	; 0x5c
 800412c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b5c      	cmp	r3, #92	; 0x5c
 8004132:	d00a      	beq.n	800414a <xTaskCreateStatic+0x66>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	61bb      	str	r3, [r7, #24]
}
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800414a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01e      	beq.n	8004190 <xTaskCreateStatic+0xac>
 8004152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01b      	beq.n	8004190 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004160:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	2202      	movs	r2, #2
 8004166:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800416a:	2300      	movs	r3, #0
 800416c:	9303      	str	r3, [sp, #12]
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	9302      	str	r3, [sp, #8]
 8004172:	f107 0314 	add.w	r3, r7, #20
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f850 	bl	8004228 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800418a:	f000 f8dd 	bl	8004348 <prvAddNewTaskToReadyList>
 800418e:	e001      	b.n	8004194 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004194:	697b      	ldr	r3, [r7, #20]
	}
 8004196:	4618      	mov	r0, r3
 8004198:	3728      	adds	r7, #40	; 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b08c      	sub	sp, #48	; 0x30
 80041a2:	af04      	add	r7, sp, #16
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	4613      	mov	r3, r2
 80041ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 fc30 	bl	8005a18 <pvPortMalloc>
 80041b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00e      	beq.n	80041de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041c0:	205c      	movs	r0, #92	; 0x5c
 80041c2:	f001 fc29 	bl	8005a18 <pvPortMalloc>
 80041c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
 80041d4:	e005      	b.n	80041e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041d6:	6978      	ldr	r0, [r7, #20]
 80041d8:	f001 fcea 	bl	8005bb0 <vPortFree>
 80041dc:	e001      	b.n	80041e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d017      	beq.n	8004218 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041f0:	88fa      	ldrh	r2, [r7, #6]
 80041f2:	2300      	movs	r3, #0
 80041f4:	9303      	str	r3, [sp, #12]
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	9302      	str	r3, [sp, #8]
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f80e 	bl	8004228 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800420c:	69f8      	ldr	r0, [r7, #28]
 800420e:	f000 f89b 	bl	8004348 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004212:	2301      	movs	r3, #1
 8004214:	61bb      	str	r3, [r7, #24]
 8004216:	e002      	b.n	800421e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004218:	f04f 33ff 	mov.w	r3, #4294967295
 800421c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800421e:	69bb      	ldr	r3, [r7, #24]
	}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	461a      	mov	r2, r3
 8004240:	21a5      	movs	r1, #165	; 0xa5
 8004242:	f002 fd9c 	bl	8006d7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004250:	3b01      	subs	r3, #1
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	f023 0307 	bic.w	r3, r3, #7
 800425e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <prvInitialiseNewTask+0x58>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	617b      	str	r3, [r7, #20]
}
 800427c:	bf00      	nop
 800427e:	e7fe      	b.n	800427e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d01f      	beq.n	80042c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	e012      	b.n	80042b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	7819      	ldrb	r1, [r3, #0]
 8004294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	3334      	adds	r3, #52	; 0x34
 800429c:	460a      	mov	r2, r1
 800429e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d006      	beq.n	80042ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	3301      	adds	r3, #1
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	2b0f      	cmp	r3, #15
 80042b6:	d9e9      	bls.n	800428c <prvInitialiseNewTask+0x64>
 80042b8:	e000      	b.n	80042bc <prvInitialiseNewTask+0x94>
			{
				break;
 80042ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042c4:	e003      	b.n	80042ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	2b37      	cmp	r3, #55	; 0x37
 80042d2:	d901      	bls.n	80042d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042d4:	2337      	movs	r3, #55	; 0x37
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	2200      	movs	r2, #0
 80042e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	3304      	adds	r3, #4
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff f886 	bl	8003400 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	3318      	adds	r3, #24
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff f881 	bl	8003400 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004302:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004306:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004312:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	2200      	movs	r2, #0
 8004318:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	68f9      	ldr	r1, [r7, #12]
 8004326:	69b8      	ldr	r0, [r7, #24]
 8004328:	f001 f928 	bl	800557c <pxPortInitialiseStack>
 800432c:	4602      	mov	r2, r0
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800433e:	bf00      	nop
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004350:	f001 fa40 	bl	80057d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004354:	4b2d      	ldr	r3, [pc, #180]	; (800440c <prvAddNewTaskToReadyList+0xc4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3301      	adds	r3, #1
 800435a:	4a2c      	ldr	r2, [pc, #176]	; (800440c <prvAddNewTaskToReadyList+0xc4>)
 800435c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800435e:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <prvAddNewTaskToReadyList+0xc8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004366:	4a2a      	ldr	r2, [pc, #168]	; (8004410 <prvAddNewTaskToReadyList+0xc8>)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800436c:	4b27      	ldr	r3, [pc, #156]	; (800440c <prvAddNewTaskToReadyList+0xc4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d110      	bne.n	8004396 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004374:	f000 fc16 	bl	8004ba4 <prvInitialiseTaskLists>
 8004378:	e00d      	b.n	8004396 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <prvAddNewTaskToReadyList+0xcc>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004382:	4b23      	ldr	r3, [pc, #140]	; (8004410 <prvAddNewTaskToReadyList+0xc8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	429a      	cmp	r2, r3
 800438e:	d802      	bhi.n	8004396 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004390:	4a1f      	ldr	r2, [pc, #124]	; (8004410 <prvAddNewTaskToReadyList+0xc8>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004396:	4b20      	ldr	r3, [pc, #128]	; (8004418 <prvAddNewTaskToReadyList+0xd0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3301      	adds	r3, #1
 800439c:	4a1e      	ldr	r2, [pc, #120]	; (8004418 <prvAddNewTaskToReadyList+0xd0>)
 800439e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043a0:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <prvAddNewTaskToReadyList+0xd0>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	4b1b      	ldr	r3, [pc, #108]	; (800441c <prvAddNewTaskToReadyList+0xd4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d903      	bls.n	80043bc <prvAddNewTaskToReadyList+0x74>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	4a18      	ldr	r2, [pc, #96]	; (800441c <prvAddNewTaskToReadyList+0xd4>)
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4a15      	ldr	r2, [pc, #84]	; (8004420 <prvAddNewTaskToReadyList+0xd8>)
 80043ca:	441a      	add	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f7ff f821 	bl	800341a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043d8:	f001 fa2c 	bl	8005834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043dc:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <prvAddNewTaskToReadyList+0xcc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00e      	beq.n	8004402 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <prvAddNewTaskToReadyList+0xc8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d207      	bcs.n	8004402 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043f2:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <prvAddNewTaskToReadyList+0xdc>)
 80043f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20001204 	.word	0x20001204
 8004410:	20000d30 	.word	0x20000d30
 8004414:	20001210 	.word	0x20001210
 8004418:	20001220 	.word	0x20001220
 800441c:	2000120c 	.word	0x2000120c
 8004420:	20000d34 	.word	0x20000d34
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d017      	beq.n	800446a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <vTaskDelay+0x60>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <vTaskDelay+0x30>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	60bb      	str	r3, [r7, #8]
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004458:	f000 f880 	bl	800455c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800445c:	2100      	movs	r1, #0
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fcea 	bl	8004e38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004464:	f000 f888 	bl	8004578 <xTaskResumeAll>
 8004468:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d107      	bne.n	8004480 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <vTaskDelay+0x64>)
 8004472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	2000122c 	.word	0x2000122c
 800448c:	e000ed04 	.word	0xe000ed04

08004490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800449e:	463a      	mov	r2, r7
 80044a0:	1d39      	adds	r1, r7, #4
 80044a2:	f107 0308 	add.w	r3, r7, #8
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fe ff56 	bl	8003358 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044ac:	6839      	ldr	r1, [r7, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	9202      	str	r2, [sp, #8]
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	2300      	movs	r3, #0
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2300      	movs	r3, #0
 80044bc:	460a      	mov	r2, r1
 80044be:	4921      	ldr	r1, [pc, #132]	; (8004544 <vTaskStartScheduler+0xb4>)
 80044c0:	4821      	ldr	r0, [pc, #132]	; (8004548 <vTaskStartScheduler+0xb8>)
 80044c2:	f7ff fe0f 	bl	80040e4 <xTaskCreateStatic>
 80044c6:	4603      	mov	r3, r0
 80044c8:	4a20      	ldr	r2, [pc, #128]	; (800454c <vTaskStartScheduler+0xbc>)
 80044ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044cc:	4b1f      	ldr	r3, [pc, #124]	; (800454c <vTaskStartScheduler+0xbc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044d4:	2301      	movs	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	e001      	b.n	80044de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d102      	bne.n	80044ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044e4:	f000 fcfc 	bl	8004ee0 <xTimerCreateTimerTask>
 80044e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d116      	bne.n	800451e <vTaskStartScheduler+0x8e>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	613b      	str	r3, [r7, #16]
}
 8004502:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004504:	4b12      	ldr	r3, [pc, #72]	; (8004550 <vTaskStartScheduler+0xc0>)
 8004506:	f04f 32ff 	mov.w	r2, #4294967295
 800450a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800450c:	4b11      	ldr	r3, [pc, #68]	; (8004554 <vTaskStartScheduler+0xc4>)
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004512:	4b11      	ldr	r3, [pc, #68]	; (8004558 <vTaskStartScheduler+0xc8>)
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004518:	f001 f8ba 	bl	8005690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800451c:	e00e      	b.n	800453c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d10a      	bne.n	800453c <vTaskStartScheduler+0xac>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	60fb      	str	r3, [r7, #12]
}
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <vTaskStartScheduler+0xaa>
}
 800453c:	bf00      	nop
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	0800af08 	.word	0x0800af08
 8004548:	08004b75 	.word	0x08004b75
 800454c:	20001228 	.word	0x20001228
 8004550:	20001224 	.word	0x20001224
 8004554:	20001210 	.word	0x20001210
 8004558:	20001208 	.word	0x20001208

0800455c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004560:	4b04      	ldr	r3, [pc, #16]	; (8004574 <vTaskSuspendAll+0x18>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	4a03      	ldr	r2, [pc, #12]	; (8004574 <vTaskSuspendAll+0x18>)
 8004568:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800456a:	bf00      	nop
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	2000122c 	.word	0x2000122c

08004578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004586:	4b42      	ldr	r3, [pc, #264]	; (8004690 <xTaskResumeAll+0x118>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	603b      	str	r3, [r7, #0]
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045a4:	f001 f916 	bl	80057d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045a8:	4b39      	ldr	r3, [pc, #228]	; (8004690 <xTaskResumeAll+0x118>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	4a38      	ldr	r2, [pc, #224]	; (8004690 <xTaskResumeAll+0x118>)
 80045b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b2:	4b37      	ldr	r3, [pc, #220]	; (8004690 <xTaskResumeAll+0x118>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d162      	bne.n	8004680 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045ba:	4b36      	ldr	r3, [pc, #216]	; (8004694 <xTaskResumeAll+0x11c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d05e      	beq.n	8004680 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045c2:	e02f      	b.n	8004624 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c4:	4b34      	ldr	r3, [pc, #208]	; (8004698 <xTaskResumeAll+0x120>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3318      	adds	r3, #24
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe ff7f 	bl	80034d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3304      	adds	r3, #4
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe ff7a 	bl	80034d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e4:	4b2d      	ldr	r3, [pc, #180]	; (800469c <xTaskResumeAll+0x124>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d903      	bls.n	80045f4 <xTaskResumeAll+0x7c>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	4a2a      	ldr	r2, [pc, #168]	; (800469c <xTaskResumeAll+0x124>)
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <xTaskResumeAll+0x128>)
 8004602:	441a      	add	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3304      	adds	r3, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f7fe ff05 	bl	800341a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004614:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <xTaskResumeAll+0x12c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	429a      	cmp	r2, r3
 800461c:	d302      	bcc.n	8004624 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800461e:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <xTaskResumeAll+0x130>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004624:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <xTaskResumeAll+0x120>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1cb      	bne.n	80045c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004632:	f000 fb55 	bl	8004ce0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004636:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <xTaskResumeAll+0x134>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d010      	beq.n	8004664 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004642:	f000 f847 	bl	80046d4 <xTaskIncrementTick>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800464c:	4b16      	ldr	r3, [pc, #88]	; (80046a8 <xTaskResumeAll+0x130>)
 800464e:	2201      	movs	r2, #1
 8004650:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3b01      	subs	r3, #1
 8004656:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f1      	bne.n	8004642 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800465e:	4b13      	ldr	r3, [pc, #76]	; (80046ac <xTaskResumeAll+0x134>)
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004664:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <xTaskResumeAll+0x130>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800466c:	2301      	movs	r3, #1
 800466e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004670:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <xTaskResumeAll+0x138>)
 8004672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004680:	f001 f8d8 	bl	8005834 <vPortExitCritical>

	return xAlreadyYielded;
 8004684:	68bb      	ldr	r3, [r7, #8]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	2000122c 	.word	0x2000122c
 8004694:	20001204 	.word	0x20001204
 8004698:	200011c4 	.word	0x200011c4
 800469c:	2000120c 	.word	0x2000120c
 80046a0:	20000d34 	.word	0x20000d34
 80046a4:	20000d30 	.word	0x20000d30
 80046a8:	20001218 	.word	0x20001218
 80046ac:	20001214 	.word	0x20001214
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <xTaskGetTickCount+0x1c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046c0:	687b      	ldr	r3, [r7, #4]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20001208 	.word	0x20001208

080046d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046de:	4b4f      	ldr	r3, [pc, #316]	; (800481c <xTaskIncrementTick+0x148>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f040 808f 	bne.w	8004806 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046e8:	4b4d      	ldr	r3, [pc, #308]	; (8004820 <xTaskIncrementTick+0x14c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3301      	adds	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046f0:	4a4b      	ldr	r2, [pc, #300]	; (8004820 <xTaskIncrementTick+0x14c>)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d120      	bne.n	800473e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80046fc:	4b49      	ldr	r3, [pc, #292]	; (8004824 <xTaskIncrementTick+0x150>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <xTaskIncrementTick+0x48>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	603b      	str	r3, [r7, #0]
}
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <xTaskIncrementTick+0x46>
 800471c:	4b41      	ldr	r3, [pc, #260]	; (8004824 <xTaskIncrementTick+0x150>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	4b41      	ldr	r3, [pc, #260]	; (8004828 <xTaskIncrementTick+0x154>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a3f      	ldr	r2, [pc, #252]	; (8004824 <xTaskIncrementTick+0x150>)
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	4a3f      	ldr	r2, [pc, #252]	; (8004828 <xTaskIncrementTick+0x154>)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	4b3e      	ldr	r3, [pc, #248]	; (800482c <xTaskIncrementTick+0x158>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3301      	adds	r3, #1
 8004736:	4a3d      	ldr	r2, [pc, #244]	; (800482c <xTaskIncrementTick+0x158>)
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	f000 fad1 	bl	8004ce0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800473e:	4b3c      	ldr	r3, [pc, #240]	; (8004830 <xTaskIncrementTick+0x15c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	429a      	cmp	r2, r3
 8004746:	d349      	bcc.n	80047dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004748:	4b36      	ldr	r3, [pc, #216]	; (8004824 <xTaskIncrementTick+0x150>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d104      	bne.n	800475c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004752:	4b37      	ldr	r3, [pc, #220]	; (8004830 <xTaskIncrementTick+0x15c>)
 8004754:	f04f 32ff 	mov.w	r2, #4294967295
 8004758:	601a      	str	r2, [r3, #0]
					break;
 800475a:	e03f      	b.n	80047dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800475c:	4b31      	ldr	r3, [pc, #196]	; (8004824 <xTaskIncrementTick+0x150>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	429a      	cmp	r2, r3
 8004772:	d203      	bcs.n	800477c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004774:	4a2e      	ldr	r2, [pc, #184]	; (8004830 <xTaskIncrementTick+0x15c>)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800477a:	e02f      	b.n	80047dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	3304      	adds	r3, #4
 8004780:	4618      	mov	r0, r3
 8004782:	f7fe fea7 	bl	80034d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	2b00      	cmp	r3, #0
 800478c:	d004      	beq.n	8004798 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	3318      	adds	r3, #24
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe fe9e 	bl	80034d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479c:	4b25      	ldr	r3, [pc, #148]	; (8004834 <xTaskIncrementTick+0x160>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d903      	bls.n	80047ac <xTaskIncrementTick+0xd8>
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	4a22      	ldr	r2, [pc, #136]	; (8004834 <xTaskIncrementTick+0x160>)
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4a1f      	ldr	r2, [pc, #124]	; (8004838 <xTaskIncrementTick+0x164>)
 80047ba:	441a      	add	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	3304      	adds	r3, #4
 80047c0:	4619      	mov	r1, r3
 80047c2:	4610      	mov	r0, r2
 80047c4:	f7fe fe29 	bl	800341a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047cc:	4b1b      	ldr	r3, [pc, #108]	; (800483c <xTaskIncrementTick+0x168>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d3b8      	bcc.n	8004748 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047d6:	2301      	movs	r3, #1
 80047d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047da:	e7b5      	b.n	8004748 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047dc:	4b17      	ldr	r3, [pc, #92]	; (800483c <xTaskIncrementTick+0x168>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e2:	4915      	ldr	r1, [pc, #84]	; (8004838 <xTaskIncrementTick+0x164>)
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d901      	bls.n	80047f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047f8:	4b11      	ldr	r3, [pc, #68]	; (8004840 <xTaskIncrementTick+0x16c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d007      	beq.n	8004810 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004800:	2301      	movs	r3, #1
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	e004      	b.n	8004810 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004806:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <xTaskIncrementTick+0x170>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3301      	adds	r3, #1
 800480c:	4a0d      	ldr	r2, [pc, #52]	; (8004844 <xTaskIncrementTick+0x170>)
 800480e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004810:	697b      	ldr	r3, [r7, #20]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	2000122c 	.word	0x2000122c
 8004820:	20001208 	.word	0x20001208
 8004824:	200011bc 	.word	0x200011bc
 8004828:	200011c0 	.word	0x200011c0
 800482c:	2000121c 	.word	0x2000121c
 8004830:	20001224 	.word	0x20001224
 8004834:	2000120c 	.word	0x2000120c
 8004838:	20000d34 	.word	0x20000d34
 800483c:	20000d30 	.word	0x20000d30
 8004840:	20001218 	.word	0x20001218
 8004844:	20001214 	.word	0x20001214

08004848 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800484e:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <vTaskSwitchContext+0xa8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004856:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <vTaskSwitchContext+0xac>)
 8004858:	2201      	movs	r2, #1
 800485a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800485c:	e041      	b.n	80048e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800485e:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <vTaskSwitchContext+0xac>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004864:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <vTaskSwitchContext+0xb0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	e010      	b.n	800488e <vTaskSwitchContext+0x46>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <vTaskSwitchContext+0x40>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	607b      	str	r3, [r7, #4]
}
 8004884:	bf00      	nop
 8004886:	e7fe      	b.n	8004886 <vTaskSwitchContext+0x3e>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3b01      	subs	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	491b      	ldr	r1, [pc, #108]	; (80048fc <vTaskSwitchContext+0xb4>)
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0e4      	beq.n	800486c <vTaskSwitchContext+0x24>
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4a13      	ldr	r2, [pc, #76]	; (80048fc <vTaskSwitchContext+0xb4>)
 80048ae:	4413      	add	r3, r2
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	605a      	str	r2, [r3, #4]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	3308      	adds	r3, #8
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d104      	bne.n	80048d2 <vTaskSwitchContext+0x8a>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4a09      	ldr	r2, [pc, #36]	; (8004900 <vTaskSwitchContext+0xb8>)
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	4a06      	ldr	r2, [pc, #24]	; (80048f8 <vTaskSwitchContext+0xb0>)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6013      	str	r3, [r2, #0]
}
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	2000122c 	.word	0x2000122c
 80048f4:	20001218 	.word	0x20001218
 80048f8:	2000120c 	.word	0x2000120c
 80048fc:	20000d34 	.word	0x20000d34
 8004900:	20000d30 	.word	0x20000d30

08004904 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	60fb      	str	r3, [r7, #12]
}
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800492a:	4b07      	ldr	r3, [pc, #28]	; (8004948 <vTaskPlaceOnEventList+0x44>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3318      	adds	r3, #24
 8004930:	4619      	mov	r1, r3
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fe fd95 	bl	8003462 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004938:	2101      	movs	r1, #1
 800493a:	6838      	ldr	r0, [r7, #0]
 800493c:	f000 fa7c 	bl	8004e38 <prvAddCurrentTaskToDelayedList>
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000d30 	.word	0x20000d30

0800494c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	617b      	str	r3, [r7, #20]
}
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3318      	adds	r3, #24
 800497a:	4619      	mov	r1, r3
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f7fe fd4c 	bl	800341a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004988:	f04f 33ff 	mov.w	r3, #4294967295
 800498c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	68b8      	ldr	r0, [r7, #8]
 8004992:	f000 fa51 	bl	8004e38 <prvAddCurrentTaskToDelayedList>
	}
 8004996:	bf00      	nop
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000d30 	.word	0x20000d30

080049a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	60fb      	str	r3, [r7, #12]
}
 80049cc:	bf00      	nop
 80049ce:	e7fe      	b.n	80049ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	3318      	adds	r3, #24
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe fd7d 	bl	80034d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049da:	4b1e      	ldr	r3, [pc, #120]	; (8004a54 <xTaskRemoveFromEventList+0xb0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d11d      	bne.n	8004a1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fe fd74 	bl	80034d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f0:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <xTaskRemoveFromEventList+0xb4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d903      	bls.n	8004a00 <xTaskRemoveFromEventList+0x5c>
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	4a16      	ldr	r2, [pc, #88]	; (8004a58 <xTaskRemoveFromEventList+0xb4>)
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4a13      	ldr	r2, [pc, #76]	; (8004a5c <xTaskRemoveFromEventList+0xb8>)
 8004a0e:	441a      	add	r2, r3
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4619      	mov	r1, r3
 8004a16:	4610      	mov	r0, r2
 8004a18:	f7fe fcff 	bl	800341a <vListInsertEnd>
 8004a1c:	e005      	b.n	8004a2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	3318      	adds	r3, #24
 8004a22:	4619      	mov	r1, r3
 8004a24:	480e      	ldr	r0, [pc, #56]	; (8004a60 <xTaskRemoveFromEventList+0xbc>)
 8004a26:	f7fe fcf8 	bl	800341a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <xTaskRemoveFromEventList+0xc0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d905      	bls.n	8004a44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <xTaskRemoveFromEventList+0xc4>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	e001      	b.n	8004a48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a48:	697b      	ldr	r3, [r7, #20]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000122c 	.word	0x2000122c
 8004a58:	2000120c 	.word	0x2000120c
 8004a5c:	20000d34 	.word	0x20000d34
 8004a60:	200011c4 	.word	0x200011c4
 8004a64:	20000d30 	.word	0x20000d30
 8004a68:	20001218 	.word	0x20001218

08004a6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <vTaskInternalSetTimeOutState+0x24>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <vTaskInternalSetTimeOutState+0x28>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	605a      	str	r2, [r3, #4]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	2000121c 	.word	0x2000121c
 8004a94:	20001208 	.word	0x20001208

08004a98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	613b      	str	r3, [r7, #16]
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	60fb      	str	r3, [r7, #12]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004ada:	f000 fe7b 	bl	80057d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <xTaskCheckForTimeOut+0xbc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	d102      	bne.n	8004afe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	e023      	b.n	8004b46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <xTaskCheckForTimeOut+0xc0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d007      	beq.n	8004b1a <xTaskCheckForTimeOut+0x82>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d302      	bcc.n	8004b1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b14:	2301      	movs	r3, #1
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	e015      	b.n	8004b46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d20b      	bcs.n	8004b3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	1ad2      	subs	r2, r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff ff9b 	bl	8004a6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	e004      	b.n	8004b46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b42:	2301      	movs	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b46:	f000 fe75 	bl	8005834 <vPortExitCritical>

	return xReturn;
 8004b4a:	69fb      	ldr	r3, [r7, #28]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3720      	adds	r7, #32
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20001208 	.word	0x20001208
 8004b58:	2000121c 	.word	0x2000121c

08004b5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b60:	4b03      	ldr	r3, [pc, #12]	; (8004b70 <vTaskMissedYield+0x14>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
}
 8004b66:	bf00      	nop
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	20001218 	.word	0x20001218

08004b74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b7c:	f000 f852 	bl	8004c24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <prvIdleTask+0x28>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d9f9      	bls.n	8004b7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <prvIdleTask+0x2c>)
 8004b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b98:	e7f0      	b.n	8004b7c <prvIdleTask+0x8>
 8004b9a:	bf00      	nop
 8004b9c:	20000d34 	.word	0x20000d34
 8004ba0:	e000ed04 	.word	0xe000ed04

08004ba4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004baa:	2300      	movs	r3, #0
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	e00c      	b.n	8004bca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4a12      	ldr	r2, [pc, #72]	; (8004c04 <prvInitialiseTaskLists+0x60>)
 8004bbc:	4413      	add	r3, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fbfe 	bl	80033c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b37      	cmp	r3, #55	; 0x37
 8004bce:	d9ef      	bls.n	8004bb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bd0:	480d      	ldr	r0, [pc, #52]	; (8004c08 <prvInitialiseTaskLists+0x64>)
 8004bd2:	f7fe fbf5 	bl	80033c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bd6:	480d      	ldr	r0, [pc, #52]	; (8004c0c <prvInitialiseTaskLists+0x68>)
 8004bd8:	f7fe fbf2 	bl	80033c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bdc:	480c      	ldr	r0, [pc, #48]	; (8004c10 <prvInitialiseTaskLists+0x6c>)
 8004bde:	f7fe fbef 	bl	80033c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004be2:	480c      	ldr	r0, [pc, #48]	; (8004c14 <prvInitialiseTaskLists+0x70>)
 8004be4:	f7fe fbec 	bl	80033c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004be8:	480b      	ldr	r0, [pc, #44]	; (8004c18 <prvInitialiseTaskLists+0x74>)
 8004bea:	f7fe fbe9 	bl	80033c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bee:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <prvInitialiseTaskLists+0x78>)
 8004bf0:	4a05      	ldr	r2, [pc, #20]	; (8004c08 <prvInitialiseTaskLists+0x64>)
 8004bf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <prvInitialiseTaskLists+0x7c>)
 8004bf6:	4a05      	ldr	r2, [pc, #20]	; (8004c0c <prvInitialiseTaskLists+0x68>)
 8004bf8:	601a      	str	r2, [r3, #0]
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000d34 	.word	0x20000d34
 8004c08:	20001194 	.word	0x20001194
 8004c0c:	200011a8 	.word	0x200011a8
 8004c10:	200011c4 	.word	0x200011c4
 8004c14:	200011d8 	.word	0x200011d8
 8004c18:	200011f0 	.word	0x200011f0
 8004c1c:	200011bc 	.word	0x200011bc
 8004c20:	200011c0 	.word	0x200011c0

08004c24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c2a:	e019      	b.n	8004c60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c2c:	f000 fdd2 	bl	80057d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c30:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <prvCheckTasksWaitingTermination+0x50>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe fc49 	bl	80034d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <prvCheckTasksWaitingTermination+0x54>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	4a0b      	ldr	r2, [pc, #44]	; (8004c78 <prvCheckTasksWaitingTermination+0x54>)
 8004c4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <prvCheckTasksWaitingTermination+0x58>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	4a0a      	ldr	r2, [pc, #40]	; (8004c7c <prvCheckTasksWaitingTermination+0x58>)
 8004c54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c56:	f000 fded 	bl	8005834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f810 	bl	8004c80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c60:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <prvCheckTasksWaitingTermination+0x58>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e1      	bne.n	8004c2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	200011d8 	.word	0x200011d8
 8004c78:	20001204 	.word	0x20001204
 8004c7c:	200011ec 	.word	0x200011ec

08004c80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d108      	bne.n	8004ca4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 ff8a 	bl	8005bb0 <vPortFree>
				vPortFree( pxTCB );
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 ff87 	bl	8005bb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ca2:	e018      	b.n	8004cd6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d103      	bne.n	8004cb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 ff7e 	bl	8005bb0 <vPortFree>
	}
 8004cb4:	e00f      	b.n	8004cd6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d00a      	beq.n	8004cd6 <prvDeleteTCB+0x56>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60fb      	str	r3, [r7, #12]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <prvDeleteTCB+0x54>
	}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <prvResetNextTaskUnblockTime+0x38>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d104      	bne.n	8004cfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <prvResetNextTaskUnblockTime+0x3c>)
 8004cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cf8:	e008      	b.n	8004d0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cfa:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <prvResetNextTaskUnblockTime+0x38>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	4a04      	ldr	r2, [pc, #16]	; (8004d1c <prvResetNextTaskUnblockTime+0x3c>)
 8004d0a:	6013      	str	r3, [r2, #0]
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	200011bc 	.word	0x200011bc
 8004d1c:	20001224 	.word	0x20001224

08004d20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <xTaskGetSchedulerState+0x34>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	e008      	b.n	8004d46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d34:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <xTaskGetSchedulerState+0x38>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	607b      	str	r3, [r7, #4]
 8004d40:	e001      	b.n	8004d46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d42:	2300      	movs	r3, #0
 8004d44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d46:	687b      	ldr	r3, [r7, #4]
	}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	20001210 	.word	0x20001210
 8004d58:	2000122c 	.word	0x2000122c

08004d5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d056      	beq.n	8004e20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d72:	4b2e      	ldr	r3, [pc, #184]	; (8004e2c <xTaskPriorityDisinherit+0xd0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d00a      	beq.n	8004d92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	60fb      	str	r3, [r7, #12]
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10a      	bne.n	8004db0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	60bb      	str	r3, [r7, #8]
}
 8004dac:	bf00      	nop
 8004dae:	e7fe      	b.n	8004dae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db4:	1e5a      	subs	r2, r3, #1
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d02c      	beq.n	8004e20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d128      	bne.n	8004e20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe fb7e 	bl	80034d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df0:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <xTaskPriorityDisinherit+0xd4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d903      	bls.n	8004e00 <xTaskPriorityDisinherit+0xa4>
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	4a0c      	ldr	r2, [pc, #48]	; (8004e30 <xTaskPriorityDisinherit+0xd4>)
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <xTaskPriorityDisinherit+0xd8>)
 8004e0e:	441a      	add	r2, r3
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	3304      	adds	r3, #4
 8004e14:	4619      	mov	r1, r3
 8004e16:	4610      	mov	r0, r2
 8004e18:	f7fe faff 	bl	800341a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e20:	697b      	ldr	r3, [r7, #20]
	}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000d30 	.word	0x20000d30
 8004e30:	2000120c 	.word	0x2000120c
 8004e34:	20000d34 	.word	0x20000d34

08004e38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e42:	4b21      	ldr	r3, [pc, #132]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e48:	4b20      	ldr	r3, [pc, #128]	; (8004ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe fb40 	bl	80034d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	d10a      	bne.n	8004e72 <prvAddCurrentTaskToDelayedList+0x3a>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d007      	beq.n	8004e72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e62:	4b1a      	ldr	r3, [pc, #104]	; (8004ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4819      	ldr	r0, [pc, #100]	; (8004ed0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e6c:	f7fe fad5 	bl	800341a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e70:	e026      	b.n	8004ec0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4413      	add	r3, r2
 8004e78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e7a:	4b14      	ldr	r3, [pc, #80]	; (8004ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d209      	bcs.n	8004e9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e8a:	4b12      	ldr	r3, [pc, #72]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f7fe fae3 	bl	8003462 <vListInsert>
}
 8004e9c:	e010      	b.n	8004ec0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e9e:	4b0e      	ldr	r3, [pc, #56]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f7fe fad9 	bl	8003462 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d202      	bcs.n	8004ec0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004eba:	4a08      	ldr	r2, [pc, #32]	; (8004edc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	6013      	str	r3, [r2, #0]
}
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20001208 	.word	0x20001208
 8004ecc:	20000d30 	.word	0x20000d30
 8004ed0:	200011f0 	.word	0x200011f0
 8004ed4:	200011c0 	.word	0x200011c0
 8004ed8:	200011bc 	.word	0x200011bc
 8004edc:	20001224 	.word	0x20001224

08004ee0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08a      	sub	sp, #40	; 0x28
 8004ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004eea:	f000 fb07 	bl	80054fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004eee:	4b1c      	ldr	r3, [pc, #112]	; (8004f60 <xTimerCreateTimerTask+0x80>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d021      	beq.n	8004f3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004efe:	1d3a      	adds	r2, r7, #4
 8004f00:	f107 0108 	add.w	r1, r7, #8
 8004f04:	f107 030c 	add.w	r3, r7, #12
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fe fa3f 	bl	800338c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	9202      	str	r2, [sp, #8]
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	2302      	movs	r3, #2
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	460a      	mov	r2, r1
 8004f20:	4910      	ldr	r1, [pc, #64]	; (8004f64 <xTimerCreateTimerTask+0x84>)
 8004f22:	4811      	ldr	r0, [pc, #68]	; (8004f68 <xTimerCreateTimerTask+0x88>)
 8004f24:	f7ff f8de 	bl	80040e4 <xTaskCreateStatic>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4a10      	ldr	r2, [pc, #64]	; (8004f6c <xTimerCreateTimerTask+0x8c>)
 8004f2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f2e:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <xTimerCreateTimerTask+0x8c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f36:	2301      	movs	r3, #1
 8004f38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10a      	bne.n	8004f56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	613b      	str	r3, [r7, #16]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f56:	697b      	ldr	r3, [r7, #20]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20001260 	.word	0x20001260
 8004f64:	0800af10 	.word	0x0800af10
 8004f68:	080050a5 	.word	0x080050a5
 8004f6c:	20001264 	.word	0x20001264

08004f70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08a      	sub	sp, #40	; 0x28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	623b      	str	r3, [r7, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	e7fe      	b.n	8004f9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f9e:	4b1a      	ldr	r3, [pc, #104]	; (8005008 <xTimerGenericCommand+0x98>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d02a      	beq.n	8004ffc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b05      	cmp	r3, #5
 8004fb6:	dc18      	bgt.n	8004fea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004fb8:	f7ff feb2 	bl	8004d20 <xTaskGetSchedulerState>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d109      	bne.n	8004fd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004fc2:	4b11      	ldr	r3, [pc, #68]	; (8005008 <xTimerGenericCommand+0x98>)
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	f107 0110 	add.w	r1, r7, #16
 8004fca:	2300      	movs	r3, #0
 8004fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fce:	f7fe fc53 	bl	8003878 <xQueueGenericSend>
 8004fd2:	6278      	str	r0, [r7, #36]	; 0x24
 8004fd4:	e012      	b.n	8004ffc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fd6:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <xTimerGenericCommand+0x98>)
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	f107 0110 	add.w	r1, r7, #16
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f7fe fc49 	bl	8003878 <xQueueGenericSend>
 8004fe6:	6278      	str	r0, [r7, #36]	; 0x24
 8004fe8:	e008      	b.n	8004ffc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fea:	4b07      	ldr	r3, [pc, #28]	; (8005008 <xTimerGenericCommand+0x98>)
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	f107 0110 	add.w	r1, r7, #16
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	f7fe fd3d 	bl	8003a74 <xQueueGenericSendFromISR>
 8004ffa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3728      	adds	r7, #40	; 0x28
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20001260 	.word	0x20001260

0800500c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af02      	add	r7, sp, #8
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005016:	4b22      	ldr	r3, [pc, #136]	; (80050a0 <prvProcessExpiredTimer+0x94>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	3304      	adds	r3, #4
 8005024:	4618      	mov	r0, r3
 8005026:	f7fe fa55 	bl	80034d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d022      	beq.n	800507e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	699a      	ldr	r2, [r3, #24]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	18d1      	adds	r1, r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	6978      	ldr	r0, [r7, #20]
 8005046:	f000 f8d1 	bl	80051ec <prvInsertTimerInActiveList>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01f      	beq.n	8005090 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005050:	2300      	movs	r3, #0
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	2100      	movs	r1, #0
 800505a:	6978      	ldr	r0, [r7, #20]
 800505c:	f7ff ff88 	bl	8004f70 <xTimerGenericCommand>
 8005060:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d113      	bne.n	8005090 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	60fb      	str	r3, [r7, #12]
}
 800507a:	bf00      	nop
 800507c:	e7fe      	b.n	800507c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005084:	f023 0301 	bic.w	r3, r3, #1
 8005088:	b2da      	uxtb	r2, r3
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	6978      	ldr	r0, [r7, #20]
 8005096:	4798      	blx	r3
}
 8005098:	bf00      	nop
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20001258 	.word	0x20001258

080050a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050ac:	f107 0308 	add.w	r3, r7, #8
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 f857 	bl	8005164 <prvGetNextExpireTime>
 80050b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4619      	mov	r1, r3
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f803 	bl	80050c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050c2:	f000 f8d5 	bl	8005270 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050c6:	e7f1      	b.n	80050ac <prvTimerTask+0x8>

080050c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050d2:	f7ff fa43 	bl	800455c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050d6:	f107 0308 	add.w	r3, r7, #8
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 f866 	bl	80051ac <prvSampleTimeNow>
 80050e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d130      	bne.n	800514a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <prvProcessTimerOrBlockTask+0x3c>
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d806      	bhi.n	8005104 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050f6:	f7ff fa3f 	bl	8004578 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff ff85 	bl	800500c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005102:	e024      	b.n	800514e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d008      	beq.n	800511c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800510a:	4b13      	ldr	r3, [pc, #76]	; (8005158 <prvProcessTimerOrBlockTask+0x90>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <prvProcessTimerOrBlockTask+0x50>
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <prvProcessTimerOrBlockTask+0x52>
 8005118:	2300      	movs	r3, #0
 800511a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800511c:	4b0f      	ldr	r3, [pc, #60]	; (800515c <prvProcessTimerOrBlockTask+0x94>)
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	4619      	mov	r1, r3
 800512a:	f7fe ffa7 	bl	800407c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800512e:	f7ff fa23 	bl	8004578 <xTaskResumeAll>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005138:	4b09      	ldr	r3, [pc, #36]	; (8005160 <prvProcessTimerOrBlockTask+0x98>)
 800513a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	f3bf 8f6f 	isb	sy
}
 8005148:	e001      	b.n	800514e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800514a:	f7ff fa15 	bl	8004578 <xTaskResumeAll>
}
 800514e:	bf00      	nop
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	2000125c 	.word	0x2000125c
 800515c:	20001260 	.word	0x20001260
 8005160:	e000ed04 	.word	0xe000ed04

08005164 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800516c:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <prvGetNextExpireTime+0x44>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <prvGetNextExpireTime+0x16>
 8005176:	2201      	movs	r2, #1
 8005178:	e000      	b.n	800517c <prvGetNextExpireTime+0x18>
 800517a:	2200      	movs	r2, #0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d105      	bne.n	8005194 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005188:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <prvGetNextExpireTime+0x44>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	e001      	b.n	8005198 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005198:	68fb      	ldr	r3, [r7, #12]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20001258 	.word	0x20001258

080051ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051b4:	f7ff fa7e 	bl	80046b4 <xTaskGetTickCount>
 80051b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051ba:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <prvSampleTimeNow+0x3c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d205      	bcs.n	80051d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051c4:	f000 f936 	bl	8005434 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e002      	b.n	80051d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051d6:	4a04      	ldr	r2, [pc, #16]	; (80051e8 <prvSampleTimeNow+0x3c>)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051dc:	68fb      	ldr	r3, [r7, #12]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20001268 	.word	0x20001268

080051ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	429a      	cmp	r2, r3
 8005210:	d812      	bhi.n	8005238 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	1ad2      	subs	r2, r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	429a      	cmp	r2, r3
 800521e:	d302      	bcc.n	8005226 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005220:	2301      	movs	r3, #1
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e01b      	b.n	800525e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005226:	4b10      	ldr	r3, [pc, #64]	; (8005268 <prvInsertTimerInActiveList+0x7c>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3304      	adds	r3, #4
 800522e:	4619      	mov	r1, r3
 8005230:	4610      	mov	r0, r2
 8005232:	f7fe f916 	bl	8003462 <vListInsert>
 8005236:	e012      	b.n	800525e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d206      	bcs.n	800524e <prvInsertTimerInActiveList+0x62>
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d302      	bcc.n	800524e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005248:	2301      	movs	r3, #1
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e007      	b.n	800525e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <prvInsertTimerInActiveList+0x80>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3304      	adds	r3, #4
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f7fe f902 	bl	8003462 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800525e:	697b      	ldr	r3, [r7, #20]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	2000125c 	.word	0x2000125c
 800526c:	20001258 	.word	0x20001258

08005270 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08e      	sub	sp, #56	; 0x38
 8005274:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005276:	e0ca      	b.n	800540e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	da18      	bge.n	80052b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800527e:	1d3b      	adds	r3, r7, #4
 8005280:	3304      	adds	r3, #4
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	61fb      	str	r3, [r7, #28]
}
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a6:	6850      	ldr	r0, [r2, #4]
 80052a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052aa:	6892      	ldr	r2, [r2, #8]
 80052ac:	4611      	mov	r1, r2
 80052ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f2c0 80ab 	blt.w	800540e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d004      	beq.n	80052ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	3304      	adds	r3, #4
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fe f903 	bl	80034d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052ce:	463b      	mov	r3, r7
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff ff6b 	bl	80051ac <prvSampleTimeNow>
 80052d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b09      	cmp	r3, #9
 80052dc:	f200 8096 	bhi.w	800540c <prvProcessReceivedCommands+0x19c>
 80052e0:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <prvProcessReceivedCommands+0x78>)
 80052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e6:	bf00      	nop
 80052e8:	08005311 	.word	0x08005311
 80052ec:	08005311 	.word	0x08005311
 80052f0:	08005311 	.word	0x08005311
 80052f4:	08005385 	.word	0x08005385
 80052f8:	08005399 	.word	0x08005399
 80052fc:	080053e3 	.word	0x080053e3
 8005300:	08005311 	.word	0x08005311
 8005304:	08005311 	.word	0x08005311
 8005308:	08005385 	.word	0x08005385
 800530c:	08005399 	.word	0x08005399
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	b2da      	uxtb	r2, r3
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	18d1      	adds	r1, r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005330:	f7ff ff5c 	bl	80051ec <prvInsertTimerInActiveList>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d069      	beq.n	800540e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005340:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d05e      	beq.n	800540e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	441a      	add	r2, r3
 8005358:	2300      	movs	r3, #0
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	2300      	movs	r3, #0
 800535e:	2100      	movs	r1, #0
 8005360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005362:	f7ff fe05 	bl	8004f70 <xTimerGenericCommand>
 8005366:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d14f      	bne.n	800540e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	61bb      	str	r3, [r7, #24]
}
 8005380:	bf00      	nop
 8005382:	e7fe      	b.n	8005382 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800538a:	f023 0301 	bic.w	r3, r3, #1
 800538e:	b2da      	uxtb	r2, r3
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005396:	e03a      	b.n	800540e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10a      	bne.n	80053ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	617b      	str	r3, [r7, #20]
}
 80053ca:	bf00      	nop
 80053cc:	e7fe      	b.n	80053cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	18d1      	adds	r1, r2, r3
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053dc:	f7ff ff06 	bl	80051ec <prvInsertTimerInActiveList>
					break;
 80053e0:	e015      	b.n	800540e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d103      	bne.n	80053f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80053f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f2:	f000 fbdd 	bl	8005bb0 <vPortFree>
 80053f6:	e00a      	b.n	800540e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	b2da      	uxtb	r2, r3
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800540a:	e000      	b.n	800540e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800540c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800540e:	4b08      	ldr	r3, [pc, #32]	; (8005430 <prvProcessReceivedCommands+0x1c0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	1d39      	adds	r1, r7, #4
 8005414:	2200      	movs	r2, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe fbc8 	bl	8003bac <xQueueReceive>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	f47f af2a 	bne.w	8005278 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	3730      	adds	r7, #48	; 0x30
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20001260 	.word	0x20001260

08005434 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800543a:	e048      	b.n	80054ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800543c:	4b2d      	ldr	r3, [pc, #180]	; (80054f4 <prvSwitchTimerLists+0xc0>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005446:	4b2b      	ldr	r3, [pc, #172]	; (80054f4 <prvSwitchTimerLists+0xc0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3304      	adds	r3, #4
 8005454:	4618      	mov	r0, r3
 8005456:	f7fe f83d 	bl	80034d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d02e      	beq.n	80054ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4413      	add	r3, r2
 8005478:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	429a      	cmp	r2, r3
 8005480:	d90e      	bls.n	80054a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800548e:	4b19      	ldr	r3, [pc, #100]	; (80054f4 <prvSwitchTimerLists+0xc0>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3304      	adds	r3, #4
 8005496:	4619      	mov	r1, r3
 8005498:	4610      	mov	r0, r2
 800549a:	f7fd ffe2 	bl	8003462 <vListInsert>
 800549e:	e016      	b.n	80054ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054a0:	2300      	movs	r3, #0
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	2300      	movs	r3, #0
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	2100      	movs	r1, #0
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f7ff fd60 	bl	8004f70 <xTimerGenericCommand>
 80054b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	603b      	str	r3, [r7, #0]
}
 80054ca:	bf00      	nop
 80054cc:	e7fe      	b.n	80054cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054ce:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <prvSwitchTimerLists+0xc0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1b1      	bne.n	800543c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054d8:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <prvSwitchTimerLists+0xc0>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <prvSwitchTimerLists+0xc4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a04      	ldr	r2, [pc, #16]	; (80054f4 <prvSwitchTimerLists+0xc0>)
 80054e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054e6:	4a04      	ldr	r2, [pc, #16]	; (80054f8 <prvSwitchTimerLists+0xc4>)
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	6013      	str	r3, [r2, #0]
}
 80054ec:	bf00      	nop
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	20001258 	.word	0x20001258
 80054f8:	2000125c 	.word	0x2000125c

080054fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005502:	f000 f967 	bl	80057d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005506:	4b15      	ldr	r3, [pc, #84]	; (800555c <prvCheckForValidListAndQueue+0x60>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d120      	bne.n	8005550 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800550e:	4814      	ldr	r0, [pc, #80]	; (8005560 <prvCheckForValidListAndQueue+0x64>)
 8005510:	f7fd ff56 	bl	80033c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005514:	4813      	ldr	r0, [pc, #76]	; (8005564 <prvCheckForValidListAndQueue+0x68>)
 8005516:	f7fd ff53 	bl	80033c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800551a:	4b13      	ldr	r3, [pc, #76]	; (8005568 <prvCheckForValidListAndQueue+0x6c>)
 800551c:	4a10      	ldr	r2, [pc, #64]	; (8005560 <prvCheckForValidListAndQueue+0x64>)
 800551e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005520:	4b12      	ldr	r3, [pc, #72]	; (800556c <prvCheckForValidListAndQueue+0x70>)
 8005522:	4a10      	ldr	r2, [pc, #64]	; (8005564 <prvCheckForValidListAndQueue+0x68>)
 8005524:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005526:	2300      	movs	r3, #0
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	4b11      	ldr	r3, [pc, #68]	; (8005570 <prvCheckForValidListAndQueue+0x74>)
 800552c:	4a11      	ldr	r2, [pc, #68]	; (8005574 <prvCheckForValidListAndQueue+0x78>)
 800552e:	2110      	movs	r1, #16
 8005530:	200a      	movs	r0, #10
 8005532:	f7fe f861 	bl	80035f8 <xQueueGenericCreateStatic>
 8005536:	4603      	mov	r3, r0
 8005538:	4a08      	ldr	r2, [pc, #32]	; (800555c <prvCheckForValidListAndQueue+0x60>)
 800553a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800553c:	4b07      	ldr	r3, [pc, #28]	; (800555c <prvCheckForValidListAndQueue+0x60>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <prvCheckForValidListAndQueue+0x60>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	490b      	ldr	r1, [pc, #44]	; (8005578 <prvCheckForValidListAndQueue+0x7c>)
 800554a:	4618      	mov	r0, r3
 800554c:	f7fe fd42 	bl	8003fd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005550:	f000 f970 	bl	8005834 <vPortExitCritical>
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20001260 	.word	0x20001260
 8005560:	20001230 	.word	0x20001230
 8005564:	20001244 	.word	0x20001244
 8005568:	20001258 	.word	0x20001258
 800556c:	2000125c 	.word	0x2000125c
 8005570:	2000130c 	.word	0x2000130c
 8005574:	2000126c 	.word	0x2000126c
 8005578:	0800af18 	.word	0x0800af18

0800557c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3b04      	subs	r3, #4
 800558c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3b04      	subs	r3, #4
 800559a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f023 0201 	bic.w	r2, r3, #1
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3b04      	subs	r3, #4
 80055aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055ac:	4a0c      	ldr	r2, [pc, #48]	; (80055e0 <pxPortInitialiseStack+0x64>)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3b14      	subs	r3, #20
 80055b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3b04      	subs	r3, #4
 80055c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f06f 0202 	mvn.w	r2, #2
 80055ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3b20      	subs	r3, #32
 80055d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055d2:	68fb      	ldr	r3, [r7, #12]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	080055e5 	.word	0x080055e5

080055e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055ee:	4b12      	ldr	r3, [pc, #72]	; (8005638 <prvTaskExitError+0x54>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f6:	d00a      	beq.n	800560e <prvTaskExitError+0x2a>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	60fb      	str	r3, [r7, #12]
}
 800560a:	bf00      	nop
 800560c:	e7fe      	b.n	800560c <prvTaskExitError+0x28>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	60bb      	str	r3, [r7, #8]
}
 8005620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005622:	bf00      	nop
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0fc      	beq.n	8005624 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800562a:	bf00      	nop
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	20000010 	.word	0x20000010
 800563c:	00000000 	.word	0x00000000

08005640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005640:	4b07      	ldr	r3, [pc, #28]	; (8005660 <pxCurrentTCBConst2>)
 8005642:	6819      	ldr	r1, [r3, #0]
 8005644:	6808      	ldr	r0, [r1, #0]
 8005646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564a:	f380 8809 	msr	PSP, r0
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f380 8811 	msr	BASEPRI, r0
 800565a:	4770      	bx	lr
 800565c:	f3af 8000 	nop.w

08005660 <pxCurrentTCBConst2>:
 8005660:	20000d30 	.word	0x20000d30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop

08005668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005668:	4808      	ldr	r0, [pc, #32]	; (800568c <prvPortStartFirstTask+0x24>)
 800566a:	6800      	ldr	r0, [r0, #0]
 800566c:	6800      	ldr	r0, [r0, #0]
 800566e:	f380 8808 	msr	MSP, r0
 8005672:	f04f 0000 	mov.w	r0, #0
 8005676:	f380 8814 	msr	CONTROL, r0
 800567a:	b662      	cpsie	i
 800567c:	b661      	cpsie	f
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	df00      	svc	0
 8005688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800568a:	bf00      	nop
 800568c:	e000ed08 	.word	0xe000ed08

08005690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005696:	4b46      	ldr	r3, [pc, #280]	; (80057b0 <xPortStartScheduler+0x120>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a46      	ldr	r2, [pc, #280]	; (80057b4 <xPortStartScheduler+0x124>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d10a      	bne.n	80056b6 <xPortStartScheduler+0x26>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	613b      	str	r3, [r7, #16]
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056b6:	4b3e      	ldr	r3, [pc, #248]	; (80057b0 <xPortStartScheduler+0x120>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a3f      	ldr	r2, [pc, #252]	; (80057b8 <xPortStartScheduler+0x128>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10a      	bne.n	80056d6 <xPortStartScheduler+0x46>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	60fb      	str	r3, [r7, #12]
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056d6:	4b39      	ldr	r3, [pc, #228]	; (80057bc <xPortStartScheduler+0x12c>)
 80056d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	22ff      	movs	r2, #255	; 0xff
 80056e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	4b31      	ldr	r3, [pc, #196]	; (80057c0 <xPortStartScheduler+0x130>)
 80056fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056fe:	4b31      	ldr	r3, [pc, #196]	; (80057c4 <xPortStartScheduler+0x134>)
 8005700:	2207      	movs	r2, #7
 8005702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005704:	e009      	b.n	800571a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005706:	4b2f      	ldr	r3, [pc, #188]	; (80057c4 <xPortStartScheduler+0x134>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3b01      	subs	r3, #1
 800570c:	4a2d      	ldr	r2, [pc, #180]	; (80057c4 <xPortStartScheduler+0x134>)
 800570e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	b2db      	uxtb	r3, r3
 8005718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800571a:	78fb      	ldrb	r3, [r7, #3]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005722:	2b80      	cmp	r3, #128	; 0x80
 8005724:	d0ef      	beq.n	8005706 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005726:	4b27      	ldr	r3, [pc, #156]	; (80057c4 <xPortStartScheduler+0x134>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f1c3 0307 	rsb	r3, r3, #7
 800572e:	2b04      	cmp	r3, #4
 8005730:	d00a      	beq.n	8005748 <xPortStartScheduler+0xb8>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	60bb      	str	r3, [r7, #8]
}
 8005744:	bf00      	nop
 8005746:	e7fe      	b.n	8005746 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005748:	4b1e      	ldr	r3, [pc, #120]	; (80057c4 <xPortStartScheduler+0x134>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	021b      	lsls	r3, r3, #8
 800574e:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <xPortStartScheduler+0x134>)
 8005750:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005752:	4b1c      	ldr	r3, [pc, #112]	; (80057c4 <xPortStartScheduler+0x134>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800575a:	4a1a      	ldr	r2, [pc, #104]	; (80057c4 <xPortStartScheduler+0x134>)
 800575c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005766:	4b18      	ldr	r3, [pc, #96]	; (80057c8 <xPortStartScheduler+0x138>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <xPortStartScheduler+0x138>)
 800576c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005772:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <xPortStartScheduler+0x138>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a14      	ldr	r2, [pc, #80]	; (80057c8 <xPortStartScheduler+0x138>)
 8005778:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800577c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800577e:	f000 f8dd 	bl	800593c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005782:	4b12      	ldr	r3, [pc, #72]	; (80057cc <xPortStartScheduler+0x13c>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005788:	f000 f8fc 	bl	8005984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800578c:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <xPortStartScheduler+0x140>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a0f      	ldr	r2, [pc, #60]	; (80057d0 <xPortStartScheduler+0x140>)
 8005792:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005796:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005798:	f7ff ff66 	bl	8005668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800579c:	f7ff f854 	bl	8004848 <vTaskSwitchContext>
	prvTaskExitError();
 80057a0:	f7ff ff20 	bl	80055e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	e000ed00 	.word	0xe000ed00
 80057b4:	410fc271 	.word	0x410fc271
 80057b8:	410fc270 	.word	0x410fc270
 80057bc:	e000e400 	.word	0xe000e400
 80057c0:	2000135c 	.word	0x2000135c
 80057c4:	20001360 	.word	0x20001360
 80057c8:	e000ed20 	.word	0xe000ed20
 80057cc:	20000010 	.word	0x20000010
 80057d0:	e000ef34 	.word	0xe000ef34

080057d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	607b      	str	r3, [r7, #4]
}
 80057ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057ee:	4b0f      	ldr	r3, [pc, #60]	; (800582c <vPortEnterCritical+0x58>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3301      	adds	r3, #1
 80057f4:	4a0d      	ldr	r2, [pc, #52]	; (800582c <vPortEnterCritical+0x58>)
 80057f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057f8:	4b0c      	ldr	r3, [pc, #48]	; (800582c <vPortEnterCritical+0x58>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d10f      	bne.n	8005820 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005800:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <vPortEnterCritical+0x5c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <vPortEnterCritical+0x4c>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	603b      	str	r3, [r7, #0]
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <vPortEnterCritical+0x4a>
	}
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	20000010 	.word	0x20000010
 8005830:	e000ed04 	.word	0xe000ed04

08005834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800583a:	4b12      	ldr	r3, [pc, #72]	; (8005884 <vPortExitCritical+0x50>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10a      	bne.n	8005858 <vPortExitCritical+0x24>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	607b      	str	r3, [r7, #4]
}
 8005854:	bf00      	nop
 8005856:	e7fe      	b.n	8005856 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005858:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <vPortExitCritical+0x50>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3b01      	subs	r3, #1
 800585e:	4a09      	ldr	r2, [pc, #36]	; (8005884 <vPortExitCritical+0x50>)
 8005860:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005862:	4b08      	ldr	r3, [pc, #32]	; (8005884 <vPortExitCritical+0x50>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d105      	bne.n	8005876 <vPortExitCritical+0x42>
 800586a:	2300      	movs	r3, #0
 800586c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	f383 8811 	msr	BASEPRI, r3
}
 8005874:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20000010 	.word	0x20000010
	...

08005890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005890:	f3ef 8009 	mrs	r0, PSP
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <pxCurrentTCBConst>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	f01e 0f10 	tst.w	lr, #16
 80058a0:	bf08      	it	eq
 80058a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058aa:	6010      	str	r0, [r2, #0]
 80058ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80058b4:	f380 8811 	msr	BASEPRI, r0
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f7fe ffc2 	bl	8004848 <vTaskSwitchContext>
 80058c4:	f04f 0000 	mov.w	r0, #0
 80058c8:	f380 8811 	msr	BASEPRI, r0
 80058cc:	bc09      	pop	{r0, r3}
 80058ce:	6819      	ldr	r1, [r3, #0]
 80058d0:	6808      	ldr	r0, [r1, #0]
 80058d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d6:	f01e 0f10 	tst.w	lr, #16
 80058da:	bf08      	it	eq
 80058dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058e0:	f380 8809 	msr	PSP, r0
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	f3af 8000 	nop.w

080058f0 <pxCurrentTCBConst>:
 80058f0:	20000d30 	.word	0x20000d30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop

080058f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	607b      	str	r3, [r7, #4]
}
 8005910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005912:	f7fe fedf 	bl	80046d4 <xTaskIncrementTick>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800591c:	4b06      	ldr	r3, [pc, #24]	; (8005938 <xPortSysTickHandler+0x40>)
 800591e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	2300      	movs	r3, #0
 8005926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	f383 8811 	msr	BASEPRI, r3
}
 800592e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005940:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <vPortSetupTimerInterrupt+0x34>)
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005946:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <vPortSetupTimerInterrupt+0x38>)
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800594c:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <vPortSetupTimerInterrupt+0x3c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a0a      	ldr	r2, [pc, #40]	; (800597c <vPortSetupTimerInterrupt+0x40>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	099b      	lsrs	r3, r3, #6
 8005958:	4a09      	ldr	r2, [pc, #36]	; (8005980 <vPortSetupTimerInterrupt+0x44>)
 800595a:	3b01      	subs	r3, #1
 800595c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800595e:	4b04      	ldr	r3, [pc, #16]	; (8005970 <vPortSetupTimerInterrupt+0x34>)
 8005960:	2207      	movs	r2, #7
 8005962:	601a      	str	r2, [r3, #0]
}
 8005964:	bf00      	nop
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	e000e010 	.word	0xe000e010
 8005974:	e000e018 	.word	0xe000e018
 8005978:	20000004 	.word	0x20000004
 800597c:	10624dd3 	.word	0x10624dd3
 8005980:	e000e014 	.word	0xe000e014

08005984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005994 <vPortEnableVFP+0x10>
 8005988:	6801      	ldr	r1, [r0, #0]
 800598a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800598e:	6001      	str	r1, [r0, #0]
 8005990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005992:	bf00      	nop
 8005994:	e000ed88 	.word	0xe000ed88

08005998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800599e:	f3ef 8305 	mrs	r3, IPSR
 80059a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b0f      	cmp	r3, #15
 80059a8:	d914      	bls.n	80059d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059aa:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <vPortValidateInterruptPriority+0x70>)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059b4:	4b15      	ldr	r3, [pc, #84]	; (8005a0c <vPortValidateInterruptPriority+0x74>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	7afa      	ldrb	r2, [r7, #11]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d20a      	bcs.n	80059d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	607b      	str	r3, [r7, #4]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059d4:	4b0e      	ldr	r3, [pc, #56]	; (8005a10 <vPortValidateInterruptPriority+0x78>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059dc:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <vPortValidateInterruptPriority+0x7c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d90a      	bls.n	80059fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	603b      	str	r3, [r7, #0]
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <vPortValidateInterruptPriority+0x60>
	}
 80059fa:	bf00      	nop
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	e000e3f0 	.word	0xe000e3f0
 8005a0c:	2000135c 	.word	0x2000135c
 8005a10:	e000ed0c 	.word	0xe000ed0c
 8005a14:	20001360 	.word	0x20001360

08005a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	; 0x28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a24:	f7fe fd9a 	bl	800455c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a28:	4b5b      	ldr	r3, [pc, #364]	; (8005b98 <pvPortMalloc+0x180>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a30:	f000 f920 	bl	8005c74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a34:	4b59      	ldr	r3, [pc, #356]	; (8005b9c <pvPortMalloc+0x184>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f040 8093 	bne.w	8005b68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01d      	beq.n	8005a84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a48:	2208      	movs	r2, #8
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d014      	beq.n	8005a84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f023 0307 	bic.w	r3, r3, #7
 8005a60:	3308      	adds	r3, #8
 8005a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <pvPortMalloc+0x6c>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	617b      	str	r3, [r7, #20]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d06e      	beq.n	8005b68 <pvPortMalloc+0x150>
 8005a8a:	4b45      	ldr	r3, [pc, #276]	; (8005ba0 <pvPortMalloc+0x188>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d869      	bhi.n	8005b68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a94:	4b43      	ldr	r3, [pc, #268]	; (8005ba4 <pvPortMalloc+0x18c>)
 8005a96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a98:	4b42      	ldr	r3, [pc, #264]	; (8005ba4 <pvPortMalloc+0x18c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a9e:	e004      	b.n	8005aaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d903      	bls.n	8005abc <pvPortMalloc+0xa4>
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1f1      	bne.n	8005aa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005abc:	4b36      	ldr	r3, [pc, #216]	; (8005b98 <pvPortMalloc+0x180>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d050      	beq.n	8005b68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2208      	movs	r2, #8
 8005acc:	4413      	add	r3, r2
 8005ace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	1ad2      	subs	r2, r2, r3
 8005ae0:	2308      	movs	r3, #8
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d91f      	bls.n	8005b28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4413      	add	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <pvPortMalloc+0xf8>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	613b      	str	r3, [r7, #16]
}
 8005b0c:	bf00      	nop
 8005b0e:	e7fe      	b.n	8005b0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	1ad2      	subs	r2, r2, r3
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b22:	69b8      	ldr	r0, [r7, #24]
 8005b24:	f000 f908 	bl	8005d38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b28:	4b1d      	ldr	r3, [pc, #116]	; (8005ba0 <pvPortMalloc+0x188>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <pvPortMalloc+0x188>)
 8005b34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b36:	4b1a      	ldr	r3, [pc, #104]	; (8005ba0 <pvPortMalloc+0x188>)
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <pvPortMalloc+0x190>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d203      	bcs.n	8005b4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b42:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <pvPortMalloc+0x188>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a18      	ldr	r2, [pc, #96]	; (8005ba8 <pvPortMalloc+0x190>)
 8005b48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	4b13      	ldr	r3, [pc, #76]	; (8005b9c <pvPortMalloc+0x184>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b5e:	4b13      	ldr	r3, [pc, #76]	; (8005bac <pvPortMalloc+0x194>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3301      	adds	r3, #1
 8005b64:	4a11      	ldr	r2, [pc, #68]	; (8005bac <pvPortMalloc+0x194>)
 8005b66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b68:	f7fe fd06 	bl	8004578 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <pvPortMalloc+0x174>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	60fb      	str	r3, [r7, #12]
}
 8005b88:	bf00      	nop
 8005b8a:	e7fe      	b.n	8005b8a <pvPortMalloc+0x172>
	return pvReturn;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3728      	adds	r7, #40	; 0x28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20004f6c 	.word	0x20004f6c
 8005b9c:	20004f80 	.word	0x20004f80
 8005ba0:	20004f70 	.word	0x20004f70
 8005ba4:	20004f64 	.word	0x20004f64
 8005ba8:	20004f74 	.word	0x20004f74
 8005bac:	20004f78 	.word	0x20004f78

08005bb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d04d      	beq.n	8005c5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bc2:	2308      	movs	r3, #8
 8005bc4:	425b      	negs	r3, r3
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4413      	add	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <vPortFree+0xb8>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10a      	bne.n	8005bf4 <vPortFree+0x44>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	60fb      	str	r3, [r7, #12]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00a      	beq.n	8005c12 <vPortFree+0x62>
	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	60bb      	str	r3, [r7, #8]
}
 8005c0e:	bf00      	nop
 8005c10:	e7fe      	b.n	8005c10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	4b14      	ldr	r3, [pc, #80]	; (8005c68 <vPortFree+0xb8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d01e      	beq.n	8005c5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d11a      	bne.n	8005c5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <vPortFree+0xb8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	401a      	ands	r2, r3
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c38:	f7fe fc90 	bl	800455c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <vPortFree+0xbc>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4413      	add	r3, r2
 8005c46:	4a09      	ldr	r2, [pc, #36]	; (8005c6c <vPortFree+0xbc>)
 8005c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c4a:	6938      	ldr	r0, [r7, #16]
 8005c4c:	f000 f874 	bl	8005d38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c50:	4b07      	ldr	r3, [pc, #28]	; (8005c70 <vPortFree+0xc0>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3301      	adds	r3, #1
 8005c56:	4a06      	ldr	r2, [pc, #24]	; (8005c70 <vPortFree+0xc0>)
 8005c58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c5a:	f7fe fc8d 	bl	8004578 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c5e:	bf00      	nop
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20004f80 	.word	0x20004f80
 8005c6c:	20004f70 	.word	0x20004f70
 8005c70:	20004f7c 	.word	0x20004f7c

08005c74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c80:	4b27      	ldr	r3, [pc, #156]	; (8005d20 <prvHeapInit+0xac>)
 8005c82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00c      	beq.n	8005ca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3307      	adds	r3, #7
 8005c92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0307 	bic.w	r3, r3, #7
 8005c9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	4a1f      	ldr	r2, [pc, #124]	; (8005d20 <prvHeapInit+0xac>)
 8005ca4:	4413      	add	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cac:	4a1d      	ldr	r2, [pc, #116]	; (8005d24 <prvHeapInit+0xb0>)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cb2:	4b1c      	ldr	r3, [pc, #112]	; (8005d24 <prvHeapInit+0xb0>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cc0:	2208      	movs	r2, #8
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0307 	bic.w	r3, r3, #7
 8005cce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <prvHeapInit+0xb4>)
 8005cd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cd6:	4b14      	ldr	r3, [pc, #80]	; (8005d28 <prvHeapInit+0xb4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cde:	4b12      	ldr	r3, [pc, #72]	; (8005d28 <prvHeapInit+0xb4>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cf4:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <prvHeapInit+0xb4>)
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <prvHeapInit+0xb8>)
 8005d02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <prvHeapInit+0xbc>)
 8005d0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d0c:	4b09      	ldr	r3, [pc, #36]	; (8005d34 <prvHeapInit+0xc0>)
 8005d0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d12:	601a      	str	r2, [r3, #0]
}
 8005d14:	bf00      	nop
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	20001364 	.word	0x20001364
 8005d24:	20004f64 	.word	0x20004f64
 8005d28:	20004f6c 	.word	0x20004f6c
 8005d2c:	20004f74 	.word	0x20004f74
 8005d30:	20004f70 	.word	0x20004f70
 8005d34:	20004f80 	.word	0x20004f80

08005d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d40:	4b28      	ldr	r3, [pc, #160]	; (8005de4 <prvInsertBlockIntoFreeList+0xac>)
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	e002      	b.n	8005d4c <prvInsertBlockIntoFreeList+0x14>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d8f7      	bhi.n	8005d46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	4413      	add	r3, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d108      	bne.n	8005d7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	441a      	add	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	441a      	add	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d118      	bne.n	8005dc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d00d      	beq.n	8005db6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	441a      	add	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e008      	b.n	8005dc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005db6:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <prvInsertBlockIntoFreeList+0xb0>)
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	e003      	b.n	8005dc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d002      	beq.n	8005dd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dd6:	bf00      	nop
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20004f64 	.word	0x20004f64
 8005de8:	20004f6c 	.word	0x20004f6c

08005dec <__cvt>:
 8005dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df0:	ec55 4b10 	vmov	r4, r5, d0
 8005df4:	2d00      	cmp	r5, #0
 8005df6:	460e      	mov	r6, r1
 8005df8:	4619      	mov	r1, r3
 8005dfa:	462b      	mov	r3, r5
 8005dfc:	bfbb      	ittet	lt
 8005dfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e02:	461d      	movlt	r5, r3
 8005e04:	2300      	movge	r3, #0
 8005e06:	232d      	movlt	r3, #45	; 0x2d
 8005e08:	700b      	strb	r3, [r1, #0]
 8005e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e10:	4691      	mov	r9, r2
 8005e12:	f023 0820 	bic.w	r8, r3, #32
 8005e16:	bfbc      	itt	lt
 8005e18:	4622      	movlt	r2, r4
 8005e1a:	4614      	movlt	r4, r2
 8005e1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e20:	d005      	beq.n	8005e2e <__cvt+0x42>
 8005e22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e26:	d100      	bne.n	8005e2a <__cvt+0x3e>
 8005e28:	3601      	adds	r6, #1
 8005e2a:	2102      	movs	r1, #2
 8005e2c:	e000      	b.n	8005e30 <__cvt+0x44>
 8005e2e:	2103      	movs	r1, #3
 8005e30:	ab03      	add	r3, sp, #12
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	ab02      	add	r3, sp, #8
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	ec45 4b10 	vmov	d0, r4, r5
 8005e3c:	4653      	mov	r3, sl
 8005e3e:	4632      	mov	r2, r6
 8005e40:	f001 f8ce 	bl	8006fe0 <_dtoa_r>
 8005e44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e48:	4607      	mov	r7, r0
 8005e4a:	d102      	bne.n	8005e52 <__cvt+0x66>
 8005e4c:	f019 0f01 	tst.w	r9, #1
 8005e50:	d022      	beq.n	8005e98 <__cvt+0xac>
 8005e52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e56:	eb07 0906 	add.w	r9, r7, r6
 8005e5a:	d110      	bne.n	8005e7e <__cvt+0x92>
 8005e5c:	783b      	ldrb	r3, [r7, #0]
 8005e5e:	2b30      	cmp	r3, #48	; 0x30
 8005e60:	d10a      	bne.n	8005e78 <__cvt+0x8c>
 8005e62:	2200      	movs	r2, #0
 8005e64:	2300      	movs	r3, #0
 8005e66:	4620      	mov	r0, r4
 8005e68:	4629      	mov	r1, r5
 8005e6a:	f7fa fe35 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e6e:	b918      	cbnz	r0, 8005e78 <__cvt+0x8c>
 8005e70:	f1c6 0601 	rsb	r6, r6, #1
 8005e74:	f8ca 6000 	str.w	r6, [sl]
 8005e78:	f8da 3000 	ldr.w	r3, [sl]
 8005e7c:	4499      	add	r9, r3
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2300      	movs	r3, #0
 8005e82:	4620      	mov	r0, r4
 8005e84:	4629      	mov	r1, r5
 8005e86:	f7fa fe27 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e8a:	b108      	cbz	r0, 8005e90 <__cvt+0xa4>
 8005e8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e90:	2230      	movs	r2, #48	; 0x30
 8005e92:	9b03      	ldr	r3, [sp, #12]
 8005e94:	454b      	cmp	r3, r9
 8005e96:	d307      	bcc.n	8005ea8 <__cvt+0xbc>
 8005e98:	9b03      	ldr	r3, [sp, #12]
 8005e9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e9c:	1bdb      	subs	r3, r3, r7
 8005e9e:	4638      	mov	r0, r7
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	b004      	add	sp, #16
 8005ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea8:	1c59      	adds	r1, r3, #1
 8005eaa:	9103      	str	r1, [sp, #12]
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e7f0      	b.n	8005e92 <__cvt+0xa6>

08005eb0 <__exponent>:
 8005eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2900      	cmp	r1, #0
 8005eb6:	bfb8      	it	lt
 8005eb8:	4249      	neglt	r1, r1
 8005eba:	f803 2b02 	strb.w	r2, [r3], #2
 8005ebe:	bfb4      	ite	lt
 8005ec0:	222d      	movlt	r2, #45	; 0x2d
 8005ec2:	222b      	movge	r2, #43	; 0x2b
 8005ec4:	2909      	cmp	r1, #9
 8005ec6:	7042      	strb	r2, [r0, #1]
 8005ec8:	dd2a      	ble.n	8005f20 <__exponent+0x70>
 8005eca:	f10d 0207 	add.w	r2, sp, #7
 8005ece:	4617      	mov	r7, r2
 8005ed0:	260a      	movs	r6, #10
 8005ed2:	4694      	mov	ip, r2
 8005ed4:	fb91 f5f6 	sdiv	r5, r1, r6
 8005ed8:	fb06 1415 	mls	r4, r6, r5, r1
 8005edc:	3430      	adds	r4, #48	; 0x30
 8005ede:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	2c63      	cmp	r4, #99	; 0x63
 8005ee6:	f102 32ff 	add.w	r2, r2, #4294967295
 8005eea:	4629      	mov	r1, r5
 8005eec:	dcf1      	bgt.n	8005ed2 <__exponent+0x22>
 8005eee:	3130      	adds	r1, #48	; 0x30
 8005ef0:	f1ac 0402 	sub.w	r4, ip, #2
 8005ef4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005ef8:	1c41      	adds	r1, r0, #1
 8005efa:	4622      	mov	r2, r4
 8005efc:	42ba      	cmp	r2, r7
 8005efe:	d30a      	bcc.n	8005f16 <__exponent+0x66>
 8005f00:	f10d 0209 	add.w	r2, sp, #9
 8005f04:	eba2 020c 	sub.w	r2, r2, ip
 8005f08:	42bc      	cmp	r4, r7
 8005f0a:	bf88      	it	hi
 8005f0c:	2200      	movhi	r2, #0
 8005f0e:	4413      	add	r3, r2
 8005f10:	1a18      	subs	r0, r3, r0
 8005f12:	b003      	add	sp, #12
 8005f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f16:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005f1a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005f1e:	e7ed      	b.n	8005efc <__exponent+0x4c>
 8005f20:	2330      	movs	r3, #48	; 0x30
 8005f22:	3130      	adds	r1, #48	; 0x30
 8005f24:	7083      	strb	r3, [r0, #2]
 8005f26:	70c1      	strb	r1, [r0, #3]
 8005f28:	1d03      	adds	r3, r0, #4
 8005f2a:	e7f1      	b.n	8005f10 <__exponent+0x60>

08005f2c <_printf_float>:
 8005f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f30:	ed2d 8b02 	vpush	{d8}
 8005f34:	b08d      	sub	sp, #52	; 0x34
 8005f36:	460c      	mov	r4, r1
 8005f38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f3c:	4616      	mov	r6, r2
 8005f3e:	461f      	mov	r7, r3
 8005f40:	4605      	mov	r5, r0
 8005f42:	f000 ff37 	bl	8006db4 <_localeconv_r>
 8005f46:	f8d0 a000 	ldr.w	sl, [r0]
 8005f4a:	4650      	mov	r0, sl
 8005f4c:	f7fa f998 	bl	8000280 <strlen>
 8005f50:	2300      	movs	r3, #0
 8005f52:	930a      	str	r3, [sp, #40]	; 0x28
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	9305      	str	r3, [sp, #20]
 8005f58:	f8d8 3000 	ldr.w	r3, [r8]
 8005f5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f60:	3307      	adds	r3, #7
 8005f62:	f023 0307 	bic.w	r3, r3, #7
 8005f66:	f103 0208 	add.w	r2, r3, #8
 8005f6a:	f8c8 2000 	str.w	r2, [r8]
 8005f6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f76:	9307      	str	r3, [sp, #28]
 8005f78:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f7c:	ee08 0a10 	vmov	s16, r0
 8005f80:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005f84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f88:	4b9e      	ldr	r3, [pc, #632]	; (8006204 <_printf_float+0x2d8>)
 8005f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8e:	f7fa fdd5 	bl	8000b3c <__aeabi_dcmpun>
 8005f92:	bb88      	cbnz	r0, 8005ff8 <_printf_float+0xcc>
 8005f94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f98:	4b9a      	ldr	r3, [pc, #616]	; (8006204 <_printf_float+0x2d8>)
 8005f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f9e:	f7fa fdaf 	bl	8000b00 <__aeabi_dcmple>
 8005fa2:	bb48      	cbnz	r0, 8005ff8 <_printf_float+0xcc>
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	4640      	mov	r0, r8
 8005faa:	4649      	mov	r1, r9
 8005fac:	f7fa fd9e 	bl	8000aec <__aeabi_dcmplt>
 8005fb0:	b110      	cbz	r0, 8005fb8 <_printf_float+0x8c>
 8005fb2:	232d      	movs	r3, #45	; 0x2d
 8005fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fb8:	4a93      	ldr	r2, [pc, #588]	; (8006208 <_printf_float+0x2dc>)
 8005fba:	4b94      	ldr	r3, [pc, #592]	; (800620c <_printf_float+0x2e0>)
 8005fbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005fc0:	bf94      	ite	ls
 8005fc2:	4690      	movls	r8, r2
 8005fc4:	4698      	movhi	r8, r3
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	6123      	str	r3, [r4, #16]
 8005fca:	9b05      	ldr	r3, [sp, #20]
 8005fcc:	f023 0304 	bic.w	r3, r3, #4
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	f04f 0900 	mov.w	r9, #0
 8005fd6:	9700      	str	r7, [sp, #0]
 8005fd8:	4633      	mov	r3, r6
 8005fda:	aa0b      	add	r2, sp, #44	; 0x2c
 8005fdc:	4621      	mov	r1, r4
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 f9da 	bl	8006398 <_printf_common>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	f040 8090 	bne.w	800610a <_printf_float+0x1de>
 8005fea:	f04f 30ff 	mov.w	r0, #4294967295
 8005fee:	b00d      	add	sp, #52	; 0x34
 8005ff0:	ecbd 8b02 	vpop	{d8}
 8005ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	4649      	mov	r1, r9
 8006000:	f7fa fd9c 	bl	8000b3c <__aeabi_dcmpun>
 8006004:	b140      	cbz	r0, 8006018 <_printf_float+0xec>
 8006006:	464b      	mov	r3, r9
 8006008:	2b00      	cmp	r3, #0
 800600a:	bfbc      	itt	lt
 800600c:	232d      	movlt	r3, #45	; 0x2d
 800600e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006012:	4a7f      	ldr	r2, [pc, #508]	; (8006210 <_printf_float+0x2e4>)
 8006014:	4b7f      	ldr	r3, [pc, #508]	; (8006214 <_printf_float+0x2e8>)
 8006016:	e7d1      	b.n	8005fbc <_printf_float+0x90>
 8006018:	6863      	ldr	r3, [r4, #4]
 800601a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800601e:	9206      	str	r2, [sp, #24]
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	d13f      	bne.n	80060a4 <_printf_float+0x178>
 8006024:	2306      	movs	r3, #6
 8006026:	6063      	str	r3, [r4, #4]
 8006028:	9b05      	ldr	r3, [sp, #20]
 800602a:	6861      	ldr	r1, [r4, #4]
 800602c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006030:	2300      	movs	r3, #0
 8006032:	9303      	str	r3, [sp, #12]
 8006034:	ab0a      	add	r3, sp, #40	; 0x28
 8006036:	e9cd b301 	strd	fp, r3, [sp, #4]
 800603a:	ab09      	add	r3, sp, #36	; 0x24
 800603c:	ec49 8b10 	vmov	d0, r8, r9
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	6022      	str	r2, [r4, #0]
 8006044:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006048:	4628      	mov	r0, r5
 800604a:	f7ff fecf 	bl	8005dec <__cvt>
 800604e:	9b06      	ldr	r3, [sp, #24]
 8006050:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006052:	2b47      	cmp	r3, #71	; 0x47
 8006054:	4680      	mov	r8, r0
 8006056:	d108      	bne.n	800606a <_printf_float+0x13e>
 8006058:	1cc8      	adds	r0, r1, #3
 800605a:	db02      	blt.n	8006062 <_printf_float+0x136>
 800605c:	6863      	ldr	r3, [r4, #4]
 800605e:	4299      	cmp	r1, r3
 8006060:	dd41      	ble.n	80060e6 <_printf_float+0x1ba>
 8006062:	f1ab 0302 	sub.w	r3, fp, #2
 8006066:	fa5f fb83 	uxtb.w	fp, r3
 800606a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800606e:	d820      	bhi.n	80060b2 <_printf_float+0x186>
 8006070:	3901      	subs	r1, #1
 8006072:	465a      	mov	r2, fp
 8006074:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006078:	9109      	str	r1, [sp, #36]	; 0x24
 800607a:	f7ff ff19 	bl	8005eb0 <__exponent>
 800607e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006080:	1813      	adds	r3, r2, r0
 8006082:	2a01      	cmp	r2, #1
 8006084:	4681      	mov	r9, r0
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	dc02      	bgt.n	8006090 <_printf_float+0x164>
 800608a:	6822      	ldr	r2, [r4, #0]
 800608c:	07d2      	lsls	r2, r2, #31
 800608e:	d501      	bpl.n	8006094 <_printf_float+0x168>
 8006090:	3301      	adds	r3, #1
 8006092:	6123      	str	r3, [r4, #16]
 8006094:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006098:	2b00      	cmp	r3, #0
 800609a:	d09c      	beq.n	8005fd6 <_printf_float+0xaa>
 800609c:	232d      	movs	r3, #45	; 0x2d
 800609e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060a2:	e798      	b.n	8005fd6 <_printf_float+0xaa>
 80060a4:	9a06      	ldr	r2, [sp, #24]
 80060a6:	2a47      	cmp	r2, #71	; 0x47
 80060a8:	d1be      	bne.n	8006028 <_printf_float+0xfc>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1bc      	bne.n	8006028 <_printf_float+0xfc>
 80060ae:	2301      	movs	r3, #1
 80060b0:	e7b9      	b.n	8006026 <_printf_float+0xfa>
 80060b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80060b6:	d118      	bne.n	80060ea <_printf_float+0x1be>
 80060b8:	2900      	cmp	r1, #0
 80060ba:	6863      	ldr	r3, [r4, #4]
 80060bc:	dd0b      	ble.n	80060d6 <_printf_float+0x1aa>
 80060be:	6121      	str	r1, [r4, #16]
 80060c0:	b913      	cbnz	r3, 80060c8 <_printf_float+0x19c>
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	07d0      	lsls	r0, r2, #31
 80060c6:	d502      	bpl.n	80060ce <_printf_float+0x1a2>
 80060c8:	3301      	adds	r3, #1
 80060ca:	440b      	add	r3, r1
 80060cc:	6123      	str	r3, [r4, #16]
 80060ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80060d0:	f04f 0900 	mov.w	r9, #0
 80060d4:	e7de      	b.n	8006094 <_printf_float+0x168>
 80060d6:	b913      	cbnz	r3, 80060de <_printf_float+0x1b2>
 80060d8:	6822      	ldr	r2, [r4, #0]
 80060da:	07d2      	lsls	r2, r2, #31
 80060dc:	d501      	bpl.n	80060e2 <_printf_float+0x1b6>
 80060de:	3302      	adds	r3, #2
 80060e0:	e7f4      	b.n	80060cc <_printf_float+0x1a0>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e7f2      	b.n	80060cc <_printf_float+0x1a0>
 80060e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80060ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ec:	4299      	cmp	r1, r3
 80060ee:	db05      	blt.n	80060fc <_printf_float+0x1d0>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	6121      	str	r1, [r4, #16]
 80060f4:	07d8      	lsls	r0, r3, #31
 80060f6:	d5ea      	bpl.n	80060ce <_printf_float+0x1a2>
 80060f8:	1c4b      	adds	r3, r1, #1
 80060fa:	e7e7      	b.n	80060cc <_printf_float+0x1a0>
 80060fc:	2900      	cmp	r1, #0
 80060fe:	bfd4      	ite	le
 8006100:	f1c1 0202 	rsble	r2, r1, #2
 8006104:	2201      	movgt	r2, #1
 8006106:	4413      	add	r3, r2
 8006108:	e7e0      	b.n	80060cc <_printf_float+0x1a0>
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	055a      	lsls	r2, r3, #21
 800610e:	d407      	bmi.n	8006120 <_printf_float+0x1f4>
 8006110:	6923      	ldr	r3, [r4, #16]
 8006112:	4642      	mov	r2, r8
 8006114:	4631      	mov	r1, r6
 8006116:	4628      	mov	r0, r5
 8006118:	47b8      	blx	r7
 800611a:	3001      	adds	r0, #1
 800611c:	d12c      	bne.n	8006178 <_printf_float+0x24c>
 800611e:	e764      	b.n	8005fea <_printf_float+0xbe>
 8006120:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006124:	f240 80e0 	bls.w	80062e8 <_printf_float+0x3bc>
 8006128:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800612c:	2200      	movs	r2, #0
 800612e:	2300      	movs	r3, #0
 8006130:	f7fa fcd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006134:	2800      	cmp	r0, #0
 8006136:	d034      	beq.n	80061a2 <_printf_float+0x276>
 8006138:	4a37      	ldr	r2, [pc, #220]	; (8006218 <_printf_float+0x2ec>)
 800613a:	2301      	movs	r3, #1
 800613c:	4631      	mov	r1, r6
 800613e:	4628      	mov	r0, r5
 8006140:	47b8      	blx	r7
 8006142:	3001      	adds	r0, #1
 8006144:	f43f af51 	beq.w	8005fea <_printf_float+0xbe>
 8006148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800614c:	429a      	cmp	r2, r3
 800614e:	db02      	blt.n	8006156 <_printf_float+0x22a>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	07d8      	lsls	r0, r3, #31
 8006154:	d510      	bpl.n	8006178 <_printf_float+0x24c>
 8006156:	ee18 3a10 	vmov	r3, s16
 800615a:	4652      	mov	r2, sl
 800615c:	4631      	mov	r1, r6
 800615e:	4628      	mov	r0, r5
 8006160:	47b8      	blx	r7
 8006162:	3001      	adds	r0, #1
 8006164:	f43f af41 	beq.w	8005fea <_printf_float+0xbe>
 8006168:	f04f 0800 	mov.w	r8, #0
 800616c:	f104 091a 	add.w	r9, r4, #26
 8006170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006172:	3b01      	subs	r3, #1
 8006174:	4543      	cmp	r3, r8
 8006176:	dc09      	bgt.n	800618c <_printf_float+0x260>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	079b      	lsls	r3, r3, #30
 800617c:	f100 8107 	bmi.w	800638e <_printf_float+0x462>
 8006180:	68e0      	ldr	r0, [r4, #12]
 8006182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006184:	4298      	cmp	r0, r3
 8006186:	bfb8      	it	lt
 8006188:	4618      	movlt	r0, r3
 800618a:	e730      	b.n	8005fee <_printf_float+0xc2>
 800618c:	2301      	movs	r3, #1
 800618e:	464a      	mov	r2, r9
 8006190:	4631      	mov	r1, r6
 8006192:	4628      	mov	r0, r5
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	f43f af27 	beq.w	8005fea <_printf_float+0xbe>
 800619c:	f108 0801 	add.w	r8, r8, #1
 80061a0:	e7e6      	b.n	8006170 <_printf_float+0x244>
 80061a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	dc39      	bgt.n	800621c <_printf_float+0x2f0>
 80061a8:	4a1b      	ldr	r2, [pc, #108]	; (8006218 <_printf_float+0x2ec>)
 80061aa:	2301      	movs	r3, #1
 80061ac:	4631      	mov	r1, r6
 80061ae:	4628      	mov	r0, r5
 80061b0:	47b8      	blx	r7
 80061b2:	3001      	adds	r0, #1
 80061b4:	f43f af19 	beq.w	8005fea <_printf_float+0xbe>
 80061b8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80061bc:	4313      	orrs	r3, r2
 80061be:	d102      	bne.n	80061c6 <_printf_float+0x29a>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	07d9      	lsls	r1, r3, #31
 80061c4:	d5d8      	bpl.n	8006178 <_printf_float+0x24c>
 80061c6:	ee18 3a10 	vmov	r3, s16
 80061ca:	4652      	mov	r2, sl
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	f43f af09 	beq.w	8005fea <_printf_float+0xbe>
 80061d8:	f04f 0900 	mov.w	r9, #0
 80061dc:	f104 0a1a 	add.w	sl, r4, #26
 80061e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e2:	425b      	negs	r3, r3
 80061e4:	454b      	cmp	r3, r9
 80061e6:	dc01      	bgt.n	80061ec <_printf_float+0x2c0>
 80061e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ea:	e792      	b.n	8006112 <_printf_float+0x1e6>
 80061ec:	2301      	movs	r3, #1
 80061ee:	4652      	mov	r2, sl
 80061f0:	4631      	mov	r1, r6
 80061f2:	4628      	mov	r0, r5
 80061f4:	47b8      	blx	r7
 80061f6:	3001      	adds	r0, #1
 80061f8:	f43f aef7 	beq.w	8005fea <_printf_float+0xbe>
 80061fc:	f109 0901 	add.w	r9, r9, #1
 8006200:	e7ee      	b.n	80061e0 <_printf_float+0x2b4>
 8006202:	bf00      	nop
 8006204:	7fefffff 	.word	0x7fefffff
 8006208:	0800afac 	.word	0x0800afac
 800620c:	0800afb0 	.word	0x0800afb0
 8006210:	0800afb4 	.word	0x0800afb4
 8006214:	0800afb8 	.word	0x0800afb8
 8006218:	0800b348 	.word	0x0800b348
 800621c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800621e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006220:	429a      	cmp	r2, r3
 8006222:	bfa8      	it	ge
 8006224:	461a      	movge	r2, r3
 8006226:	2a00      	cmp	r2, #0
 8006228:	4691      	mov	r9, r2
 800622a:	dc37      	bgt.n	800629c <_printf_float+0x370>
 800622c:	f04f 0b00 	mov.w	fp, #0
 8006230:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006234:	f104 021a 	add.w	r2, r4, #26
 8006238:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800623a:	9305      	str	r3, [sp, #20]
 800623c:	eba3 0309 	sub.w	r3, r3, r9
 8006240:	455b      	cmp	r3, fp
 8006242:	dc33      	bgt.n	80062ac <_printf_float+0x380>
 8006244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006248:	429a      	cmp	r2, r3
 800624a:	db3b      	blt.n	80062c4 <_printf_float+0x398>
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	07da      	lsls	r2, r3, #31
 8006250:	d438      	bmi.n	80062c4 <_printf_float+0x398>
 8006252:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006256:	eba2 0903 	sub.w	r9, r2, r3
 800625a:	9b05      	ldr	r3, [sp, #20]
 800625c:	1ad2      	subs	r2, r2, r3
 800625e:	4591      	cmp	r9, r2
 8006260:	bfa8      	it	ge
 8006262:	4691      	movge	r9, r2
 8006264:	f1b9 0f00 	cmp.w	r9, #0
 8006268:	dc35      	bgt.n	80062d6 <_printf_float+0x3aa>
 800626a:	f04f 0800 	mov.w	r8, #0
 800626e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006272:	f104 0a1a 	add.w	sl, r4, #26
 8006276:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800627a:	1a9b      	subs	r3, r3, r2
 800627c:	eba3 0309 	sub.w	r3, r3, r9
 8006280:	4543      	cmp	r3, r8
 8006282:	f77f af79 	ble.w	8006178 <_printf_float+0x24c>
 8006286:	2301      	movs	r3, #1
 8006288:	4652      	mov	r2, sl
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	47b8      	blx	r7
 8006290:	3001      	adds	r0, #1
 8006292:	f43f aeaa 	beq.w	8005fea <_printf_float+0xbe>
 8006296:	f108 0801 	add.w	r8, r8, #1
 800629a:	e7ec      	b.n	8006276 <_printf_float+0x34a>
 800629c:	4613      	mov	r3, r2
 800629e:	4631      	mov	r1, r6
 80062a0:	4642      	mov	r2, r8
 80062a2:	4628      	mov	r0, r5
 80062a4:	47b8      	blx	r7
 80062a6:	3001      	adds	r0, #1
 80062a8:	d1c0      	bne.n	800622c <_printf_float+0x300>
 80062aa:	e69e      	b.n	8005fea <_printf_float+0xbe>
 80062ac:	2301      	movs	r3, #1
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	9205      	str	r2, [sp, #20]
 80062b4:	47b8      	blx	r7
 80062b6:	3001      	adds	r0, #1
 80062b8:	f43f ae97 	beq.w	8005fea <_printf_float+0xbe>
 80062bc:	9a05      	ldr	r2, [sp, #20]
 80062be:	f10b 0b01 	add.w	fp, fp, #1
 80062c2:	e7b9      	b.n	8006238 <_printf_float+0x30c>
 80062c4:	ee18 3a10 	vmov	r3, s16
 80062c8:	4652      	mov	r2, sl
 80062ca:	4631      	mov	r1, r6
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	d1be      	bne.n	8006252 <_printf_float+0x326>
 80062d4:	e689      	b.n	8005fea <_printf_float+0xbe>
 80062d6:	9a05      	ldr	r2, [sp, #20]
 80062d8:	464b      	mov	r3, r9
 80062da:	4442      	add	r2, r8
 80062dc:	4631      	mov	r1, r6
 80062de:	4628      	mov	r0, r5
 80062e0:	47b8      	blx	r7
 80062e2:	3001      	adds	r0, #1
 80062e4:	d1c1      	bne.n	800626a <_printf_float+0x33e>
 80062e6:	e680      	b.n	8005fea <_printf_float+0xbe>
 80062e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062ea:	2a01      	cmp	r2, #1
 80062ec:	dc01      	bgt.n	80062f2 <_printf_float+0x3c6>
 80062ee:	07db      	lsls	r3, r3, #31
 80062f0:	d53a      	bpl.n	8006368 <_printf_float+0x43c>
 80062f2:	2301      	movs	r3, #1
 80062f4:	4642      	mov	r2, r8
 80062f6:	4631      	mov	r1, r6
 80062f8:	4628      	mov	r0, r5
 80062fa:	47b8      	blx	r7
 80062fc:	3001      	adds	r0, #1
 80062fe:	f43f ae74 	beq.w	8005fea <_printf_float+0xbe>
 8006302:	ee18 3a10 	vmov	r3, s16
 8006306:	4652      	mov	r2, sl
 8006308:	4631      	mov	r1, r6
 800630a:	4628      	mov	r0, r5
 800630c:	47b8      	blx	r7
 800630e:	3001      	adds	r0, #1
 8006310:	f43f ae6b 	beq.w	8005fea <_printf_float+0xbe>
 8006314:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006318:	2200      	movs	r2, #0
 800631a:	2300      	movs	r3, #0
 800631c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006320:	f7fa fbda 	bl	8000ad8 <__aeabi_dcmpeq>
 8006324:	b9d8      	cbnz	r0, 800635e <_printf_float+0x432>
 8006326:	f10a 33ff 	add.w	r3, sl, #4294967295
 800632a:	f108 0201 	add.w	r2, r8, #1
 800632e:	4631      	mov	r1, r6
 8006330:	4628      	mov	r0, r5
 8006332:	47b8      	blx	r7
 8006334:	3001      	adds	r0, #1
 8006336:	d10e      	bne.n	8006356 <_printf_float+0x42a>
 8006338:	e657      	b.n	8005fea <_printf_float+0xbe>
 800633a:	2301      	movs	r3, #1
 800633c:	4652      	mov	r2, sl
 800633e:	4631      	mov	r1, r6
 8006340:	4628      	mov	r0, r5
 8006342:	47b8      	blx	r7
 8006344:	3001      	adds	r0, #1
 8006346:	f43f ae50 	beq.w	8005fea <_printf_float+0xbe>
 800634a:	f108 0801 	add.w	r8, r8, #1
 800634e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006350:	3b01      	subs	r3, #1
 8006352:	4543      	cmp	r3, r8
 8006354:	dcf1      	bgt.n	800633a <_printf_float+0x40e>
 8006356:	464b      	mov	r3, r9
 8006358:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800635c:	e6da      	b.n	8006114 <_printf_float+0x1e8>
 800635e:	f04f 0800 	mov.w	r8, #0
 8006362:	f104 0a1a 	add.w	sl, r4, #26
 8006366:	e7f2      	b.n	800634e <_printf_float+0x422>
 8006368:	2301      	movs	r3, #1
 800636a:	4642      	mov	r2, r8
 800636c:	e7df      	b.n	800632e <_printf_float+0x402>
 800636e:	2301      	movs	r3, #1
 8006370:	464a      	mov	r2, r9
 8006372:	4631      	mov	r1, r6
 8006374:	4628      	mov	r0, r5
 8006376:	47b8      	blx	r7
 8006378:	3001      	adds	r0, #1
 800637a:	f43f ae36 	beq.w	8005fea <_printf_float+0xbe>
 800637e:	f108 0801 	add.w	r8, r8, #1
 8006382:	68e3      	ldr	r3, [r4, #12]
 8006384:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006386:	1a5b      	subs	r3, r3, r1
 8006388:	4543      	cmp	r3, r8
 800638a:	dcf0      	bgt.n	800636e <_printf_float+0x442>
 800638c:	e6f8      	b.n	8006180 <_printf_float+0x254>
 800638e:	f04f 0800 	mov.w	r8, #0
 8006392:	f104 0919 	add.w	r9, r4, #25
 8006396:	e7f4      	b.n	8006382 <_printf_float+0x456>

08006398 <_printf_common>:
 8006398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800639c:	4616      	mov	r6, r2
 800639e:	4699      	mov	r9, r3
 80063a0:	688a      	ldr	r2, [r1, #8]
 80063a2:	690b      	ldr	r3, [r1, #16]
 80063a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063a8:	4293      	cmp	r3, r2
 80063aa:	bfb8      	it	lt
 80063ac:	4613      	movlt	r3, r2
 80063ae:	6033      	str	r3, [r6, #0]
 80063b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063b4:	4607      	mov	r7, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	b10a      	cbz	r2, 80063be <_printf_common+0x26>
 80063ba:	3301      	adds	r3, #1
 80063bc:	6033      	str	r3, [r6, #0]
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	0699      	lsls	r1, r3, #26
 80063c2:	bf42      	ittt	mi
 80063c4:	6833      	ldrmi	r3, [r6, #0]
 80063c6:	3302      	addmi	r3, #2
 80063c8:	6033      	strmi	r3, [r6, #0]
 80063ca:	6825      	ldr	r5, [r4, #0]
 80063cc:	f015 0506 	ands.w	r5, r5, #6
 80063d0:	d106      	bne.n	80063e0 <_printf_common+0x48>
 80063d2:	f104 0a19 	add.w	sl, r4, #25
 80063d6:	68e3      	ldr	r3, [r4, #12]
 80063d8:	6832      	ldr	r2, [r6, #0]
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	42ab      	cmp	r3, r5
 80063de:	dc26      	bgt.n	800642e <_printf_common+0x96>
 80063e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063e4:	1e13      	subs	r3, r2, #0
 80063e6:	6822      	ldr	r2, [r4, #0]
 80063e8:	bf18      	it	ne
 80063ea:	2301      	movne	r3, #1
 80063ec:	0692      	lsls	r2, r2, #26
 80063ee:	d42b      	bmi.n	8006448 <_printf_common+0xb0>
 80063f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063f4:	4649      	mov	r1, r9
 80063f6:	4638      	mov	r0, r7
 80063f8:	47c0      	blx	r8
 80063fa:	3001      	adds	r0, #1
 80063fc:	d01e      	beq.n	800643c <_printf_common+0xa4>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	6922      	ldr	r2, [r4, #16]
 8006402:	f003 0306 	and.w	r3, r3, #6
 8006406:	2b04      	cmp	r3, #4
 8006408:	bf02      	ittt	eq
 800640a:	68e5      	ldreq	r5, [r4, #12]
 800640c:	6833      	ldreq	r3, [r6, #0]
 800640e:	1aed      	subeq	r5, r5, r3
 8006410:	68a3      	ldr	r3, [r4, #8]
 8006412:	bf0c      	ite	eq
 8006414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006418:	2500      	movne	r5, #0
 800641a:	4293      	cmp	r3, r2
 800641c:	bfc4      	itt	gt
 800641e:	1a9b      	subgt	r3, r3, r2
 8006420:	18ed      	addgt	r5, r5, r3
 8006422:	2600      	movs	r6, #0
 8006424:	341a      	adds	r4, #26
 8006426:	42b5      	cmp	r5, r6
 8006428:	d11a      	bne.n	8006460 <_printf_common+0xc8>
 800642a:	2000      	movs	r0, #0
 800642c:	e008      	b.n	8006440 <_printf_common+0xa8>
 800642e:	2301      	movs	r3, #1
 8006430:	4652      	mov	r2, sl
 8006432:	4649      	mov	r1, r9
 8006434:	4638      	mov	r0, r7
 8006436:	47c0      	blx	r8
 8006438:	3001      	adds	r0, #1
 800643a:	d103      	bne.n	8006444 <_printf_common+0xac>
 800643c:	f04f 30ff 	mov.w	r0, #4294967295
 8006440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006444:	3501      	adds	r5, #1
 8006446:	e7c6      	b.n	80063d6 <_printf_common+0x3e>
 8006448:	18e1      	adds	r1, r4, r3
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	2030      	movs	r0, #48	; 0x30
 800644e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006452:	4422      	add	r2, r4
 8006454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800645c:	3302      	adds	r3, #2
 800645e:	e7c7      	b.n	80063f0 <_printf_common+0x58>
 8006460:	2301      	movs	r3, #1
 8006462:	4622      	mov	r2, r4
 8006464:	4649      	mov	r1, r9
 8006466:	4638      	mov	r0, r7
 8006468:	47c0      	blx	r8
 800646a:	3001      	adds	r0, #1
 800646c:	d0e6      	beq.n	800643c <_printf_common+0xa4>
 800646e:	3601      	adds	r6, #1
 8006470:	e7d9      	b.n	8006426 <_printf_common+0x8e>
	...

08006474 <_printf_i>:
 8006474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006478:	7e0f      	ldrb	r7, [r1, #24]
 800647a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800647c:	2f78      	cmp	r7, #120	; 0x78
 800647e:	4691      	mov	r9, r2
 8006480:	4680      	mov	r8, r0
 8006482:	460c      	mov	r4, r1
 8006484:	469a      	mov	sl, r3
 8006486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800648a:	d807      	bhi.n	800649c <_printf_i+0x28>
 800648c:	2f62      	cmp	r7, #98	; 0x62
 800648e:	d80a      	bhi.n	80064a6 <_printf_i+0x32>
 8006490:	2f00      	cmp	r7, #0
 8006492:	f000 80d4 	beq.w	800663e <_printf_i+0x1ca>
 8006496:	2f58      	cmp	r7, #88	; 0x58
 8006498:	f000 80c0 	beq.w	800661c <_printf_i+0x1a8>
 800649c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064a4:	e03a      	b.n	800651c <_printf_i+0xa8>
 80064a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064aa:	2b15      	cmp	r3, #21
 80064ac:	d8f6      	bhi.n	800649c <_printf_i+0x28>
 80064ae:	a101      	add	r1, pc, #4	; (adr r1, 80064b4 <_printf_i+0x40>)
 80064b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064b4:	0800650d 	.word	0x0800650d
 80064b8:	08006521 	.word	0x08006521
 80064bc:	0800649d 	.word	0x0800649d
 80064c0:	0800649d 	.word	0x0800649d
 80064c4:	0800649d 	.word	0x0800649d
 80064c8:	0800649d 	.word	0x0800649d
 80064cc:	08006521 	.word	0x08006521
 80064d0:	0800649d 	.word	0x0800649d
 80064d4:	0800649d 	.word	0x0800649d
 80064d8:	0800649d 	.word	0x0800649d
 80064dc:	0800649d 	.word	0x0800649d
 80064e0:	08006625 	.word	0x08006625
 80064e4:	0800654d 	.word	0x0800654d
 80064e8:	080065df 	.word	0x080065df
 80064ec:	0800649d 	.word	0x0800649d
 80064f0:	0800649d 	.word	0x0800649d
 80064f4:	08006647 	.word	0x08006647
 80064f8:	0800649d 	.word	0x0800649d
 80064fc:	0800654d 	.word	0x0800654d
 8006500:	0800649d 	.word	0x0800649d
 8006504:	0800649d 	.word	0x0800649d
 8006508:	080065e7 	.word	0x080065e7
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	1d1a      	adds	r2, r3, #4
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	602a      	str	r2, [r5, #0]
 8006514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800651c:	2301      	movs	r3, #1
 800651e:	e09f      	b.n	8006660 <_printf_i+0x1ec>
 8006520:	6820      	ldr	r0, [r4, #0]
 8006522:	682b      	ldr	r3, [r5, #0]
 8006524:	0607      	lsls	r7, r0, #24
 8006526:	f103 0104 	add.w	r1, r3, #4
 800652a:	6029      	str	r1, [r5, #0]
 800652c:	d501      	bpl.n	8006532 <_printf_i+0xbe>
 800652e:	681e      	ldr	r6, [r3, #0]
 8006530:	e003      	b.n	800653a <_printf_i+0xc6>
 8006532:	0646      	lsls	r6, r0, #25
 8006534:	d5fb      	bpl.n	800652e <_printf_i+0xba>
 8006536:	f9b3 6000 	ldrsh.w	r6, [r3]
 800653a:	2e00      	cmp	r6, #0
 800653c:	da03      	bge.n	8006546 <_printf_i+0xd2>
 800653e:	232d      	movs	r3, #45	; 0x2d
 8006540:	4276      	negs	r6, r6
 8006542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006546:	485a      	ldr	r0, [pc, #360]	; (80066b0 <_printf_i+0x23c>)
 8006548:	230a      	movs	r3, #10
 800654a:	e012      	b.n	8006572 <_printf_i+0xfe>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	6820      	ldr	r0, [r4, #0]
 8006550:	1d19      	adds	r1, r3, #4
 8006552:	6029      	str	r1, [r5, #0]
 8006554:	0605      	lsls	r5, r0, #24
 8006556:	d501      	bpl.n	800655c <_printf_i+0xe8>
 8006558:	681e      	ldr	r6, [r3, #0]
 800655a:	e002      	b.n	8006562 <_printf_i+0xee>
 800655c:	0641      	lsls	r1, r0, #25
 800655e:	d5fb      	bpl.n	8006558 <_printf_i+0xe4>
 8006560:	881e      	ldrh	r6, [r3, #0]
 8006562:	4853      	ldr	r0, [pc, #332]	; (80066b0 <_printf_i+0x23c>)
 8006564:	2f6f      	cmp	r7, #111	; 0x6f
 8006566:	bf0c      	ite	eq
 8006568:	2308      	moveq	r3, #8
 800656a:	230a      	movne	r3, #10
 800656c:	2100      	movs	r1, #0
 800656e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006572:	6865      	ldr	r5, [r4, #4]
 8006574:	60a5      	str	r5, [r4, #8]
 8006576:	2d00      	cmp	r5, #0
 8006578:	bfa2      	ittt	ge
 800657a:	6821      	ldrge	r1, [r4, #0]
 800657c:	f021 0104 	bicge.w	r1, r1, #4
 8006580:	6021      	strge	r1, [r4, #0]
 8006582:	b90e      	cbnz	r6, 8006588 <_printf_i+0x114>
 8006584:	2d00      	cmp	r5, #0
 8006586:	d04b      	beq.n	8006620 <_printf_i+0x1ac>
 8006588:	4615      	mov	r5, r2
 800658a:	fbb6 f1f3 	udiv	r1, r6, r3
 800658e:	fb03 6711 	mls	r7, r3, r1, r6
 8006592:	5dc7      	ldrb	r7, [r0, r7]
 8006594:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006598:	4637      	mov	r7, r6
 800659a:	42bb      	cmp	r3, r7
 800659c:	460e      	mov	r6, r1
 800659e:	d9f4      	bls.n	800658a <_printf_i+0x116>
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d10b      	bne.n	80065bc <_printf_i+0x148>
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	07de      	lsls	r6, r3, #31
 80065a8:	d508      	bpl.n	80065bc <_printf_i+0x148>
 80065aa:	6923      	ldr	r3, [r4, #16]
 80065ac:	6861      	ldr	r1, [r4, #4]
 80065ae:	4299      	cmp	r1, r3
 80065b0:	bfde      	ittt	le
 80065b2:	2330      	movle	r3, #48	; 0x30
 80065b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065bc:	1b52      	subs	r2, r2, r5
 80065be:	6122      	str	r2, [r4, #16]
 80065c0:	f8cd a000 	str.w	sl, [sp]
 80065c4:	464b      	mov	r3, r9
 80065c6:	aa03      	add	r2, sp, #12
 80065c8:	4621      	mov	r1, r4
 80065ca:	4640      	mov	r0, r8
 80065cc:	f7ff fee4 	bl	8006398 <_printf_common>
 80065d0:	3001      	adds	r0, #1
 80065d2:	d14a      	bne.n	800666a <_printf_i+0x1f6>
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295
 80065d8:	b004      	add	sp, #16
 80065da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	f043 0320 	orr.w	r3, r3, #32
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	4833      	ldr	r0, [pc, #204]	; (80066b4 <_printf_i+0x240>)
 80065e8:	2778      	movs	r7, #120	; 0x78
 80065ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	6829      	ldr	r1, [r5, #0]
 80065f2:	061f      	lsls	r7, r3, #24
 80065f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80065f8:	d402      	bmi.n	8006600 <_printf_i+0x18c>
 80065fa:	065f      	lsls	r7, r3, #25
 80065fc:	bf48      	it	mi
 80065fe:	b2b6      	uxthmi	r6, r6
 8006600:	07df      	lsls	r7, r3, #31
 8006602:	bf48      	it	mi
 8006604:	f043 0320 	orrmi.w	r3, r3, #32
 8006608:	6029      	str	r1, [r5, #0]
 800660a:	bf48      	it	mi
 800660c:	6023      	strmi	r3, [r4, #0]
 800660e:	b91e      	cbnz	r6, 8006618 <_printf_i+0x1a4>
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	f023 0320 	bic.w	r3, r3, #32
 8006616:	6023      	str	r3, [r4, #0]
 8006618:	2310      	movs	r3, #16
 800661a:	e7a7      	b.n	800656c <_printf_i+0xf8>
 800661c:	4824      	ldr	r0, [pc, #144]	; (80066b0 <_printf_i+0x23c>)
 800661e:	e7e4      	b.n	80065ea <_printf_i+0x176>
 8006620:	4615      	mov	r5, r2
 8006622:	e7bd      	b.n	80065a0 <_printf_i+0x12c>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	6826      	ldr	r6, [r4, #0]
 8006628:	6961      	ldr	r1, [r4, #20]
 800662a:	1d18      	adds	r0, r3, #4
 800662c:	6028      	str	r0, [r5, #0]
 800662e:	0635      	lsls	r5, r6, #24
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	d501      	bpl.n	8006638 <_printf_i+0x1c4>
 8006634:	6019      	str	r1, [r3, #0]
 8006636:	e002      	b.n	800663e <_printf_i+0x1ca>
 8006638:	0670      	lsls	r0, r6, #25
 800663a:	d5fb      	bpl.n	8006634 <_printf_i+0x1c0>
 800663c:	8019      	strh	r1, [r3, #0]
 800663e:	2300      	movs	r3, #0
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	4615      	mov	r5, r2
 8006644:	e7bc      	b.n	80065c0 <_printf_i+0x14c>
 8006646:	682b      	ldr	r3, [r5, #0]
 8006648:	1d1a      	adds	r2, r3, #4
 800664a:	602a      	str	r2, [r5, #0]
 800664c:	681d      	ldr	r5, [r3, #0]
 800664e:	6862      	ldr	r2, [r4, #4]
 8006650:	2100      	movs	r1, #0
 8006652:	4628      	mov	r0, r5
 8006654:	f7f9 fdc4 	bl	80001e0 <memchr>
 8006658:	b108      	cbz	r0, 800665e <_printf_i+0x1ea>
 800665a:	1b40      	subs	r0, r0, r5
 800665c:	6060      	str	r0, [r4, #4]
 800665e:	6863      	ldr	r3, [r4, #4]
 8006660:	6123      	str	r3, [r4, #16]
 8006662:	2300      	movs	r3, #0
 8006664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006668:	e7aa      	b.n	80065c0 <_printf_i+0x14c>
 800666a:	6923      	ldr	r3, [r4, #16]
 800666c:	462a      	mov	r2, r5
 800666e:	4649      	mov	r1, r9
 8006670:	4640      	mov	r0, r8
 8006672:	47d0      	blx	sl
 8006674:	3001      	adds	r0, #1
 8006676:	d0ad      	beq.n	80065d4 <_printf_i+0x160>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	079b      	lsls	r3, r3, #30
 800667c:	d413      	bmi.n	80066a6 <_printf_i+0x232>
 800667e:	68e0      	ldr	r0, [r4, #12]
 8006680:	9b03      	ldr	r3, [sp, #12]
 8006682:	4298      	cmp	r0, r3
 8006684:	bfb8      	it	lt
 8006686:	4618      	movlt	r0, r3
 8006688:	e7a6      	b.n	80065d8 <_printf_i+0x164>
 800668a:	2301      	movs	r3, #1
 800668c:	4632      	mov	r2, r6
 800668e:	4649      	mov	r1, r9
 8006690:	4640      	mov	r0, r8
 8006692:	47d0      	blx	sl
 8006694:	3001      	adds	r0, #1
 8006696:	d09d      	beq.n	80065d4 <_printf_i+0x160>
 8006698:	3501      	adds	r5, #1
 800669a:	68e3      	ldr	r3, [r4, #12]
 800669c:	9903      	ldr	r1, [sp, #12]
 800669e:	1a5b      	subs	r3, r3, r1
 80066a0:	42ab      	cmp	r3, r5
 80066a2:	dcf2      	bgt.n	800668a <_printf_i+0x216>
 80066a4:	e7eb      	b.n	800667e <_printf_i+0x20a>
 80066a6:	2500      	movs	r5, #0
 80066a8:	f104 0619 	add.w	r6, r4, #25
 80066ac:	e7f5      	b.n	800669a <_printf_i+0x226>
 80066ae:	bf00      	nop
 80066b0:	0800afbc 	.word	0x0800afbc
 80066b4:	0800afcd 	.word	0x0800afcd

080066b8 <_scanf_float>:
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	b087      	sub	sp, #28
 80066be:	4617      	mov	r7, r2
 80066c0:	9303      	str	r3, [sp, #12]
 80066c2:	688b      	ldr	r3, [r1, #8]
 80066c4:	1e5a      	subs	r2, r3, #1
 80066c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80066ca:	bf83      	ittte	hi
 80066cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80066d0:	195b      	addhi	r3, r3, r5
 80066d2:	9302      	strhi	r3, [sp, #8]
 80066d4:	2300      	movls	r3, #0
 80066d6:	bf86      	itte	hi
 80066d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80066dc:	608b      	strhi	r3, [r1, #8]
 80066de:	9302      	strls	r3, [sp, #8]
 80066e0:	680b      	ldr	r3, [r1, #0]
 80066e2:	468b      	mov	fp, r1
 80066e4:	2500      	movs	r5, #0
 80066e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80066ea:	f84b 3b1c 	str.w	r3, [fp], #28
 80066ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80066f2:	4680      	mov	r8, r0
 80066f4:	460c      	mov	r4, r1
 80066f6:	465e      	mov	r6, fp
 80066f8:	46aa      	mov	sl, r5
 80066fa:	46a9      	mov	r9, r5
 80066fc:	9501      	str	r5, [sp, #4]
 80066fe:	68a2      	ldr	r2, [r4, #8]
 8006700:	b152      	cbz	r2, 8006718 <_scanf_float+0x60>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	2b4e      	cmp	r3, #78	; 0x4e
 8006708:	d864      	bhi.n	80067d4 <_scanf_float+0x11c>
 800670a:	2b40      	cmp	r3, #64	; 0x40
 800670c:	d83c      	bhi.n	8006788 <_scanf_float+0xd0>
 800670e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006712:	b2c8      	uxtb	r0, r1
 8006714:	280e      	cmp	r0, #14
 8006716:	d93a      	bls.n	800678e <_scanf_float+0xd6>
 8006718:	f1b9 0f00 	cmp.w	r9, #0
 800671c:	d003      	beq.n	8006726 <_scanf_float+0x6e>
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	f10a 3aff 	add.w	sl, sl, #4294967295
 800672a:	f1ba 0f01 	cmp.w	sl, #1
 800672e:	f200 8113 	bhi.w	8006958 <_scanf_float+0x2a0>
 8006732:	455e      	cmp	r6, fp
 8006734:	f200 8105 	bhi.w	8006942 <_scanf_float+0x28a>
 8006738:	2501      	movs	r5, #1
 800673a:	4628      	mov	r0, r5
 800673c:	b007      	add	sp, #28
 800673e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006742:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006746:	2a0d      	cmp	r2, #13
 8006748:	d8e6      	bhi.n	8006718 <_scanf_float+0x60>
 800674a:	a101      	add	r1, pc, #4	; (adr r1, 8006750 <_scanf_float+0x98>)
 800674c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006750:	0800688f 	.word	0x0800688f
 8006754:	08006719 	.word	0x08006719
 8006758:	08006719 	.word	0x08006719
 800675c:	08006719 	.word	0x08006719
 8006760:	080068ef 	.word	0x080068ef
 8006764:	080068c7 	.word	0x080068c7
 8006768:	08006719 	.word	0x08006719
 800676c:	08006719 	.word	0x08006719
 8006770:	0800689d 	.word	0x0800689d
 8006774:	08006719 	.word	0x08006719
 8006778:	08006719 	.word	0x08006719
 800677c:	08006719 	.word	0x08006719
 8006780:	08006719 	.word	0x08006719
 8006784:	08006855 	.word	0x08006855
 8006788:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800678c:	e7db      	b.n	8006746 <_scanf_float+0x8e>
 800678e:	290e      	cmp	r1, #14
 8006790:	d8c2      	bhi.n	8006718 <_scanf_float+0x60>
 8006792:	a001      	add	r0, pc, #4	; (adr r0, 8006798 <_scanf_float+0xe0>)
 8006794:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006798:	08006847 	.word	0x08006847
 800679c:	08006719 	.word	0x08006719
 80067a0:	08006847 	.word	0x08006847
 80067a4:	080068db 	.word	0x080068db
 80067a8:	08006719 	.word	0x08006719
 80067ac:	080067f5 	.word	0x080067f5
 80067b0:	08006831 	.word	0x08006831
 80067b4:	08006831 	.word	0x08006831
 80067b8:	08006831 	.word	0x08006831
 80067bc:	08006831 	.word	0x08006831
 80067c0:	08006831 	.word	0x08006831
 80067c4:	08006831 	.word	0x08006831
 80067c8:	08006831 	.word	0x08006831
 80067cc:	08006831 	.word	0x08006831
 80067d0:	08006831 	.word	0x08006831
 80067d4:	2b6e      	cmp	r3, #110	; 0x6e
 80067d6:	d809      	bhi.n	80067ec <_scanf_float+0x134>
 80067d8:	2b60      	cmp	r3, #96	; 0x60
 80067da:	d8b2      	bhi.n	8006742 <_scanf_float+0x8a>
 80067dc:	2b54      	cmp	r3, #84	; 0x54
 80067de:	d077      	beq.n	80068d0 <_scanf_float+0x218>
 80067e0:	2b59      	cmp	r3, #89	; 0x59
 80067e2:	d199      	bne.n	8006718 <_scanf_float+0x60>
 80067e4:	2d07      	cmp	r5, #7
 80067e6:	d197      	bne.n	8006718 <_scanf_float+0x60>
 80067e8:	2508      	movs	r5, #8
 80067ea:	e029      	b.n	8006840 <_scanf_float+0x188>
 80067ec:	2b74      	cmp	r3, #116	; 0x74
 80067ee:	d06f      	beq.n	80068d0 <_scanf_float+0x218>
 80067f0:	2b79      	cmp	r3, #121	; 0x79
 80067f2:	e7f6      	b.n	80067e2 <_scanf_float+0x12a>
 80067f4:	6821      	ldr	r1, [r4, #0]
 80067f6:	05c8      	lsls	r0, r1, #23
 80067f8:	d51a      	bpl.n	8006830 <_scanf_float+0x178>
 80067fa:	9b02      	ldr	r3, [sp, #8]
 80067fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006800:	6021      	str	r1, [r4, #0]
 8006802:	f109 0901 	add.w	r9, r9, #1
 8006806:	b11b      	cbz	r3, 8006810 <_scanf_float+0x158>
 8006808:	3b01      	subs	r3, #1
 800680a:	3201      	adds	r2, #1
 800680c:	9302      	str	r3, [sp, #8]
 800680e:	60a2      	str	r2, [r4, #8]
 8006810:	68a3      	ldr	r3, [r4, #8]
 8006812:	3b01      	subs	r3, #1
 8006814:	60a3      	str	r3, [r4, #8]
 8006816:	6923      	ldr	r3, [r4, #16]
 8006818:	3301      	adds	r3, #1
 800681a:	6123      	str	r3, [r4, #16]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3b01      	subs	r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	607b      	str	r3, [r7, #4]
 8006824:	f340 8084 	ble.w	8006930 <_scanf_float+0x278>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	3301      	adds	r3, #1
 800682c:	603b      	str	r3, [r7, #0]
 800682e:	e766      	b.n	80066fe <_scanf_float+0x46>
 8006830:	eb1a 0f05 	cmn.w	sl, r5
 8006834:	f47f af70 	bne.w	8006718 <_scanf_float+0x60>
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800683e:	6022      	str	r2, [r4, #0]
 8006840:	f806 3b01 	strb.w	r3, [r6], #1
 8006844:	e7e4      	b.n	8006810 <_scanf_float+0x158>
 8006846:	6822      	ldr	r2, [r4, #0]
 8006848:	0610      	lsls	r0, r2, #24
 800684a:	f57f af65 	bpl.w	8006718 <_scanf_float+0x60>
 800684e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006852:	e7f4      	b.n	800683e <_scanf_float+0x186>
 8006854:	f1ba 0f00 	cmp.w	sl, #0
 8006858:	d10e      	bne.n	8006878 <_scanf_float+0x1c0>
 800685a:	f1b9 0f00 	cmp.w	r9, #0
 800685e:	d10e      	bne.n	800687e <_scanf_float+0x1c6>
 8006860:	6822      	ldr	r2, [r4, #0]
 8006862:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006866:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800686a:	d108      	bne.n	800687e <_scanf_float+0x1c6>
 800686c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006870:	6022      	str	r2, [r4, #0]
 8006872:	f04f 0a01 	mov.w	sl, #1
 8006876:	e7e3      	b.n	8006840 <_scanf_float+0x188>
 8006878:	f1ba 0f02 	cmp.w	sl, #2
 800687c:	d055      	beq.n	800692a <_scanf_float+0x272>
 800687e:	2d01      	cmp	r5, #1
 8006880:	d002      	beq.n	8006888 <_scanf_float+0x1d0>
 8006882:	2d04      	cmp	r5, #4
 8006884:	f47f af48 	bne.w	8006718 <_scanf_float+0x60>
 8006888:	3501      	adds	r5, #1
 800688a:	b2ed      	uxtb	r5, r5
 800688c:	e7d8      	b.n	8006840 <_scanf_float+0x188>
 800688e:	f1ba 0f01 	cmp.w	sl, #1
 8006892:	f47f af41 	bne.w	8006718 <_scanf_float+0x60>
 8006896:	f04f 0a02 	mov.w	sl, #2
 800689a:	e7d1      	b.n	8006840 <_scanf_float+0x188>
 800689c:	b97d      	cbnz	r5, 80068be <_scanf_float+0x206>
 800689e:	f1b9 0f00 	cmp.w	r9, #0
 80068a2:	f47f af3c 	bne.w	800671e <_scanf_float+0x66>
 80068a6:	6822      	ldr	r2, [r4, #0]
 80068a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80068ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80068b0:	f47f af39 	bne.w	8006726 <_scanf_float+0x6e>
 80068b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80068b8:	6022      	str	r2, [r4, #0]
 80068ba:	2501      	movs	r5, #1
 80068bc:	e7c0      	b.n	8006840 <_scanf_float+0x188>
 80068be:	2d03      	cmp	r5, #3
 80068c0:	d0e2      	beq.n	8006888 <_scanf_float+0x1d0>
 80068c2:	2d05      	cmp	r5, #5
 80068c4:	e7de      	b.n	8006884 <_scanf_float+0x1cc>
 80068c6:	2d02      	cmp	r5, #2
 80068c8:	f47f af26 	bne.w	8006718 <_scanf_float+0x60>
 80068cc:	2503      	movs	r5, #3
 80068ce:	e7b7      	b.n	8006840 <_scanf_float+0x188>
 80068d0:	2d06      	cmp	r5, #6
 80068d2:	f47f af21 	bne.w	8006718 <_scanf_float+0x60>
 80068d6:	2507      	movs	r5, #7
 80068d8:	e7b2      	b.n	8006840 <_scanf_float+0x188>
 80068da:	6822      	ldr	r2, [r4, #0]
 80068dc:	0591      	lsls	r1, r2, #22
 80068de:	f57f af1b 	bpl.w	8006718 <_scanf_float+0x60>
 80068e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80068e6:	6022      	str	r2, [r4, #0]
 80068e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80068ec:	e7a8      	b.n	8006840 <_scanf_float+0x188>
 80068ee:	6822      	ldr	r2, [r4, #0]
 80068f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80068f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80068f8:	d006      	beq.n	8006908 <_scanf_float+0x250>
 80068fa:	0550      	lsls	r0, r2, #21
 80068fc:	f57f af0c 	bpl.w	8006718 <_scanf_float+0x60>
 8006900:	f1b9 0f00 	cmp.w	r9, #0
 8006904:	f43f af0f 	beq.w	8006726 <_scanf_float+0x6e>
 8006908:	0591      	lsls	r1, r2, #22
 800690a:	bf58      	it	pl
 800690c:	9901      	ldrpl	r1, [sp, #4]
 800690e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006912:	bf58      	it	pl
 8006914:	eba9 0101 	subpl.w	r1, r9, r1
 8006918:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800691c:	bf58      	it	pl
 800691e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006922:	6022      	str	r2, [r4, #0]
 8006924:	f04f 0900 	mov.w	r9, #0
 8006928:	e78a      	b.n	8006840 <_scanf_float+0x188>
 800692a:	f04f 0a03 	mov.w	sl, #3
 800692e:	e787      	b.n	8006840 <_scanf_float+0x188>
 8006930:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006934:	4639      	mov	r1, r7
 8006936:	4640      	mov	r0, r8
 8006938:	4798      	blx	r3
 800693a:	2800      	cmp	r0, #0
 800693c:	f43f aedf 	beq.w	80066fe <_scanf_float+0x46>
 8006940:	e6ea      	b.n	8006718 <_scanf_float+0x60>
 8006942:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006946:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800694a:	463a      	mov	r2, r7
 800694c:	4640      	mov	r0, r8
 800694e:	4798      	blx	r3
 8006950:	6923      	ldr	r3, [r4, #16]
 8006952:	3b01      	subs	r3, #1
 8006954:	6123      	str	r3, [r4, #16]
 8006956:	e6ec      	b.n	8006732 <_scanf_float+0x7a>
 8006958:	1e6b      	subs	r3, r5, #1
 800695a:	2b06      	cmp	r3, #6
 800695c:	d825      	bhi.n	80069aa <_scanf_float+0x2f2>
 800695e:	2d02      	cmp	r5, #2
 8006960:	d836      	bhi.n	80069d0 <_scanf_float+0x318>
 8006962:	455e      	cmp	r6, fp
 8006964:	f67f aee8 	bls.w	8006738 <_scanf_float+0x80>
 8006968:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800696c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006970:	463a      	mov	r2, r7
 8006972:	4640      	mov	r0, r8
 8006974:	4798      	blx	r3
 8006976:	6923      	ldr	r3, [r4, #16]
 8006978:	3b01      	subs	r3, #1
 800697a:	6123      	str	r3, [r4, #16]
 800697c:	e7f1      	b.n	8006962 <_scanf_float+0x2aa>
 800697e:	9802      	ldr	r0, [sp, #8]
 8006980:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006984:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006988:	9002      	str	r0, [sp, #8]
 800698a:	463a      	mov	r2, r7
 800698c:	4640      	mov	r0, r8
 800698e:	4798      	blx	r3
 8006990:	6923      	ldr	r3, [r4, #16]
 8006992:	3b01      	subs	r3, #1
 8006994:	6123      	str	r3, [r4, #16]
 8006996:	f10a 3aff 	add.w	sl, sl, #4294967295
 800699a:	fa5f fa8a 	uxtb.w	sl, sl
 800699e:	f1ba 0f02 	cmp.w	sl, #2
 80069a2:	d1ec      	bne.n	800697e <_scanf_float+0x2c6>
 80069a4:	3d03      	subs	r5, #3
 80069a6:	b2ed      	uxtb	r5, r5
 80069a8:	1b76      	subs	r6, r6, r5
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	05da      	lsls	r2, r3, #23
 80069ae:	d52f      	bpl.n	8006a10 <_scanf_float+0x358>
 80069b0:	055b      	lsls	r3, r3, #21
 80069b2:	d510      	bpl.n	80069d6 <_scanf_float+0x31e>
 80069b4:	455e      	cmp	r6, fp
 80069b6:	f67f aebf 	bls.w	8006738 <_scanf_float+0x80>
 80069ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069c2:	463a      	mov	r2, r7
 80069c4:	4640      	mov	r0, r8
 80069c6:	4798      	blx	r3
 80069c8:	6923      	ldr	r3, [r4, #16]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	6123      	str	r3, [r4, #16]
 80069ce:	e7f1      	b.n	80069b4 <_scanf_float+0x2fc>
 80069d0:	46aa      	mov	sl, r5
 80069d2:	9602      	str	r6, [sp, #8]
 80069d4:	e7df      	b.n	8006996 <_scanf_float+0x2de>
 80069d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	2965      	cmp	r1, #101	; 0x65
 80069de:	f103 33ff 	add.w	r3, r3, #4294967295
 80069e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80069e6:	6123      	str	r3, [r4, #16]
 80069e8:	d00c      	beq.n	8006a04 <_scanf_float+0x34c>
 80069ea:	2945      	cmp	r1, #69	; 0x45
 80069ec:	d00a      	beq.n	8006a04 <_scanf_float+0x34c>
 80069ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069f2:	463a      	mov	r2, r7
 80069f4:	4640      	mov	r0, r8
 80069f6:	4798      	blx	r3
 80069f8:	6923      	ldr	r3, [r4, #16]
 80069fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	1eb5      	subs	r5, r6, #2
 8006a02:	6123      	str	r3, [r4, #16]
 8006a04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a08:	463a      	mov	r2, r7
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	4798      	blx	r3
 8006a0e:	462e      	mov	r6, r5
 8006a10:	6825      	ldr	r5, [r4, #0]
 8006a12:	f015 0510 	ands.w	r5, r5, #16
 8006a16:	d158      	bne.n	8006aca <_scanf_float+0x412>
 8006a18:	7035      	strb	r5, [r6, #0]
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a24:	d11c      	bne.n	8006a60 <_scanf_float+0x3a8>
 8006a26:	9b01      	ldr	r3, [sp, #4]
 8006a28:	454b      	cmp	r3, r9
 8006a2a:	eba3 0209 	sub.w	r2, r3, r9
 8006a2e:	d124      	bne.n	8006a7a <_scanf_float+0x3c2>
 8006a30:	2200      	movs	r2, #0
 8006a32:	4659      	mov	r1, fp
 8006a34:	4640      	mov	r0, r8
 8006a36:	f002 fc7f 	bl	8009338 <_strtod_r>
 8006a3a:	9b03      	ldr	r3, [sp, #12]
 8006a3c:	6821      	ldr	r1, [r4, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f011 0f02 	tst.w	r1, #2
 8006a44:	ec57 6b10 	vmov	r6, r7, d0
 8006a48:	f103 0204 	add.w	r2, r3, #4
 8006a4c:	d020      	beq.n	8006a90 <_scanf_float+0x3d8>
 8006a4e:	9903      	ldr	r1, [sp, #12]
 8006a50:	600a      	str	r2, [r1, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	e9c3 6700 	strd	r6, r7, [r3]
 8006a58:	68e3      	ldr	r3, [r4, #12]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	60e3      	str	r3, [r4, #12]
 8006a5e:	e66c      	b.n	800673a <_scanf_float+0x82>
 8006a60:	9b04      	ldr	r3, [sp, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0e4      	beq.n	8006a30 <_scanf_float+0x378>
 8006a66:	9905      	ldr	r1, [sp, #20]
 8006a68:	230a      	movs	r3, #10
 8006a6a:	462a      	mov	r2, r5
 8006a6c:	3101      	adds	r1, #1
 8006a6e:	4640      	mov	r0, r8
 8006a70:	f002 fcea 	bl	8009448 <_strtol_r>
 8006a74:	9b04      	ldr	r3, [sp, #16]
 8006a76:	9e05      	ldr	r6, [sp, #20]
 8006a78:	1ac2      	subs	r2, r0, r3
 8006a7a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006a7e:	429e      	cmp	r6, r3
 8006a80:	bf28      	it	cs
 8006a82:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006a86:	4912      	ldr	r1, [pc, #72]	; (8006ad0 <_scanf_float+0x418>)
 8006a88:	4630      	mov	r0, r6
 8006a8a:	f000 f8e7 	bl	8006c5c <siprintf>
 8006a8e:	e7cf      	b.n	8006a30 <_scanf_float+0x378>
 8006a90:	f011 0f04 	tst.w	r1, #4
 8006a94:	9903      	ldr	r1, [sp, #12]
 8006a96:	600a      	str	r2, [r1, #0]
 8006a98:	d1db      	bne.n	8006a52 <_scanf_float+0x39a>
 8006a9a:	f8d3 8000 	ldr.w	r8, [r3]
 8006a9e:	ee10 2a10 	vmov	r2, s0
 8006aa2:	ee10 0a10 	vmov	r0, s0
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	f7fa f847 	bl	8000b3c <__aeabi_dcmpun>
 8006aae:	b128      	cbz	r0, 8006abc <_scanf_float+0x404>
 8006ab0:	4808      	ldr	r0, [pc, #32]	; (8006ad4 <_scanf_float+0x41c>)
 8006ab2:	f000 fa05 	bl	8006ec0 <nanf>
 8006ab6:	ed88 0a00 	vstr	s0, [r8]
 8006aba:	e7cd      	b.n	8006a58 <_scanf_float+0x3a0>
 8006abc:	4630      	mov	r0, r6
 8006abe:	4639      	mov	r1, r7
 8006ac0:	f7fa f89a 	bl	8000bf8 <__aeabi_d2f>
 8006ac4:	f8c8 0000 	str.w	r0, [r8]
 8006ac8:	e7c6      	b.n	8006a58 <_scanf_float+0x3a0>
 8006aca:	2500      	movs	r5, #0
 8006acc:	e635      	b.n	800673a <_scanf_float+0x82>
 8006ace:	bf00      	nop
 8006ad0:	0800afde 	.word	0x0800afde
 8006ad4:	0800b390 	.word	0x0800b390

08006ad8 <std>:
 8006ad8:	2300      	movs	r3, #0
 8006ada:	b510      	push	{r4, lr}
 8006adc:	4604      	mov	r4, r0
 8006ade:	e9c0 3300 	strd	r3, r3, [r0]
 8006ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ae6:	6083      	str	r3, [r0, #8]
 8006ae8:	8181      	strh	r1, [r0, #12]
 8006aea:	6643      	str	r3, [r0, #100]	; 0x64
 8006aec:	81c2      	strh	r2, [r0, #14]
 8006aee:	6183      	str	r3, [r0, #24]
 8006af0:	4619      	mov	r1, r3
 8006af2:	2208      	movs	r2, #8
 8006af4:	305c      	adds	r0, #92	; 0x5c
 8006af6:	f000 f942 	bl	8006d7e <memset>
 8006afa:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <std+0x58>)
 8006afc:	6263      	str	r3, [r4, #36]	; 0x24
 8006afe:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <std+0x5c>)
 8006b00:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b02:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <std+0x60>)
 8006b04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b06:	4b0d      	ldr	r3, [pc, #52]	; (8006b3c <std+0x64>)
 8006b08:	6323      	str	r3, [r4, #48]	; 0x30
 8006b0a:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <std+0x68>)
 8006b0c:	6224      	str	r4, [r4, #32]
 8006b0e:	429c      	cmp	r4, r3
 8006b10:	d006      	beq.n	8006b20 <std+0x48>
 8006b12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006b16:	4294      	cmp	r4, r2
 8006b18:	d002      	beq.n	8006b20 <std+0x48>
 8006b1a:	33d0      	adds	r3, #208	; 0xd0
 8006b1c:	429c      	cmp	r4, r3
 8006b1e:	d105      	bne.n	8006b2c <std+0x54>
 8006b20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b28:	f000 b9b8 	b.w	8006e9c <__retarget_lock_init_recursive>
 8006b2c:	bd10      	pop	{r4, pc}
 8006b2e:	bf00      	nop
 8006b30:	08006cf5 	.word	0x08006cf5
 8006b34:	08006d1b 	.word	0x08006d1b
 8006b38:	08006d53 	.word	0x08006d53
 8006b3c:	08006d77 	.word	0x08006d77
 8006b40:	20004f84 	.word	0x20004f84

08006b44 <stdio_exit_handler>:
 8006b44:	4a02      	ldr	r2, [pc, #8]	; (8006b50 <stdio_exit_handler+0xc>)
 8006b46:	4903      	ldr	r1, [pc, #12]	; (8006b54 <stdio_exit_handler+0x10>)
 8006b48:	4803      	ldr	r0, [pc, #12]	; (8006b58 <stdio_exit_handler+0x14>)
 8006b4a:	f000 b869 	b.w	8006c20 <_fwalk_sglue>
 8006b4e:	bf00      	nop
 8006b50:	20000014 	.word	0x20000014
 8006b54:	08009e49 	.word	0x08009e49
 8006b58:	20000020 	.word	0x20000020

08006b5c <cleanup_stdio>:
 8006b5c:	6841      	ldr	r1, [r0, #4]
 8006b5e:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <cleanup_stdio+0x34>)
 8006b60:	4299      	cmp	r1, r3
 8006b62:	b510      	push	{r4, lr}
 8006b64:	4604      	mov	r4, r0
 8006b66:	d001      	beq.n	8006b6c <cleanup_stdio+0x10>
 8006b68:	f003 f96e 	bl	8009e48 <_fflush_r>
 8006b6c:	68a1      	ldr	r1, [r4, #8]
 8006b6e:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <cleanup_stdio+0x38>)
 8006b70:	4299      	cmp	r1, r3
 8006b72:	d002      	beq.n	8006b7a <cleanup_stdio+0x1e>
 8006b74:	4620      	mov	r0, r4
 8006b76:	f003 f967 	bl	8009e48 <_fflush_r>
 8006b7a:	68e1      	ldr	r1, [r4, #12]
 8006b7c:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <cleanup_stdio+0x3c>)
 8006b7e:	4299      	cmp	r1, r3
 8006b80:	d004      	beq.n	8006b8c <cleanup_stdio+0x30>
 8006b82:	4620      	mov	r0, r4
 8006b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b88:	f003 b95e 	b.w	8009e48 <_fflush_r>
 8006b8c:	bd10      	pop	{r4, pc}
 8006b8e:	bf00      	nop
 8006b90:	20004f84 	.word	0x20004f84
 8006b94:	20004fec 	.word	0x20004fec
 8006b98:	20005054 	.word	0x20005054

08006b9c <global_stdio_init.part.0>:
 8006b9c:	b510      	push	{r4, lr}
 8006b9e:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <global_stdio_init.part.0+0x30>)
 8006ba0:	4c0b      	ldr	r4, [pc, #44]	; (8006bd0 <global_stdio_init.part.0+0x34>)
 8006ba2:	4a0c      	ldr	r2, [pc, #48]	; (8006bd4 <global_stdio_init.part.0+0x38>)
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2104      	movs	r1, #4
 8006bac:	f7ff ff94 	bl	8006ad8 <std>
 8006bb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	2109      	movs	r1, #9
 8006bb8:	f7ff ff8e 	bl	8006ad8 <std>
 8006bbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc6:	2112      	movs	r1, #18
 8006bc8:	f7ff bf86 	b.w	8006ad8 <std>
 8006bcc:	200050bc 	.word	0x200050bc
 8006bd0:	20004f84 	.word	0x20004f84
 8006bd4:	08006b45 	.word	0x08006b45

08006bd8 <__sfp_lock_acquire>:
 8006bd8:	4801      	ldr	r0, [pc, #4]	; (8006be0 <__sfp_lock_acquire+0x8>)
 8006bda:	f000 b960 	b.w	8006e9e <__retarget_lock_acquire_recursive>
 8006bde:	bf00      	nop
 8006be0:	200050c5 	.word	0x200050c5

08006be4 <__sfp_lock_release>:
 8006be4:	4801      	ldr	r0, [pc, #4]	; (8006bec <__sfp_lock_release+0x8>)
 8006be6:	f000 b95b 	b.w	8006ea0 <__retarget_lock_release_recursive>
 8006bea:	bf00      	nop
 8006bec:	200050c5 	.word	0x200050c5

08006bf0 <__sinit>:
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	f7ff fff0 	bl	8006bd8 <__sfp_lock_acquire>
 8006bf8:	6a23      	ldr	r3, [r4, #32]
 8006bfa:	b11b      	cbz	r3, 8006c04 <__sinit+0x14>
 8006bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c00:	f7ff bff0 	b.w	8006be4 <__sfp_lock_release>
 8006c04:	4b04      	ldr	r3, [pc, #16]	; (8006c18 <__sinit+0x28>)
 8006c06:	6223      	str	r3, [r4, #32]
 8006c08:	4b04      	ldr	r3, [pc, #16]	; (8006c1c <__sinit+0x2c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1f5      	bne.n	8006bfc <__sinit+0xc>
 8006c10:	f7ff ffc4 	bl	8006b9c <global_stdio_init.part.0>
 8006c14:	e7f2      	b.n	8006bfc <__sinit+0xc>
 8006c16:	bf00      	nop
 8006c18:	08006b5d 	.word	0x08006b5d
 8006c1c:	200050bc 	.word	0x200050bc

08006c20 <_fwalk_sglue>:
 8006c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c24:	4607      	mov	r7, r0
 8006c26:	4688      	mov	r8, r1
 8006c28:	4614      	mov	r4, r2
 8006c2a:	2600      	movs	r6, #0
 8006c2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c30:	f1b9 0901 	subs.w	r9, r9, #1
 8006c34:	d505      	bpl.n	8006c42 <_fwalk_sglue+0x22>
 8006c36:	6824      	ldr	r4, [r4, #0]
 8006c38:	2c00      	cmp	r4, #0
 8006c3a:	d1f7      	bne.n	8006c2c <_fwalk_sglue+0xc>
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c42:	89ab      	ldrh	r3, [r5, #12]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d907      	bls.n	8006c58 <_fwalk_sglue+0x38>
 8006c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	d003      	beq.n	8006c58 <_fwalk_sglue+0x38>
 8006c50:	4629      	mov	r1, r5
 8006c52:	4638      	mov	r0, r7
 8006c54:	47c0      	blx	r8
 8006c56:	4306      	orrs	r6, r0
 8006c58:	3568      	adds	r5, #104	; 0x68
 8006c5a:	e7e9      	b.n	8006c30 <_fwalk_sglue+0x10>

08006c5c <siprintf>:
 8006c5c:	b40e      	push	{r1, r2, r3}
 8006c5e:	b500      	push	{lr}
 8006c60:	b09c      	sub	sp, #112	; 0x70
 8006c62:	ab1d      	add	r3, sp, #116	; 0x74
 8006c64:	9002      	str	r0, [sp, #8]
 8006c66:	9006      	str	r0, [sp, #24]
 8006c68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c6c:	4809      	ldr	r0, [pc, #36]	; (8006c94 <siprintf+0x38>)
 8006c6e:	9107      	str	r1, [sp, #28]
 8006c70:	9104      	str	r1, [sp, #16]
 8006c72:	4909      	ldr	r1, [pc, #36]	; (8006c98 <siprintf+0x3c>)
 8006c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c78:	9105      	str	r1, [sp, #20]
 8006c7a:	6800      	ldr	r0, [r0, #0]
 8006c7c:	9301      	str	r3, [sp, #4]
 8006c7e:	a902      	add	r1, sp, #8
 8006c80:	f002 fc3e 	bl	8009500 <_svfiprintf_r>
 8006c84:	9b02      	ldr	r3, [sp, #8]
 8006c86:	2200      	movs	r2, #0
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	b01c      	add	sp, #112	; 0x70
 8006c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c90:	b003      	add	sp, #12
 8006c92:	4770      	bx	lr
 8006c94:	2000006c 	.word	0x2000006c
 8006c98:	ffff0208 	.word	0xffff0208

08006c9c <siscanf>:
 8006c9c:	b40e      	push	{r1, r2, r3}
 8006c9e:	b510      	push	{r4, lr}
 8006ca0:	b09f      	sub	sp, #124	; 0x7c
 8006ca2:	ac21      	add	r4, sp, #132	; 0x84
 8006ca4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006ca8:	f854 2b04 	ldr.w	r2, [r4], #4
 8006cac:	9201      	str	r2, [sp, #4]
 8006cae:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006cb2:	9004      	str	r0, [sp, #16]
 8006cb4:	9008      	str	r0, [sp, #32]
 8006cb6:	f7f9 fae3 	bl	8000280 <strlen>
 8006cba:	4b0c      	ldr	r3, [pc, #48]	; (8006cec <siscanf+0x50>)
 8006cbc:	9005      	str	r0, [sp, #20]
 8006cbe:	9009      	str	r0, [sp, #36]	; 0x24
 8006cc0:	930d      	str	r3, [sp, #52]	; 0x34
 8006cc2:	480b      	ldr	r0, [pc, #44]	; (8006cf0 <siscanf+0x54>)
 8006cc4:	9a01      	ldr	r2, [sp, #4]
 8006cc6:	6800      	ldr	r0, [r0, #0]
 8006cc8:	9403      	str	r4, [sp, #12]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9311      	str	r3, [sp, #68]	; 0x44
 8006cce:	9316      	str	r3, [sp, #88]	; 0x58
 8006cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006cd4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006cd8:	a904      	add	r1, sp, #16
 8006cda:	4623      	mov	r3, r4
 8006cdc:	f002 fd68 	bl	80097b0 <__ssvfiscanf_r>
 8006ce0:	b01f      	add	sp, #124	; 0x7c
 8006ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce6:	b003      	add	sp, #12
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	08006d17 	.word	0x08006d17
 8006cf0:	2000006c 	.word	0x2000006c

08006cf4 <__sread>:
 8006cf4:	b510      	push	{r4, lr}
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfc:	f000 f880 	bl	8006e00 <_read_r>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	bfab      	itete	ge
 8006d04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d06:	89a3      	ldrhlt	r3, [r4, #12]
 8006d08:	181b      	addge	r3, r3, r0
 8006d0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d0e:	bfac      	ite	ge
 8006d10:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d12:	81a3      	strhlt	r3, [r4, #12]
 8006d14:	bd10      	pop	{r4, pc}

08006d16 <__seofread>:
 8006d16:	2000      	movs	r0, #0
 8006d18:	4770      	bx	lr

08006d1a <__swrite>:
 8006d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1e:	461f      	mov	r7, r3
 8006d20:	898b      	ldrh	r3, [r1, #12]
 8006d22:	05db      	lsls	r3, r3, #23
 8006d24:	4605      	mov	r5, r0
 8006d26:	460c      	mov	r4, r1
 8006d28:	4616      	mov	r6, r2
 8006d2a:	d505      	bpl.n	8006d38 <__swrite+0x1e>
 8006d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d30:	2302      	movs	r3, #2
 8006d32:	2200      	movs	r2, #0
 8006d34:	f000 f852 	bl	8006ddc <_lseek_r>
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d42:	81a3      	strh	r3, [r4, #12]
 8006d44:	4632      	mov	r2, r6
 8006d46:	463b      	mov	r3, r7
 8006d48:	4628      	mov	r0, r5
 8006d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4e:	f000 b869 	b.w	8006e24 <_write_r>

08006d52 <__sseek>:
 8006d52:	b510      	push	{r4, lr}
 8006d54:	460c      	mov	r4, r1
 8006d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5a:	f000 f83f 	bl	8006ddc <_lseek_r>
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	bf15      	itete	ne
 8006d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d6e:	81a3      	strheq	r3, [r4, #12]
 8006d70:	bf18      	it	ne
 8006d72:	81a3      	strhne	r3, [r4, #12]
 8006d74:	bd10      	pop	{r4, pc}

08006d76 <__sclose>:
 8006d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d7a:	f000 b81f 	b.w	8006dbc <_close_r>

08006d7e <memset>:
 8006d7e:	4402      	add	r2, r0
 8006d80:	4603      	mov	r3, r0
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d100      	bne.n	8006d88 <memset+0xa>
 8006d86:	4770      	bx	lr
 8006d88:	f803 1b01 	strb.w	r1, [r3], #1
 8006d8c:	e7f9      	b.n	8006d82 <memset+0x4>

08006d8e <strncmp>:
 8006d8e:	b510      	push	{r4, lr}
 8006d90:	b16a      	cbz	r2, 8006dae <strncmp+0x20>
 8006d92:	3901      	subs	r1, #1
 8006d94:	1884      	adds	r4, r0, r2
 8006d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d9a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d103      	bne.n	8006daa <strncmp+0x1c>
 8006da2:	42a0      	cmp	r0, r4
 8006da4:	d001      	beq.n	8006daa <strncmp+0x1c>
 8006da6:	2a00      	cmp	r2, #0
 8006da8:	d1f5      	bne.n	8006d96 <strncmp+0x8>
 8006daa:	1ad0      	subs	r0, r2, r3
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	4610      	mov	r0, r2
 8006db0:	e7fc      	b.n	8006dac <strncmp+0x1e>
	...

08006db4 <_localeconv_r>:
 8006db4:	4800      	ldr	r0, [pc, #0]	; (8006db8 <_localeconv_r+0x4>)
 8006db6:	4770      	bx	lr
 8006db8:	20000160 	.word	0x20000160

08006dbc <_close_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4d06      	ldr	r5, [pc, #24]	; (8006dd8 <_close_r+0x1c>)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	4608      	mov	r0, r1
 8006dc6:	602b      	str	r3, [r5, #0]
 8006dc8:	f7fa fcf3 	bl	80017b2 <_close>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_close_r+0x1a>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_close_r+0x1a>
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	200050c0 	.word	0x200050c0

08006ddc <_lseek_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d07      	ldr	r5, [pc, #28]	; (8006dfc <_lseek_r+0x20>)
 8006de0:	4604      	mov	r4, r0
 8006de2:	4608      	mov	r0, r1
 8006de4:	4611      	mov	r1, r2
 8006de6:	2200      	movs	r2, #0
 8006de8:	602a      	str	r2, [r5, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	f7fa fd08 	bl	8001800 <_lseek>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d102      	bne.n	8006dfa <_lseek_r+0x1e>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	b103      	cbz	r3, 8006dfa <_lseek_r+0x1e>
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	200050c0 	.word	0x200050c0

08006e00 <_read_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4d07      	ldr	r5, [pc, #28]	; (8006e20 <_read_r+0x20>)
 8006e04:	4604      	mov	r4, r0
 8006e06:	4608      	mov	r0, r1
 8006e08:	4611      	mov	r1, r2
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	602a      	str	r2, [r5, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f7fa fc96 	bl	8001740 <_read>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d102      	bne.n	8006e1e <_read_r+0x1e>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	b103      	cbz	r3, 8006e1e <_read_r+0x1e>
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	200050c0 	.word	0x200050c0

08006e24 <_write_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4d07      	ldr	r5, [pc, #28]	; (8006e44 <_write_r+0x20>)
 8006e28:	4604      	mov	r4, r0
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	602a      	str	r2, [r5, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	f7fa fca1 	bl	800177a <_write>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_write_r+0x1e>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_write_r+0x1e>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	200050c0 	.word	0x200050c0

08006e48 <__errno>:
 8006e48:	4b01      	ldr	r3, [pc, #4]	; (8006e50 <__errno+0x8>)
 8006e4a:	6818      	ldr	r0, [r3, #0]
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	2000006c 	.word	0x2000006c

08006e54 <__libc_init_array>:
 8006e54:	b570      	push	{r4, r5, r6, lr}
 8006e56:	4d0d      	ldr	r5, [pc, #52]	; (8006e8c <__libc_init_array+0x38>)
 8006e58:	4c0d      	ldr	r4, [pc, #52]	; (8006e90 <__libc_init_array+0x3c>)
 8006e5a:	1b64      	subs	r4, r4, r5
 8006e5c:	10a4      	asrs	r4, r4, #2
 8006e5e:	2600      	movs	r6, #0
 8006e60:	42a6      	cmp	r6, r4
 8006e62:	d109      	bne.n	8006e78 <__libc_init_array+0x24>
 8006e64:	4d0b      	ldr	r5, [pc, #44]	; (8006e94 <__libc_init_array+0x40>)
 8006e66:	4c0c      	ldr	r4, [pc, #48]	; (8006e98 <__libc_init_array+0x44>)
 8006e68:	f003 ffce 	bl	800ae08 <_init>
 8006e6c:	1b64      	subs	r4, r4, r5
 8006e6e:	10a4      	asrs	r4, r4, #2
 8006e70:	2600      	movs	r6, #0
 8006e72:	42a6      	cmp	r6, r4
 8006e74:	d105      	bne.n	8006e82 <__libc_init_array+0x2e>
 8006e76:	bd70      	pop	{r4, r5, r6, pc}
 8006e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e7c:	4798      	blx	r3
 8006e7e:	3601      	adds	r6, #1
 8006e80:	e7ee      	b.n	8006e60 <__libc_init_array+0xc>
 8006e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e86:	4798      	blx	r3
 8006e88:	3601      	adds	r6, #1
 8006e8a:	e7f2      	b.n	8006e72 <__libc_init_array+0x1e>
 8006e8c:	0800b3fc 	.word	0x0800b3fc
 8006e90:	0800b3fc 	.word	0x0800b3fc
 8006e94:	0800b3fc 	.word	0x0800b3fc
 8006e98:	0800b400 	.word	0x0800b400

08006e9c <__retarget_lock_init_recursive>:
 8006e9c:	4770      	bx	lr

08006e9e <__retarget_lock_acquire_recursive>:
 8006e9e:	4770      	bx	lr

08006ea0 <__retarget_lock_release_recursive>:
 8006ea0:	4770      	bx	lr

08006ea2 <memcpy>:
 8006ea2:	440a      	add	r2, r1
 8006ea4:	4291      	cmp	r1, r2
 8006ea6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eaa:	d100      	bne.n	8006eae <memcpy+0xc>
 8006eac:	4770      	bx	lr
 8006eae:	b510      	push	{r4, lr}
 8006eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eb8:	4291      	cmp	r1, r2
 8006eba:	d1f9      	bne.n	8006eb0 <memcpy+0xe>
 8006ebc:	bd10      	pop	{r4, pc}
	...

08006ec0 <nanf>:
 8006ec0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006ec8 <nanf+0x8>
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	7fc00000 	.word	0x7fc00000

08006ecc <quorem>:
 8006ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed0:	6903      	ldr	r3, [r0, #16]
 8006ed2:	690c      	ldr	r4, [r1, #16]
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	4607      	mov	r7, r0
 8006ed8:	db7e      	blt.n	8006fd8 <quorem+0x10c>
 8006eda:	3c01      	subs	r4, #1
 8006edc:	f101 0814 	add.w	r8, r1, #20
 8006ee0:	f100 0514 	add.w	r5, r0, #20
 8006ee4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006eee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006efa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006efe:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f02:	d331      	bcc.n	8006f68 <quorem+0x9c>
 8006f04:	f04f 0e00 	mov.w	lr, #0
 8006f08:	4640      	mov	r0, r8
 8006f0a:	46ac      	mov	ip, r5
 8006f0c:	46f2      	mov	sl, lr
 8006f0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f12:	b293      	uxth	r3, r2
 8006f14:	fb06 e303 	mla	r3, r6, r3, lr
 8006f18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f1c:	0c1a      	lsrs	r2, r3, #16
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ebaa 0303 	sub.w	r3, sl, r3
 8006f24:	f8dc a000 	ldr.w	sl, [ip]
 8006f28:	fa13 f38a 	uxtah	r3, r3, sl
 8006f2c:	fb06 220e 	mla	r2, r6, lr, r2
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	9b00      	ldr	r3, [sp, #0]
 8006f34:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f38:	b292      	uxth	r2, r2
 8006f3a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f42:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f46:	4581      	cmp	r9, r0
 8006f48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f4c:	f84c 3b04 	str.w	r3, [ip], #4
 8006f50:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f54:	d2db      	bcs.n	8006f0e <quorem+0x42>
 8006f56:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f5a:	b92b      	cbnz	r3, 8006f68 <quorem+0x9c>
 8006f5c:	9b01      	ldr	r3, [sp, #4]
 8006f5e:	3b04      	subs	r3, #4
 8006f60:	429d      	cmp	r5, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	d32c      	bcc.n	8006fc0 <quorem+0xf4>
 8006f66:	613c      	str	r4, [r7, #16]
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f001 f9f1 	bl	8008350 <__mcmp>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	db22      	blt.n	8006fb8 <quorem+0xec>
 8006f72:	3601      	adds	r6, #1
 8006f74:	4629      	mov	r1, r5
 8006f76:	2000      	movs	r0, #0
 8006f78:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f7c:	f8d1 c000 	ldr.w	ip, [r1]
 8006f80:	b293      	uxth	r3, r2
 8006f82:	1ac3      	subs	r3, r0, r3
 8006f84:	0c12      	lsrs	r2, r2, #16
 8006f86:	fa13 f38c 	uxtah	r3, r3, ip
 8006f8a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006f8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f98:	45c1      	cmp	r9, r8
 8006f9a:	f841 3b04 	str.w	r3, [r1], #4
 8006f9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fa2:	d2e9      	bcs.n	8006f78 <quorem+0xac>
 8006fa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fa8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fac:	b922      	cbnz	r2, 8006fb8 <quorem+0xec>
 8006fae:	3b04      	subs	r3, #4
 8006fb0:	429d      	cmp	r5, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	d30a      	bcc.n	8006fcc <quorem+0x100>
 8006fb6:	613c      	str	r4, [r7, #16]
 8006fb8:	4630      	mov	r0, r6
 8006fba:	b003      	add	sp, #12
 8006fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc0:	6812      	ldr	r2, [r2, #0]
 8006fc2:	3b04      	subs	r3, #4
 8006fc4:	2a00      	cmp	r2, #0
 8006fc6:	d1ce      	bne.n	8006f66 <quorem+0x9a>
 8006fc8:	3c01      	subs	r4, #1
 8006fca:	e7c9      	b.n	8006f60 <quorem+0x94>
 8006fcc:	6812      	ldr	r2, [r2, #0]
 8006fce:	3b04      	subs	r3, #4
 8006fd0:	2a00      	cmp	r2, #0
 8006fd2:	d1f0      	bne.n	8006fb6 <quorem+0xea>
 8006fd4:	3c01      	subs	r4, #1
 8006fd6:	e7eb      	b.n	8006fb0 <quorem+0xe4>
 8006fd8:	2000      	movs	r0, #0
 8006fda:	e7ee      	b.n	8006fba <quorem+0xee>
 8006fdc:	0000      	movs	r0, r0
	...

08006fe0 <_dtoa_r>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	ed2d 8b04 	vpush	{d8-d9}
 8006fe8:	69c5      	ldr	r5, [r0, #28]
 8006fea:	b093      	sub	sp, #76	; 0x4c
 8006fec:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006ff0:	ec57 6b10 	vmov	r6, r7, d0
 8006ff4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ff8:	9107      	str	r1, [sp, #28]
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	920a      	str	r2, [sp, #40]	; 0x28
 8006ffe:	930d      	str	r3, [sp, #52]	; 0x34
 8007000:	b975      	cbnz	r5, 8007020 <_dtoa_r+0x40>
 8007002:	2010      	movs	r0, #16
 8007004:	f000 fe2a 	bl	8007c5c <malloc>
 8007008:	4602      	mov	r2, r0
 800700a:	61e0      	str	r0, [r4, #28]
 800700c:	b920      	cbnz	r0, 8007018 <_dtoa_r+0x38>
 800700e:	4bae      	ldr	r3, [pc, #696]	; (80072c8 <_dtoa_r+0x2e8>)
 8007010:	21ef      	movs	r1, #239	; 0xef
 8007012:	48ae      	ldr	r0, [pc, #696]	; (80072cc <_dtoa_r+0x2ec>)
 8007014:	f002 ffe8 	bl	8009fe8 <__assert_func>
 8007018:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800701c:	6005      	str	r5, [r0, #0]
 800701e:	60c5      	str	r5, [r0, #12]
 8007020:	69e3      	ldr	r3, [r4, #28]
 8007022:	6819      	ldr	r1, [r3, #0]
 8007024:	b151      	cbz	r1, 800703c <_dtoa_r+0x5c>
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	604a      	str	r2, [r1, #4]
 800702a:	2301      	movs	r3, #1
 800702c:	4093      	lsls	r3, r2
 800702e:	608b      	str	r3, [r1, #8]
 8007030:	4620      	mov	r0, r4
 8007032:	f000 ff07 	bl	8007e44 <_Bfree>
 8007036:	69e3      	ldr	r3, [r4, #28]
 8007038:	2200      	movs	r2, #0
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	1e3b      	subs	r3, r7, #0
 800703e:	bfbb      	ittet	lt
 8007040:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007044:	9303      	strlt	r3, [sp, #12]
 8007046:	2300      	movge	r3, #0
 8007048:	2201      	movlt	r2, #1
 800704a:	bfac      	ite	ge
 800704c:	f8c8 3000 	strge.w	r3, [r8]
 8007050:	f8c8 2000 	strlt.w	r2, [r8]
 8007054:	4b9e      	ldr	r3, [pc, #632]	; (80072d0 <_dtoa_r+0x2f0>)
 8007056:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800705a:	ea33 0308 	bics.w	r3, r3, r8
 800705e:	d11b      	bne.n	8007098 <_dtoa_r+0xb8>
 8007060:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007062:	f242 730f 	movw	r3, #9999	; 0x270f
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800706c:	4333      	orrs	r3, r6
 800706e:	f000 8593 	beq.w	8007b98 <_dtoa_r+0xbb8>
 8007072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007074:	b963      	cbnz	r3, 8007090 <_dtoa_r+0xb0>
 8007076:	4b97      	ldr	r3, [pc, #604]	; (80072d4 <_dtoa_r+0x2f4>)
 8007078:	e027      	b.n	80070ca <_dtoa_r+0xea>
 800707a:	4b97      	ldr	r3, [pc, #604]	; (80072d8 <_dtoa_r+0x2f8>)
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	3308      	adds	r3, #8
 8007080:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	9800      	ldr	r0, [sp, #0]
 8007086:	b013      	add	sp, #76	; 0x4c
 8007088:	ecbd 8b04 	vpop	{d8-d9}
 800708c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007090:	4b90      	ldr	r3, [pc, #576]	; (80072d4 <_dtoa_r+0x2f4>)
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	3303      	adds	r3, #3
 8007096:	e7f3      	b.n	8007080 <_dtoa_r+0xa0>
 8007098:	ed9d 7b02 	vldr	d7, [sp, #8]
 800709c:	2200      	movs	r2, #0
 800709e:	ec51 0b17 	vmov	r0, r1, d7
 80070a2:	eeb0 8a47 	vmov.f32	s16, s14
 80070a6:	eef0 8a67 	vmov.f32	s17, s15
 80070aa:	2300      	movs	r3, #0
 80070ac:	f7f9 fd14 	bl	8000ad8 <__aeabi_dcmpeq>
 80070b0:	4681      	mov	r9, r0
 80070b2:	b160      	cbz	r0, 80070ce <_dtoa_r+0xee>
 80070b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070b6:	2301      	movs	r3, #1
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8568 	beq.w	8007b92 <_dtoa_r+0xbb2>
 80070c2:	4b86      	ldr	r3, [pc, #536]	; (80072dc <_dtoa_r+0x2fc>)
 80070c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	e7da      	b.n	8007084 <_dtoa_r+0xa4>
 80070ce:	aa10      	add	r2, sp, #64	; 0x40
 80070d0:	a911      	add	r1, sp, #68	; 0x44
 80070d2:	4620      	mov	r0, r4
 80070d4:	eeb0 0a48 	vmov.f32	s0, s16
 80070d8:	eef0 0a68 	vmov.f32	s1, s17
 80070dc:	f001 fa4e 	bl	800857c <__d2b>
 80070e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80070e4:	4682      	mov	sl, r0
 80070e6:	2d00      	cmp	r5, #0
 80070e8:	d07f      	beq.n	80071ea <_dtoa_r+0x20a>
 80070ea:	ee18 3a90 	vmov	r3, s17
 80070ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80070f6:	ec51 0b18 	vmov	r0, r1, d8
 80070fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80070fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007102:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007106:	4619      	mov	r1, r3
 8007108:	2200      	movs	r2, #0
 800710a:	4b75      	ldr	r3, [pc, #468]	; (80072e0 <_dtoa_r+0x300>)
 800710c:	f7f9 f8c4 	bl	8000298 <__aeabi_dsub>
 8007110:	a367      	add	r3, pc, #412	; (adr r3, 80072b0 <_dtoa_r+0x2d0>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	f7f9 fa77 	bl	8000608 <__aeabi_dmul>
 800711a:	a367      	add	r3, pc, #412	; (adr r3, 80072b8 <_dtoa_r+0x2d8>)
 800711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007120:	f7f9 f8bc 	bl	800029c <__adddf3>
 8007124:	4606      	mov	r6, r0
 8007126:	4628      	mov	r0, r5
 8007128:	460f      	mov	r7, r1
 800712a:	f7f9 fa03 	bl	8000534 <__aeabi_i2d>
 800712e:	a364      	add	r3, pc, #400	; (adr r3, 80072c0 <_dtoa_r+0x2e0>)
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	f7f9 fa68 	bl	8000608 <__aeabi_dmul>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4630      	mov	r0, r6
 800713e:	4639      	mov	r1, r7
 8007140:	f7f9 f8ac 	bl	800029c <__adddf3>
 8007144:	4606      	mov	r6, r0
 8007146:	460f      	mov	r7, r1
 8007148:	f7f9 fd0e 	bl	8000b68 <__aeabi_d2iz>
 800714c:	2200      	movs	r2, #0
 800714e:	4683      	mov	fp, r0
 8007150:	2300      	movs	r3, #0
 8007152:	4630      	mov	r0, r6
 8007154:	4639      	mov	r1, r7
 8007156:	f7f9 fcc9 	bl	8000aec <__aeabi_dcmplt>
 800715a:	b148      	cbz	r0, 8007170 <_dtoa_r+0x190>
 800715c:	4658      	mov	r0, fp
 800715e:	f7f9 f9e9 	bl	8000534 <__aeabi_i2d>
 8007162:	4632      	mov	r2, r6
 8007164:	463b      	mov	r3, r7
 8007166:	f7f9 fcb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800716a:	b908      	cbnz	r0, 8007170 <_dtoa_r+0x190>
 800716c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007170:	f1bb 0f16 	cmp.w	fp, #22
 8007174:	d857      	bhi.n	8007226 <_dtoa_r+0x246>
 8007176:	4b5b      	ldr	r3, [pc, #364]	; (80072e4 <_dtoa_r+0x304>)
 8007178:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	ec51 0b18 	vmov	r0, r1, d8
 8007184:	f7f9 fcb2 	bl	8000aec <__aeabi_dcmplt>
 8007188:	2800      	cmp	r0, #0
 800718a:	d04e      	beq.n	800722a <_dtoa_r+0x24a>
 800718c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007190:	2300      	movs	r3, #0
 8007192:	930c      	str	r3, [sp, #48]	; 0x30
 8007194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007196:	1b5b      	subs	r3, r3, r5
 8007198:	1e5a      	subs	r2, r3, #1
 800719a:	bf45      	ittet	mi
 800719c:	f1c3 0301 	rsbmi	r3, r3, #1
 80071a0:	9305      	strmi	r3, [sp, #20]
 80071a2:	2300      	movpl	r3, #0
 80071a4:	2300      	movmi	r3, #0
 80071a6:	9206      	str	r2, [sp, #24]
 80071a8:	bf54      	ite	pl
 80071aa:	9305      	strpl	r3, [sp, #20]
 80071ac:	9306      	strmi	r3, [sp, #24]
 80071ae:	f1bb 0f00 	cmp.w	fp, #0
 80071b2:	db3c      	blt.n	800722e <_dtoa_r+0x24e>
 80071b4:	9b06      	ldr	r3, [sp, #24]
 80071b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80071ba:	445b      	add	r3, fp
 80071bc:	9306      	str	r3, [sp, #24]
 80071be:	2300      	movs	r3, #0
 80071c0:	9308      	str	r3, [sp, #32]
 80071c2:	9b07      	ldr	r3, [sp, #28]
 80071c4:	2b09      	cmp	r3, #9
 80071c6:	d868      	bhi.n	800729a <_dtoa_r+0x2ba>
 80071c8:	2b05      	cmp	r3, #5
 80071ca:	bfc4      	itt	gt
 80071cc:	3b04      	subgt	r3, #4
 80071ce:	9307      	strgt	r3, [sp, #28]
 80071d0:	9b07      	ldr	r3, [sp, #28]
 80071d2:	f1a3 0302 	sub.w	r3, r3, #2
 80071d6:	bfcc      	ite	gt
 80071d8:	2500      	movgt	r5, #0
 80071da:	2501      	movle	r5, #1
 80071dc:	2b03      	cmp	r3, #3
 80071de:	f200 8085 	bhi.w	80072ec <_dtoa_r+0x30c>
 80071e2:	e8df f003 	tbb	[pc, r3]
 80071e6:	3b2e      	.short	0x3b2e
 80071e8:	5839      	.short	0x5839
 80071ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80071ee:	441d      	add	r5, r3
 80071f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071f4:	2b20      	cmp	r3, #32
 80071f6:	bfc1      	itttt	gt
 80071f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8007200:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007204:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007208:	bfd6      	itet	le
 800720a:	f1c3 0320 	rsble	r3, r3, #32
 800720e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007212:	fa06 f003 	lslle.w	r0, r6, r3
 8007216:	f7f9 f97d 	bl	8000514 <__aeabi_ui2d>
 800721a:	2201      	movs	r2, #1
 800721c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007220:	3d01      	subs	r5, #1
 8007222:	920e      	str	r2, [sp, #56]	; 0x38
 8007224:	e76f      	b.n	8007106 <_dtoa_r+0x126>
 8007226:	2301      	movs	r3, #1
 8007228:	e7b3      	b.n	8007192 <_dtoa_r+0x1b2>
 800722a:	900c      	str	r0, [sp, #48]	; 0x30
 800722c:	e7b2      	b.n	8007194 <_dtoa_r+0x1b4>
 800722e:	9b05      	ldr	r3, [sp, #20]
 8007230:	eba3 030b 	sub.w	r3, r3, fp
 8007234:	9305      	str	r3, [sp, #20]
 8007236:	f1cb 0300 	rsb	r3, fp, #0
 800723a:	9308      	str	r3, [sp, #32]
 800723c:	2300      	movs	r3, #0
 800723e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007240:	e7bf      	b.n	80071c2 <_dtoa_r+0x1e2>
 8007242:	2300      	movs	r3, #0
 8007244:	9309      	str	r3, [sp, #36]	; 0x24
 8007246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007248:	2b00      	cmp	r3, #0
 800724a:	dc52      	bgt.n	80072f2 <_dtoa_r+0x312>
 800724c:	2301      	movs	r3, #1
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	9304      	str	r3, [sp, #16]
 8007252:	461a      	mov	r2, r3
 8007254:	920a      	str	r2, [sp, #40]	; 0x28
 8007256:	e00b      	b.n	8007270 <_dtoa_r+0x290>
 8007258:	2301      	movs	r3, #1
 800725a:	e7f3      	b.n	8007244 <_dtoa_r+0x264>
 800725c:	2300      	movs	r3, #0
 800725e:	9309      	str	r3, [sp, #36]	; 0x24
 8007260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007262:	445b      	add	r3, fp
 8007264:	9301      	str	r3, [sp, #4]
 8007266:	3301      	adds	r3, #1
 8007268:	2b01      	cmp	r3, #1
 800726a:	9304      	str	r3, [sp, #16]
 800726c:	bfb8      	it	lt
 800726e:	2301      	movlt	r3, #1
 8007270:	69e0      	ldr	r0, [r4, #28]
 8007272:	2100      	movs	r1, #0
 8007274:	2204      	movs	r2, #4
 8007276:	f102 0614 	add.w	r6, r2, #20
 800727a:	429e      	cmp	r6, r3
 800727c:	d93d      	bls.n	80072fa <_dtoa_r+0x31a>
 800727e:	6041      	str	r1, [r0, #4]
 8007280:	4620      	mov	r0, r4
 8007282:	f000 fd9f 	bl	8007dc4 <_Balloc>
 8007286:	9000      	str	r0, [sp, #0]
 8007288:	2800      	cmp	r0, #0
 800728a:	d139      	bne.n	8007300 <_dtoa_r+0x320>
 800728c:	4b16      	ldr	r3, [pc, #88]	; (80072e8 <_dtoa_r+0x308>)
 800728e:	4602      	mov	r2, r0
 8007290:	f240 11af 	movw	r1, #431	; 0x1af
 8007294:	e6bd      	b.n	8007012 <_dtoa_r+0x32>
 8007296:	2301      	movs	r3, #1
 8007298:	e7e1      	b.n	800725e <_dtoa_r+0x27e>
 800729a:	2501      	movs	r5, #1
 800729c:	2300      	movs	r3, #0
 800729e:	9307      	str	r3, [sp, #28]
 80072a0:	9509      	str	r5, [sp, #36]	; 0x24
 80072a2:	f04f 33ff 	mov.w	r3, #4294967295
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	9304      	str	r3, [sp, #16]
 80072aa:	2200      	movs	r2, #0
 80072ac:	2312      	movs	r3, #18
 80072ae:	e7d1      	b.n	8007254 <_dtoa_r+0x274>
 80072b0:	636f4361 	.word	0x636f4361
 80072b4:	3fd287a7 	.word	0x3fd287a7
 80072b8:	8b60c8b3 	.word	0x8b60c8b3
 80072bc:	3fc68a28 	.word	0x3fc68a28
 80072c0:	509f79fb 	.word	0x509f79fb
 80072c4:	3fd34413 	.word	0x3fd34413
 80072c8:	0800aff0 	.word	0x0800aff0
 80072cc:	0800b007 	.word	0x0800b007
 80072d0:	7ff00000 	.word	0x7ff00000
 80072d4:	0800afec 	.word	0x0800afec
 80072d8:	0800afe3 	.word	0x0800afe3
 80072dc:	0800b349 	.word	0x0800b349
 80072e0:	3ff80000 	.word	0x3ff80000
 80072e4:	0800b0f8 	.word	0x0800b0f8
 80072e8:	0800b05f 	.word	0x0800b05f
 80072ec:	2301      	movs	r3, #1
 80072ee:	9309      	str	r3, [sp, #36]	; 0x24
 80072f0:	e7d7      	b.n	80072a2 <_dtoa_r+0x2c2>
 80072f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	9304      	str	r3, [sp, #16]
 80072f8:	e7ba      	b.n	8007270 <_dtoa_r+0x290>
 80072fa:	3101      	adds	r1, #1
 80072fc:	0052      	lsls	r2, r2, #1
 80072fe:	e7ba      	b.n	8007276 <_dtoa_r+0x296>
 8007300:	69e3      	ldr	r3, [r4, #28]
 8007302:	9a00      	ldr	r2, [sp, #0]
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	9b04      	ldr	r3, [sp, #16]
 8007308:	2b0e      	cmp	r3, #14
 800730a:	f200 80a8 	bhi.w	800745e <_dtoa_r+0x47e>
 800730e:	2d00      	cmp	r5, #0
 8007310:	f000 80a5 	beq.w	800745e <_dtoa_r+0x47e>
 8007314:	f1bb 0f00 	cmp.w	fp, #0
 8007318:	dd38      	ble.n	800738c <_dtoa_r+0x3ac>
 800731a:	4bc0      	ldr	r3, [pc, #768]	; (800761c <_dtoa_r+0x63c>)
 800731c:	f00b 020f 	and.w	r2, fp, #15
 8007320:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007324:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007328:	e9d3 6700 	ldrd	r6, r7, [r3]
 800732c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007330:	d019      	beq.n	8007366 <_dtoa_r+0x386>
 8007332:	4bbb      	ldr	r3, [pc, #748]	; (8007620 <_dtoa_r+0x640>)
 8007334:	ec51 0b18 	vmov	r0, r1, d8
 8007338:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800733c:	f7f9 fa8e 	bl	800085c <__aeabi_ddiv>
 8007340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007344:	f008 080f 	and.w	r8, r8, #15
 8007348:	2503      	movs	r5, #3
 800734a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007620 <_dtoa_r+0x640>
 800734e:	f1b8 0f00 	cmp.w	r8, #0
 8007352:	d10a      	bne.n	800736a <_dtoa_r+0x38a>
 8007354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007358:	4632      	mov	r2, r6
 800735a:	463b      	mov	r3, r7
 800735c:	f7f9 fa7e 	bl	800085c <__aeabi_ddiv>
 8007360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007364:	e02b      	b.n	80073be <_dtoa_r+0x3de>
 8007366:	2502      	movs	r5, #2
 8007368:	e7ef      	b.n	800734a <_dtoa_r+0x36a>
 800736a:	f018 0f01 	tst.w	r8, #1
 800736e:	d008      	beq.n	8007382 <_dtoa_r+0x3a2>
 8007370:	4630      	mov	r0, r6
 8007372:	4639      	mov	r1, r7
 8007374:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007378:	f7f9 f946 	bl	8000608 <__aeabi_dmul>
 800737c:	3501      	adds	r5, #1
 800737e:	4606      	mov	r6, r0
 8007380:	460f      	mov	r7, r1
 8007382:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007386:	f109 0908 	add.w	r9, r9, #8
 800738a:	e7e0      	b.n	800734e <_dtoa_r+0x36e>
 800738c:	f000 809f 	beq.w	80074ce <_dtoa_r+0x4ee>
 8007390:	f1cb 0600 	rsb	r6, fp, #0
 8007394:	4ba1      	ldr	r3, [pc, #644]	; (800761c <_dtoa_r+0x63c>)
 8007396:	4fa2      	ldr	r7, [pc, #648]	; (8007620 <_dtoa_r+0x640>)
 8007398:	f006 020f 	and.w	r2, r6, #15
 800739c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	ec51 0b18 	vmov	r0, r1, d8
 80073a8:	f7f9 f92e 	bl	8000608 <__aeabi_dmul>
 80073ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073b0:	1136      	asrs	r6, r6, #4
 80073b2:	2300      	movs	r3, #0
 80073b4:	2502      	movs	r5, #2
 80073b6:	2e00      	cmp	r6, #0
 80073b8:	d17e      	bne.n	80074b8 <_dtoa_r+0x4d8>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1d0      	bne.n	8007360 <_dtoa_r+0x380>
 80073be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 8084 	beq.w	80074d2 <_dtoa_r+0x4f2>
 80073ca:	4b96      	ldr	r3, [pc, #600]	; (8007624 <_dtoa_r+0x644>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	4640      	mov	r0, r8
 80073d0:	4649      	mov	r1, r9
 80073d2:	f7f9 fb8b 	bl	8000aec <__aeabi_dcmplt>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d07b      	beq.n	80074d2 <_dtoa_r+0x4f2>
 80073da:	9b04      	ldr	r3, [sp, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d078      	beq.n	80074d2 <_dtoa_r+0x4f2>
 80073e0:	9b01      	ldr	r3, [sp, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	dd39      	ble.n	800745a <_dtoa_r+0x47a>
 80073e6:	4b90      	ldr	r3, [pc, #576]	; (8007628 <_dtoa_r+0x648>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	4640      	mov	r0, r8
 80073ec:	4649      	mov	r1, r9
 80073ee:	f7f9 f90b 	bl	8000608 <__aeabi_dmul>
 80073f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073f6:	9e01      	ldr	r6, [sp, #4]
 80073f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80073fc:	3501      	adds	r5, #1
 80073fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007402:	4628      	mov	r0, r5
 8007404:	f7f9 f896 	bl	8000534 <__aeabi_i2d>
 8007408:	4642      	mov	r2, r8
 800740a:	464b      	mov	r3, r9
 800740c:	f7f9 f8fc 	bl	8000608 <__aeabi_dmul>
 8007410:	4b86      	ldr	r3, [pc, #536]	; (800762c <_dtoa_r+0x64c>)
 8007412:	2200      	movs	r2, #0
 8007414:	f7f8 ff42 	bl	800029c <__adddf3>
 8007418:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800741c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007420:	9303      	str	r3, [sp, #12]
 8007422:	2e00      	cmp	r6, #0
 8007424:	d158      	bne.n	80074d8 <_dtoa_r+0x4f8>
 8007426:	4b82      	ldr	r3, [pc, #520]	; (8007630 <_dtoa_r+0x650>)
 8007428:	2200      	movs	r2, #0
 800742a:	4640      	mov	r0, r8
 800742c:	4649      	mov	r1, r9
 800742e:	f7f8 ff33 	bl	8000298 <__aeabi_dsub>
 8007432:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007436:	4680      	mov	r8, r0
 8007438:	4689      	mov	r9, r1
 800743a:	f7f9 fb75 	bl	8000b28 <__aeabi_dcmpgt>
 800743e:	2800      	cmp	r0, #0
 8007440:	f040 8296 	bne.w	8007970 <_dtoa_r+0x990>
 8007444:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007448:	4640      	mov	r0, r8
 800744a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800744e:	4649      	mov	r1, r9
 8007450:	f7f9 fb4c 	bl	8000aec <__aeabi_dcmplt>
 8007454:	2800      	cmp	r0, #0
 8007456:	f040 8289 	bne.w	800796c <_dtoa_r+0x98c>
 800745a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800745e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007460:	2b00      	cmp	r3, #0
 8007462:	f2c0 814e 	blt.w	8007702 <_dtoa_r+0x722>
 8007466:	f1bb 0f0e 	cmp.w	fp, #14
 800746a:	f300 814a 	bgt.w	8007702 <_dtoa_r+0x722>
 800746e:	4b6b      	ldr	r3, [pc, #428]	; (800761c <_dtoa_r+0x63c>)
 8007470:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007474:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800747a:	2b00      	cmp	r3, #0
 800747c:	f280 80dc 	bge.w	8007638 <_dtoa_r+0x658>
 8007480:	9b04      	ldr	r3, [sp, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	f300 80d8 	bgt.w	8007638 <_dtoa_r+0x658>
 8007488:	f040 826f 	bne.w	800796a <_dtoa_r+0x98a>
 800748c:	4b68      	ldr	r3, [pc, #416]	; (8007630 <_dtoa_r+0x650>)
 800748e:	2200      	movs	r2, #0
 8007490:	4640      	mov	r0, r8
 8007492:	4649      	mov	r1, r9
 8007494:	f7f9 f8b8 	bl	8000608 <__aeabi_dmul>
 8007498:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800749c:	f7f9 fb3a 	bl	8000b14 <__aeabi_dcmpge>
 80074a0:	9e04      	ldr	r6, [sp, #16]
 80074a2:	4637      	mov	r7, r6
 80074a4:	2800      	cmp	r0, #0
 80074a6:	f040 8245 	bne.w	8007934 <_dtoa_r+0x954>
 80074aa:	9d00      	ldr	r5, [sp, #0]
 80074ac:	2331      	movs	r3, #49	; 0x31
 80074ae:	f805 3b01 	strb.w	r3, [r5], #1
 80074b2:	f10b 0b01 	add.w	fp, fp, #1
 80074b6:	e241      	b.n	800793c <_dtoa_r+0x95c>
 80074b8:	07f2      	lsls	r2, r6, #31
 80074ba:	d505      	bpl.n	80074c8 <_dtoa_r+0x4e8>
 80074bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074c0:	f7f9 f8a2 	bl	8000608 <__aeabi_dmul>
 80074c4:	3501      	adds	r5, #1
 80074c6:	2301      	movs	r3, #1
 80074c8:	1076      	asrs	r6, r6, #1
 80074ca:	3708      	adds	r7, #8
 80074cc:	e773      	b.n	80073b6 <_dtoa_r+0x3d6>
 80074ce:	2502      	movs	r5, #2
 80074d0:	e775      	b.n	80073be <_dtoa_r+0x3de>
 80074d2:	9e04      	ldr	r6, [sp, #16]
 80074d4:	465f      	mov	r7, fp
 80074d6:	e792      	b.n	80073fe <_dtoa_r+0x41e>
 80074d8:	9900      	ldr	r1, [sp, #0]
 80074da:	4b50      	ldr	r3, [pc, #320]	; (800761c <_dtoa_r+0x63c>)
 80074dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074e0:	4431      	add	r1, r6
 80074e2:	9102      	str	r1, [sp, #8]
 80074e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074e6:	eeb0 9a47 	vmov.f32	s18, s14
 80074ea:	eef0 9a67 	vmov.f32	s19, s15
 80074ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074f6:	2900      	cmp	r1, #0
 80074f8:	d044      	beq.n	8007584 <_dtoa_r+0x5a4>
 80074fa:	494e      	ldr	r1, [pc, #312]	; (8007634 <_dtoa_r+0x654>)
 80074fc:	2000      	movs	r0, #0
 80074fe:	f7f9 f9ad 	bl	800085c <__aeabi_ddiv>
 8007502:	ec53 2b19 	vmov	r2, r3, d9
 8007506:	f7f8 fec7 	bl	8000298 <__aeabi_dsub>
 800750a:	9d00      	ldr	r5, [sp, #0]
 800750c:	ec41 0b19 	vmov	d9, r0, r1
 8007510:	4649      	mov	r1, r9
 8007512:	4640      	mov	r0, r8
 8007514:	f7f9 fb28 	bl	8000b68 <__aeabi_d2iz>
 8007518:	4606      	mov	r6, r0
 800751a:	f7f9 f80b 	bl	8000534 <__aeabi_i2d>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	f7f8 feb7 	bl	8000298 <__aeabi_dsub>
 800752a:	3630      	adds	r6, #48	; 0x30
 800752c:	f805 6b01 	strb.w	r6, [r5], #1
 8007530:	ec53 2b19 	vmov	r2, r3, d9
 8007534:	4680      	mov	r8, r0
 8007536:	4689      	mov	r9, r1
 8007538:	f7f9 fad8 	bl	8000aec <__aeabi_dcmplt>
 800753c:	2800      	cmp	r0, #0
 800753e:	d164      	bne.n	800760a <_dtoa_r+0x62a>
 8007540:	4642      	mov	r2, r8
 8007542:	464b      	mov	r3, r9
 8007544:	4937      	ldr	r1, [pc, #220]	; (8007624 <_dtoa_r+0x644>)
 8007546:	2000      	movs	r0, #0
 8007548:	f7f8 fea6 	bl	8000298 <__aeabi_dsub>
 800754c:	ec53 2b19 	vmov	r2, r3, d9
 8007550:	f7f9 facc 	bl	8000aec <__aeabi_dcmplt>
 8007554:	2800      	cmp	r0, #0
 8007556:	f040 80b6 	bne.w	80076c6 <_dtoa_r+0x6e6>
 800755a:	9b02      	ldr	r3, [sp, #8]
 800755c:	429d      	cmp	r5, r3
 800755e:	f43f af7c 	beq.w	800745a <_dtoa_r+0x47a>
 8007562:	4b31      	ldr	r3, [pc, #196]	; (8007628 <_dtoa_r+0x648>)
 8007564:	ec51 0b19 	vmov	r0, r1, d9
 8007568:	2200      	movs	r2, #0
 800756a:	f7f9 f84d 	bl	8000608 <__aeabi_dmul>
 800756e:	4b2e      	ldr	r3, [pc, #184]	; (8007628 <_dtoa_r+0x648>)
 8007570:	ec41 0b19 	vmov	d9, r0, r1
 8007574:	2200      	movs	r2, #0
 8007576:	4640      	mov	r0, r8
 8007578:	4649      	mov	r1, r9
 800757a:	f7f9 f845 	bl	8000608 <__aeabi_dmul>
 800757e:	4680      	mov	r8, r0
 8007580:	4689      	mov	r9, r1
 8007582:	e7c5      	b.n	8007510 <_dtoa_r+0x530>
 8007584:	ec51 0b17 	vmov	r0, r1, d7
 8007588:	f7f9 f83e 	bl	8000608 <__aeabi_dmul>
 800758c:	9b02      	ldr	r3, [sp, #8]
 800758e:	9d00      	ldr	r5, [sp, #0]
 8007590:	930f      	str	r3, [sp, #60]	; 0x3c
 8007592:	ec41 0b19 	vmov	d9, r0, r1
 8007596:	4649      	mov	r1, r9
 8007598:	4640      	mov	r0, r8
 800759a:	f7f9 fae5 	bl	8000b68 <__aeabi_d2iz>
 800759e:	4606      	mov	r6, r0
 80075a0:	f7f8 ffc8 	bl	8000534 <__aeabi_i2d>
 80075a4:	3630      	adds	r6, #48	; 0x30
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4640      	mov	r0, r8
 80075ac:	4649      	mov	r1, r9
 80075ae:	f7f8 fe73 	bl	8000298 <__aeabi_dsub>
 80075b2:	f805 6b01 	strb.w	r6, [r5], #1
 80075b6:	9b02      	ldr	r3, [sp, #8]
 80075b8:	429d      	cmp	r5, r3
 80075ba:	4680      	mov	r8, r0
 80075bc:	4689      	mov	r9, r1
 80075be:	f04f 0200 	mov.w	r2, #0
 80075c2:	d124      	bne.n	800760e <_dtoa_r+0x62e>
 80075c4:	4b1b      	ldr	r3, [pc, #108]	; (8007634 <_dtoa_r+0x654>)
 80075c6:	ec51 0b19 	vmov	r0, r1, d9
 80075ca:	f7f8 fe67 	bl	800029c <__adddf3>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4640      	mov	r0, r8
 80075d4:	4649      	mov	r1, r9
 80075d6:	f7f9 faa7 	bl	8000b28 <__aeabi_dcmpgt>
 80075da:	2800      	cmp	r0, #0
 80075dc:	d173      	bne.n	80076c6 <_dtoa_r+0x6e6>
 80075de:	ec53 2b19 	vmov	r2, r3, d9
 80075e2:	4914      	ldr	r1, [pc, #80]	; (8007634 <_dtoa_r+0x654>)
 80075e4:	2000      	movs	r0, #0
 80075e6:	f7f8 fe57 	bl	8000298 <__aeabi_dsub>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4640      	mov	r0, r8
 80075f0:	4649      	mov	r1, r9
 80075f2:	f7f9 fa7b 	bl	8000aec <__aeabi_dcmplt>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f43f af2f 	beq.w	800745a <_dtoa_r+0x47a>
 80075fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80075fe:	1e6b      	subs	r3, r5, #1
 8007600:	930f      	str	r3, [sp, #60]	; 0x3c
 8007602:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007606:	2b30      	cmp	r3, #48	; 0x30
 8007608:	d0f8      	beq.n	80075fc <_dtoa_r+0x61c>
 800760a:	46bb      	mov	fp, r7
 800760c:	e04a      	b.n	80076a4 <_dtoa_r+0x6c4>
 800760e:	4b06      	ldr	r3, [pc, #24]	; (8007628 <_dtoa_r+0x648>)
 8007610:	f7f8 fffa 	bl	8000608 <__aeabi_dmul>
 8007614:	4680      	mov	r8, r0
 8007616:	4689      	mov	r9, r1
 8007618:	e7bd      	b.n	8007596 <_dtoa_r+0x5b6>
 800761a:	bf00      	nop
 800761c:	0800b0f8 	.word	0x0800b0f8
 8007620:	0800b0d0 	.word	0x0800b0d0
 8007624:	3ff00000 	.word	0x3ff00000
 8007628:	40240000 	.word	0x40240000
 800762c:	401c0000 	.word	0x401c0000
 8007630:	40140000 	.word	0x40140000
 8007634:	3fe00000 	.word	0x3fe00000
 8007638:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800763c:	9d00      	ldr	r5, [sp, #0]
 800763e:	4642      	mov	r2, r8
 8007640:	464b      	mov	r3, r9
 8007642:	4630      	mov	r0, r6
 8007644:	4639      	mov	r1, r7
 8007646:	f7f9 f909 	bl	800085c <__aeabi_ddiv>
 800764a:	f7f9 fa8d 	bl	8000b68 <__aeabi_d2iz>
 800764e:	9001      	str	r0, [sp, #4]
 8007650:	f7f8 ff70 	bl	8000534 <__aeabi_i2d>
 8007654:	4642      	mov	r2, r8
 8007656:	464b      	mov	r3, r9
 8007658:	f7f8 ffd6 	bl	8000608 <__aeabi_dmul>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4630      	mov	r0, r6
 8007662:	4639      	mov	r1, r7
 8007664:	f7f8 fe18 	bl	8000298 <__aeabi_dsub>
 8007668:	9e01      	ldr	r6, [sp, #4]
 800766a:	9f04      	ldr	r7, [sp, #16]
 800766c:	3630      	adds	r6, #48	; 0x30
 800766e:	f805 6b01 	strb.w	r6, [r5], #1
 8007672:	9e00      	ldr	r6, [sp, #0]
 8007674:	1bae      	subs	r6, r5, r6
 8007676:	42b7      	cmp	r7, r6
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	d134      	bne.n	80076e8 <_dtoa_r+0x708>
 800767e:	f7f8 fe0d 	bl	800029c <__adddf3>
 8007682:	4642      	mov	r2, r8
 8007684:	464b      	mov	r3, r9
 8007686:	4606      	mov	r6, r0
 8007688:	460f      	mov	r7, r1
 800768a:	f7f9 fa4d 	bl	8000b28 <__aeabi_dcmpgt>
 800768e:	b9c8      	cbnz	r0, 80076c4 <_dtoa_r+0x6e4>
 8007690:	4642      	mov	r2, r8
 8007692:	464b      	mov	r3, r9
 8007694:	4630      	mov	r0, r6
 8007696:	4639      	mov	r1, r7
 8007698:	f7f9 fa1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800769c:	b110      	cbz	r0, 80076a4 <_dtoa_r+0x6c4>
 800769e:	9b01      	ldr	r3, [sp, #4]
 80076a0:	07db      	lsls	r3, r3, #31
 80076a2:	d40f      	bmi.n	80076c4 <_dtoa_r+0x6e4>
 80076a4:	4651      	mov	r1, sl
 80076a6:	4620      	mov	r0, r4
 80076a8:	f000 fbcc 	bl	8007e44 <_Bfree>
 80076ac:	2300      	movs	r3, #0
 80076ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076b0:	702b      	strb	r3, [r5, #0]
 80076b2:	f10b 0301 	add.w	r3, fp, #1
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f43f ace2 	beq.w	8007084 <_dtoa_r+0xa4>
 80076c0:	601d      	str	r5, [r3, #0]
 80076c2:	e4df      	b.n	8007084 <_dtoa_r+0xa4>
 80076c4:	465f      	mov	r7, fp
 80076c6:	462b      	mov	r3, r5
 80076c8:	461d      	mov	r5, r3
 80076ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ce:	2a39      	cmp	r2, #57	; 0x39
 80076d0:	d106      	bne.n	80076e0 <_dtoa_r+0x700>
 80076d2:	9a00      	ldr	r2, [sp, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d1f7      	bne.n	80076c8 <_dtoa_r+0x6e8>
 80076d8:	9900      	ldr	r1, [sp, #0]
 80076da:	2230      	movs	r2, #48	; 0x30
 80076dc:	3701      	adds	r7, #1
 80076de:	700a      	strb	r2, [r1, #0]
 80076e0:	781a      	ldrb	r2, [r3, #0]
 80076e2:	3201      	adds	r2, #1
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	e790      	b.n	800760a <_dtoa_r+0x62a>
 80076e8:	4ba3      	ldr	r3, [pc, #652]	; (8007978 <_dtoa_r+0x998>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	f7f8 ff8c 	bl	8000608 <__aeabi_dmul>
 80076f0:	2200      	movs	r2, #0
 80076f2:	2300      	movs	r3, #0
 80076f4:	4606      	mov	r6, r0
 80076f6:	460f      	mov	r7, r1
 80076f8:	f7f9 f9ee 	bl	8000ad8 <__aeabi_dcmpeq>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d09e      	beq.n	800763e <_dtoa_r+0x65e>
 8007700:	e7d0      	b.n	80076a4 <_dtoa_r+0x6c4>
 8007702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007704:	2a00      	cmp	r2, #0
 8007706:	f000 80ca 	beq.w	800789e <_dtoa_r+0x8be>
 800770a:	9a07      	ldr	r2, [sp, #28]
 800770c:	2a01      	cmp	r2, #1
 800770e:	f300 80ad 	bgt.w	800786c <_dtoa_r+0x88c>
 8007712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007714:	2a00      	cmp	r2, #0
 8007716:	f000 80a5 	beq.w	8007864 <_dtoa_r+0x884>
 800771a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800771e:	9e08      	ldr	r6, [sp, #32]
 8007720:	9d05      	ldr	r5, [sp, #20]
 8007722:	9a05      	ldr	r2, [sp, #20]
 8007724:	441a      	add	r2, r3
 8007726:	9205      	str	r2, [sp, #20]
 8007728:	9a06      	ldr	r2, [sp, #24]
 800772a:	2101      	movs	r1, #1
 800772c:	441a      	add	r2, r3
 800772e:	4620      	mov	r0, r4
 8007730:	9206      	str	r2, [sp, #24]
 8007732:	f000 fc87 	bl	8008044 <__i2b>
 8007736:	4607      	mov	r7, r0
 8007738:	b165      	cbz	r5, 8007754 <_dtoa_r+0x774>
 800773a:	9b06      	ldr	r3, [sp, #24]
 800773c:	2b00      	cmp	r3, #0
 800773e:	dd09      	ble.n	8007754 <_dtoa_r+0x774>
 8007740:	42ab      	cmp	r3, r5
 8007742:	9a05      	ldr	r2, [sp, #20]
 8007744:	bfa8      	it	ge
 8007746:	462b      	movge	r3, r5
 8007748:	1ad2      	subs	r2, r2, r3
 800774a:	9205      	str	r2, [sp, #20]
 800774c:	9a06      	ldr	r2, [sp, #24]
 800774e:	1aed      	subs	r5, r5, r3
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	9306      	str	r3, [sp, #24]
 8007754:	9b08      	ldr	r3, [sp, #32]
 8007756:	b1f3      	cbz	r3, 8007796 <_dtoa_r+0x7b6>
 8007758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 80a3 	beq.w	80078a6 <_dtoa_r+0x8c6>
 8007760:	2e00      	cmp	r6, #0
 8007762:	dd10      	ble.n	8007786 <_dtoa_r+0x7a6>
 8007764:	4639      	mov	r1, r7
 8007766:	4632      	mov	r2, r6
 8007768:	4620      	mov	r0, r4
 800776a:	f000 fd2b 	bl	80081c4 <__pow5mult>
 800776e:	4652      	mov	r2, sl
 8007770:	4601      	mov	r1, r0
 8007772:	4607      	mov	r7, r0
 8007774:	4620      	mov	r0, r4
 8007776:	f000 fc7b 	bl	8008070 <__multiply>
 800777a:	4651      	mov	r1, sl
 800777c:	4680      	mov	r8, r0
 800777e:	4620      	mov	r0, r4
 8007780:	f000 fb60 	bl	8007e44 <_Bfree>
 8007784:	46c2      	mov	sl, r8
 8007786:	9b08      	ldr	r3, [sp, #32]
 8007788:	1b9a      	subs	r2, r3, r6
 800778a:	d004      	beq.n	8007796 <_dtoa_r+0x7b6>
 800778c:	4651      	mov	r1, sl
 800778e:	4620      	mov	r0, r4
 8007790:	f000 fd18 	bl	80081c4 <__pow5mult>
 8007794:	4682      	mov	sl, r0
 8007796:	2101      	movs	r1, #1
 8007798:	4620      	mov	r0, r4
 800779a:	f000 fc53 	bl	8008044 <__i2b>
 800779e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	4606      	mov	r6, r0
 80077a4:	f340 8081 	ble.w	80078aa <_dtoa_r+0x8ca>
 80077a8:	461a      	mov	r2, r3
 80077aa:	4601      	mov	r1, r0
 80077ac:	4620      	mov	r0, r4
 80077ae:	f000 fd09 	bl	80081c4 <__pow5mult>
 80077b2:	9b07      	ldr	r3, [sp, #28]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	4606      	mov	r6, r0
 80077b8:	dd7a      	ble.n	80078b0 <_dtoa_r+0x8d0>
 80077ba:	f04f 0800 	mov.w	r8, #0
 80077be:	6933      	ldr	r3, [r6, #16]
 80077c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077c4:	6918      	ldr	r0, [r3, #16]
 80077c6:	f000 fbef 	bl	8007fa8 <__hi0bits>
 80077ca:	f1c0 0020 	rsb	r0, r0, #32
 80077ce:	9b06      	ldr	r3, [sp, #24]
 80077d0:	4418      	add	r0, r3
 80077d2:	f010 001f 	ands.w	r0, r0, #31
 80077d6:	f000 8094 	beq.w	8007902 <_dtoa_r+0x922>
 80077da:	f1c0 0320 	rsb	r3, r0, #32
 80077de:	2b04      	cmp	r3, #4
 80077e0:	f340 8085 	ble.w	80078ee <_dtoa_r+0x90e>
 80077e4:	9b05      	ldr	r3, [sp, #20]
 80077e6:	f1c0 001c 	rsb	r0, r0, #28
 80077ea:	4403      	add	r3, r0
 80077ec:	9305      	str	r3, [sp, #20]
 80077ee:	9b06      	ldr	r3, [sp, #24]
 80077f0:	4403      	add	r3, r0
 80077f2:	4405      	add	r5, r0
 80077f4:	9306      	str	r3, [sp, #24]
 80077f6:	9b05      	ldr	r3, [sp, #20]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	dd05      	ble.n	8007808 <_dtoa_r+0x828>
 80077fc:	4651      	mov	r1, sl
 80077fe:	461a      	mov	r2, r3
 8007800:	4620      	mov	r0, r4
 8007802:	f000 fd39 	bl	8008278 <__lshift>
 8007806:	4682      	mov	sl, r0
 8007808:	9b06      	ldr	r3, [sp, #24]
 800780a:	2b00      	cmp	r3, #0
 800780c:	dd05      	ble.n	800781a <_dtoa_r+0x83a>
 800780e:	4631      	mov	r1, r6
 8007810:	461a      	mov	r2, r3
 8007812:	4620      	mov	r0, r4
 8007814:	f000 fd30 	bl	8008278 <__lshift>
 8007818:	4606      	mov	r6, r0
 800781a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800781c:	2b00      	cmp	r3, #0
 800781e:	d072      	beq.n	8007906 <_dtoa_r+0x926>
 8007820:	4631      	mov	r1, r6
 8007822:	4650      	mov	r0, sl
 8007824:	f000 fd94 	bl	8008350 <__mcmp>
 8007828:	2800      	cmp	r0, #0
 800782a:	da6c      	bge.n	8007906 <_dtoa_r+0x926>
 800782c:	2300      	movs	r3, #0
 800782e:	4651      	mov	r1, sl
 8007830:	220a      	movs	r2, #10
 8007832:	4620      	mov	r0, r4
 8007834:	f000 fb28 	bl	8007e88 <__multadd>
 8007838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800783a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800783e:	4682      	mov	sl, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 81b0 	beq.w	8007ba6 <_dtoa_r+0xbc6>
 8007846:	2300      	movs	r3, #0
 8007848:	4639      	mov	r1, r7
 800784a:	220a      	movs	r2, #10
 800784c:	4620      	mov	r0, r4
 800784e:	f000 fb1b 	bl	8007e88 <__multadd>
 8007852:	9b01      	ldr	r3, [sp, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	4607      	mov	r7, r0
 8007858:	f300 8096 	bgt.w	8007988 <_dtoa_r+0x9a8>
 800785c:	9b07      	ldr	r3, [sp, #28]
 800785e:	2b02      	cmp	r3, #2
 8007860:	dc59      	bgt.n	8007916 <_dtoa_r+0x936>
 8007862:	e091      	b.n	8007988 <_dtoa_r+0x9a8>
 8007864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007866:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800786a:	e758      	b.n	800771e <_dtoa_r+0x73e>
 800786c:	9b04      	ldr	r3, [sp, #16]
 800786e:	1e5e      	subs	r6, r3, #1
 8007870:	9b08      	ldr	r3, [sp, #32]
 8007872:	42b3      	cmp	r3, r6
 8007874:	bfbf      	itttt	lt
 8007876:	9b08      	ldrlt	r3, [sp, #32]
 8007878:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800787a:	9608      	strlt	r6, [sp, #32]
 800787c:	1af3      	sublt	r3, r6, r3
 800787e:	bfb4      	ite	lt
 8007880:	18d2      	addlt	r2, r2, r3
 8007882:	1b9e      	subge	r6, r3, r6
 8007884:	9b04      	ldr	r3, [sp, #16]
 8007886:	bfbc      	itt	lt
 8007888:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800788a:	2600      	movlt	r6, #0
 800788c:	2b00      	cmp	r3, #0
 800788e:	bfb7      	itett	lt
 8007890:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007894:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007898:	1a9d      	sublt	r5, r3, r2
 800789a:	2300      	movlt	r3, #0
 800789c:	e741      	b.n	8007722 <_dtoa_r+0x742>
 800789e:	9e08      	ldr	r6, [sp, #32]
 80078a0:	9d05      	ldr	r5, [sp, #20]
 80078a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80078a4:	e748      	b.n	8007738 <_dtoa_r+0x758>
 80078a6:	9a08      	ldr	r2, [sp, #32]
 80078a8:	e770      	b.n	800778c <_dtoa_r+0x7ac>
 80078aa:	9b07      	ldr	r3, [sp, #28]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	dc19      	bgt.n	80078e4 <_dtoa_r+0x904>
 80078b0:	9b02      	ldr	r3, [sp, #8]
 80078b2:	b9bb      	cbnz	r3, 80078e4 <_dtoa_r+0x904>
 80078b4:	9b03      	ldr	r3, [sp, #12]
 80078b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078ba:	b99b      	cbnz	r3, 80078e4 <_dtoa_r+0x904>
 80078bc:	9b03      	ldr	r3, [sp, #12]
 80078be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078c2:	0d1b      	lsrs	r3, r3, #20
 80078c4:	051b      	lsls	r3, r3, #20
 80078c6:	b183      	cbz	r3, 80078ea <_dtoa_r+0x90a>
 80078c8:	9b05      	ldr	r3, [sp, #20]
 80078ca:	3301      	adds	r3, #1
 80078cc:	9305      	str	r3, [sp, #20]
 80078ce:	9b06      	ldr	r3, [sp, #24]
 80078d0:	3301      	adds	r3, #1
 80078d2:	9306      	str	r3, [sp, #24]
 80078d4:	f04f 0801 	mov.w	r8, #1
 80078d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f47f af6f 	bne.w	80077be <_dtoa_r+0x7de>
 80078e0:	2001      	movs	r0, #1
 80078e2:	e774      	b.n	80077ce <_dtoa_r+0x7ee>
 80078e4:	f04f 0800 	mov.w	r8, #0
 80078e8:	e7f6      	b.n	80078d8 <_dtoa_r+0x8f8>
 80078ea:	4698      	mov	r8, r3
 80078ec:	e7f4      	b.n	80078d8 <_dtoa_r+0x8f8>
 80078ee:	d082      	beq.n	80077f6 <_dtoa_r+0x816>
 80078f0:	9a05      	ldr	r2, [sp, #20]
 80078f2:	331c      	adds	r3, #28
 80078f4:	441a      	add	r2, r3
 80078f6:	9205      	str	r2, [sp, #20]
 80078f8:	9a06      	ldr	r2, [sp, #24]
 80078fa:	441a      	add	r2, r3
 80078fc:	441d      	add	r5, r3
 80078fe:	9206      	str	r2, [sp, #24]
 8007900:	e779      	b.n	80077f6 <_dtoa_r+0x816>
 8007902:	4603      	mov	r3, r0
 8007904:	e7f4      	b.n	80078f0 <_dtoa_r+0x910>
 8007906:	9b04      	ldr	r3, [sp, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	dc37      	bgt.n	800797c <_dtoa_r+0x99c>
 800790c:	9b07      	ldr	r3, [sp, #28]
 800790e:	2b02      	cmp	r3, #2
 8007910:	dd34      	ble.n	800797c <_dtoa_r+0x99c>
 8007912:	9b04      	ldr	r3, [sp, #16]
 8007914:	9301      	str	r3, [sp, #4]
 8007916:	9b01      	ldr	r3, [sp, #4]
 8007918:	b963      	cbnz	r3, 8007934 <_dtoa_r+0x954>
 800791a:	4631      	mov	r1, r6
 800791c:	2205      	movs	r2, #5
 800791e:	4620      	mov	r0, r4
 8007920:	f000 fab2 	bl	8007e88 <__multadd>
 8007924:	4601      	mov	r1, r0
 8007926:	4606      	mov	r6, r0
 8007928:	4650      	mov	r0, sl
 800792a:	f000 fd11 	bl	8008350 <__mcmp>
 800792e:	2800      	cmp	r0, #0
 8007930:	f73f adbb 	bgt.w	80074aa <_dtoa_r+0x4ca>
 8007934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007936:	9d00      	ldr	r5, [sp, #0]
 8007938:	ea6f 0b03 	mvn.w	fp, r3
 800793c:	f04f 0800 	mov.w	r8, #0
 8007940:	4631      	mov	r1, r6
 8007942:	4620      	mov	r0, r4
 8007944:	f000 fa7e 	bl	8007e44 <_Bfree>
 8007948:	2f00      	cmp	r7, #0
 800794a:	f43f aeab 	beq.w	80076a4 <_dtoa_r+0x6c4>
 800794e:	f1b8 0f00 	cmp.w	r8, #0
 8007952:	d005      	beq.n	8007960 <_dtoa_r+0x980>
 8007954:	45b8      	cmp	r8, r7
 8007956:	d003      	beq.n	8007960 <_dtoa_r+0x980>
 8007958:	4641      	mov	r1, r8
 800795a:	4620      	mov	r0, r4
 800795c:	f000 fa72 	bl	8007e44 <_Bfree>
 8007960:	4639      	mov	r1, r7
 8007962:	4620      	mov	r0, r4
 8007964:	f000 fa6e 	bl	8007e44 <_Bfree>
 8007968:	e69c      	b.n	80076a4 <_dtoa_r+0x6c4>
 800796a:	2600      	movs	r6, #0
 800796c:	4637      	mov	r7, r6
 800796e:	e7e1      	b.n	8007934 <_dtoa_r+0x954>
 8007970:	46bb      	mov	fp, r7
 8007972:	4637      	mov	r7, r6
 8007974:	e599      	b.n	80074aa <_dtoa_r+0x4ca>
 8007976:	bf00      	nop
 8007978:	40240000 	.word	0x40240000
 800797c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 80c8 	beq.w	8007b14 <_dtoa_r+0xb34>
 8007984:	9b04      	ldr	r3, [sp, #16]
 8007986:	9301      	str	r3, [sp, #4]
 8007988:	2d00      	cmp	r5, #0
 800798a:	dd05      	ble.n	8007998 <_dtoa_r+0x9b8>
 800798c:	4639      	mov	r1, r7
 800798e:	462a      	mov	r2, r5
 8007990:	4620      	mov	r0, r4
 8007992:	f000 fc71 	bl	8008278 <__lshift>
 8007996:	4607      	mov	r7, r0
 8007998:	f1b8 0f00 	cmp.w	r8, #0
 800799c:	d05b      	beq.n	8007a56 <_dtoa_r+0xa76>
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 fa0f 	bl	8007dc4 <_Balloc>
 80079a6:	4605      	mov	r5, r0
 80079a8:	b928      	cbnz	r0, 80079b6 <_dtoa_r+0x9d6>
 80079aa:	4b83      	ldr	r3, [pc, #524]	; (8007bb8 <_dtoa_r+0xbd8>)
 80079ac:	4602      	mov	r2, r0
 80079ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80079b2:	f7ff bb2e 	b.w	8007012 <_dtoa_r+0x32>
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	3202      	adds	r2, #2
 80079ba:	0092      	lsls	r2, r2, #2
 80079bc:	f107 010c 	add.w	r1, r7, #12
 80079c0:	300c      	adds	r0, #12
 80079c2:	f7ff fa6e 	bl	8006ea2 <memcpy>
 80079c6:	2201      	movs	r2, #1
 80079c8:	4629      	mov	r1, r5
 80079ca:	4620      	mov	r0, r4
 80079cc:	f000 fc54 	bl	8008278 <__lshift>
 80079d0:	9b00      	ldr	r3, [sp, #0]
 80079d2:	3301      	adds	r3, #1
 80079d4:	9304      	str	r3, [sp, #16]
 80079d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079da:	4413      	add	r3, r2
 80079dc:	9308      	str	r3, [sp, #32]
 80079de:	9b02      	ldr	r3, [sp, #8]
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	46b8      	mov	r8, r7
 80079e6:	9306      	str	r3, [sp, #24]
 80079e8:	4607      	mov	r7, r0
 80079ea:	9b04      	ldr	r3, [sp, #16]
 80079ec:	4631      	mov	r1, r6
 80079ee:	3b01      	subs	r3, #1
 80079f0:	4650      	mov	r0, sl
 80079f2:	9301      	str	r3, [sp, #4]
 80079f4:	f7ff fa6a 	bl	8006ecc <quorem>
 80079f8:	4641      	mov	r1, r8
 80079fa:	9002      	str	r0, [sp, #8]
 80079fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007a00:	4650      	mov	r0, sl
 8007a02:	f000 fca5 	bl	8008350 <__mcmp>
 8007a06:	463a      	mov	r2, r7
 8007a08:	9005      	str	r0, [sp, #20]
 8007a0a:	4631      	mov	r1, r6
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f000 fcbb 	bl	8008388 <__mdiff>
 8007a12:	68c2      	ldr	r2, [r0, #12]
 8007a14:	4605      	mov	r5, r0
 8007a16:	bb02      	cbnz	r2, 8007a5a <_dtoa_r+0xa7a>
 8007a18:	4601      	mov	r1, r0
 8007a1a:	4650      	mov	r0, sl
 8007a1c:	f000 fc98 	bl	8008350 <__mcmp>
 8007a20:	4602      	mov	r2, r0
 8007a22:	4629      	mov	r1, r5
 8007a24:	4620      	mov	r0, r4
 8007a26:	9209      	str	r2, [sp, #36]	; 0x24
 8007a28:	f000 fa0c 	bl	8007e44 <_Bfree>
 8007a2c:	9b07      	ldr	r3, [sp, #28]
 8007a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a30:	9d04      	ldr	r5, [sp, #16]
 8007a32:	ea43 0102 	orr.w	r1, r3, r2
 8007a36:	9b06      	ldr	r3, [sp, #24]
 8007a38:	4319      	orrs	r1, r3
 8007a3a:	d110      	bne.n	8007a5e <_dtoa_r+0xa7e>
 8007a3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a40:	d029      	beq.n	8007a96 <_dtoa_r+0xab6>
 8007a42:	9b05      	ldr	r3, [sp, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	dd02      	ble.n	8007a4e <_dtoa_r+0xa6e>
 8007a48:	9b02      	ldr	r3, [sp, #8]
 8007a4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007a4e:	9b01      	ldr	r3, [sp, #4]
 8007a50:	f883 9000 	strb.w	r9, [r3]
 8007a54:	e774      	b.n	8007940 <_dtoa_r+0x960>
 8007a56:	4638      	mov	r0, r7
 8007a58:	e7ba      	b.n	80079d0 <_dtoa_r+0x9f0>
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	e7e1      	b.n	8007a22 <_dtoa_r+0xa42>
 8007a5e:	9b05      	ldr	r3, [sp, #20]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	db04      	blt.n	8007a6e <_dtoa_r+0xa8e>
 8007a64:	9907      	ldr	r1, [sp, #28]
 8007a66:	430b      	orrs	r3, r1
 8007a68:	9906      	ldr	r1, [sp, #24]
 8007a6a:	430b      	orrs	r3, r1
 8007a6c:	d120      	bne.n	8007ab0 <_dtoa_r+0xad0>
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	dded      	ble.n	8007a4e <_dtoa_r+0xa6e>
 8007a72:	4651      	mov	r1, sl
 8007a74:	2201      	movs	r2, #1
 8007a76:	4620      	mov	r0, r4
 8007a78:	f000 fbfe 	bl	8008278 <__lshift>
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4682      	mov	sl, r0
 8007a80:	f000 fc66 	bl	8008350 <__mcmp>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	dc03      	bgt.n	8007a90 <_dtoa_r+0xab0>
 8007a88:	d1e1      	bne.n	8007a4e <_dtoa_r+0xa6e>
 8007a8a:	f019 0f01 	tst.w	r9, #1
 8007a8e:	d0de      	beq.n	8007a4e <_dtoa_r+0xa6e>
 8007a90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a94:	d1d8      	bne.n	8007a48 <_dtoa_r+0xa68>
 8007a96:	9a01      	ldr	r2, [sp, #4]
 8007a98:	2339      	movs	r3, #57	; 0x39
 8007a9a:	7013      	strb	r3, [r2, #0]
 8007a9c:	462b      	mov	r3, r5
 8007a9e:	461d      	mov	r5, r3
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007aa6:	2a39      	cmp	r2, #57	; 0x39
 8007aa8:	d06c      	beq.n	8007b84 <_dtoa_r+0xba4>
 8007aaa:	3201      	adds	r2, #1
 8007aac:	701a      	strb	r2, [r3, #0]
 8007aae:	e747      	b.n	8007940 <_dtoa_r+0x960>
 8007ab0:	2a00      	cmp	r2, #0
 8007ab2:	dd07      	ble.n	8007ac4 <_dtoa_r+0xae4>
 8007ab4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ab8:	d0ed      	beq.n	8007a96 <_dtoa_r+0xab6>
 8007aba:	9a01      	ldr	r2, [sp, #4]
 8007abc:	f109 0301 	add.w	r3, r9, #1
 8007ac0:	7013      	strb	r3, [r2, #0]
 8007ac2:	e73d      	b.n	8007940 <_dtoa_r+0x960>
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	9a08      	ldr	r2, [sp, #32]
 8007ac8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d043      	beq.n	8007b58 <_dtoa_r+0xb78>
 8007ad0:	4651      	mov	r1, sl
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	220a      	movs	r2, #10
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 f9d6 	bl	8007e88 <__multadd>
 8007adc:	45b8      	cmp	r8, r7
 8007ade:	4682      	mov	sl, r0
 8007ae0:	f04f 0300 	mov.w	r3, #0
 8007ae4:	f04f 020a 	mov.w	r2, #10
 8007ae8:	4641      	mov	r1, r8
 8007aea:	4620      	mov	r0, r4
 8007aec:	d107      	bne.n	8007afe <_dtoa_r+0xb1e>
 8007aee:	f000 f9cb 	bl	8007e88 <__multadd>
 8007af2:	4680      	mov	r8, r0
 8007af4:	4607      	mov	r7, r0
 8007af6:	9b04      	ldr	r3, [sp, #16]
 8007af8:	3301      	adds	r3, #1
 8007afa:	9304      	str	r3, [sp, #16]
 8007afc:	e775      	b.n	80079ea <_dtoa_r+0xa0a>
 8007afe:	f000 f9c3 	bl	8007e88 <__multadd>
 8007b02:	4639      	mov	r1, r7
 8007b04:	4680      	mov	r8, r0
 8007b06:	2300      	movs	r3, #0
 8007b08:	220a      	movs	r2, #10
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 f9bc 	bl	8007e88 <__multadd>
 8007b10:	4607      	mov	r7, r0
 8007b12:	e7f0      	b.n	8007af6 <_dtoa_r+0xb16>
 8007b14:	9b04      	ldr	r3, [sp, #16]
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	9d00      	ldr	r5, [sp, #0]
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4650      	mov	r0, sl
 8007b1e:	f7ff f9d5 	bl	8006ecc <quorem>
 8007b22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b26:	9b00      	ldr	r3, [sp, #0]
 8007b28:	f805 9b01 	strb.w	r9, [r5], #1
 8007b2c:	1aea      	subs	r2, r5, r3
 8007b2e:	9b01      	ldr	r3, [sp, #4]
 8007b30:	4293      	cmp	r3, r2
 8007b32:	dd07      	ble.n	8007b44 <_dtoa_r+0xb64>
 8007b34:	4651      	mov	r1, sl
 8007b36:	2300      	movs	r3, #0
 8007b38:	220a      	movs	r2, #10
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f000 f9a4 	bl	8007e88 <__multadd>
 8007b40:	4682      	mov	sl, r0
 8007b42:	e7ea      	b.n	8007b1a <_dtoa_r+0xb3a>
 8007b44:	9b01      	ldr	r3, [sp, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	bfc8      	it	gt
 8007b4a:	461d      	movgt	r5, r3
 8007b4c:	9b00      	ldr	r3, [sp, #0]
 8007b4e:	bfd8      	it	le
 8007b50:	2501      	movle	r5, #1
 8007b52:	441d      	add	r5, r3
 8007b54:	f04f 0800 	mov.w	r8, #0
 8007b58:	4651      	mov	r1, sl
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f000 fb8b 	bl	8008278 <__lshift>
 8007b62:	4631      	mov	r1, r6
 8007b64:	4682      	mov	sl, r0
 8007b66:	f000 fbf3 	bl	8008350 <__mcmp>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	dc96      	bgt.n	8007a9c <_dtoa_r+0xabc>
 8007b6e:	d102      	bne.n	8007b76 <_dtoa_r+0xb96>
 8007b70:	f019 0f01 	tst.w	r9, #1
 8007b74:	d192      	bne.n	8007a9c <_dtoa_r+0xabc>
 8007b76:	462b      	mov	r3, r5
 8007b78:	461d      	mov	r5, r3
 8007b7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b7e:	2a30      	cmp	r2, #48	; 0x30
 8007b80:	d0fa      	beq.n	8007b78 <_dtoa_r+0xb98>
 8007b82:	e6dd      	b.n	8007940 <_dtoa_r+0x960>
 8007b84:	9a00      	ldr	r2, [sp, #0]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d189      	bne.n	8007a9e <_dtoa_r+0xabe>
 8007b8a:	f10b 0b01 	add.w	fp, fp, #1
 8007b8e:	2331      	movs	r3, #49	; 0x31
 8007b90:	e796      	b.n	8007ac0 <_dtoa_r+0xae0>
 8007b92:	4b0a      	ldr	r3, [pc, #40]	; (8007bbc <_dtoa_r+0xbdc>)
 8007b94:	f7ff ba99 	b.w	80070ca <_dtoa_r+0xea>
 8007b98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f47f aa6d 	bne.w	800707a <_dtoa_r+0x9a>
 8007ba0:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <_dtoa_r+0xbe0>)
 8007ba2:	f7ff ba92 	b.w	80070ca <_dtoa_r+0xea>
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dcb5      	bgt.n	8007b18 <_dtoa_r+0xb38>
 8007bac:	9b07      	ldr	r3, [sp, #28]
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	f73f aeb1 	bgt.w	8007916 <_dtoa_r+0x936>
 8007bb4:	e7b0      	b.n	8007b18 <_dtoa_r+0xb38>
 8007bb6:	bf00      	nop
 8007bb8:	0800b05f 	.word	0x0800b05f
 8007bbc:	0800b348 	.word	0x0800b348
 8007bc0:	0800afe3 	.word	0x0800afe3

08007bc4 <_free_r>:
 8007bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bc6:	2900      	cmp	r1, #0
 8007bc8:	d044      	beq.n	8007c54 <_free_r+0x90>
 8007bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bce:	9001      	str	r0, [sp, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8007bd6:	bfb8      	it	lt
 8007bd8:	18e4      	addlt	r4, r4, r3
 8007bda:	f000 f8e7 	bl	8007dac <__malloc_lock>
 8007bde:	4a1e      	ldr	r2, [pc, #120]	; (8007c58 <_free_r+0x94>)
 8007be0:	9801      	ldr	r0, [sp, #4]
 8007be2:	6813      	ldr	r3, [r2, #0]
 8007be4:	b933      	cbnz	r3, 8007bf4 <_free_r+0x30>
 8007be6:	6063      	str	r3, [r4, #4]
 8007be8:	6014      	str	r4, [r2, #0]
 8007bea:	b003      	add	sp, #12
 8007bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bf0:	f000 b8e2 	b.w	8007db8 <__malloc_unlock>
 8007bf4:	42a3      	cmp	r3, r4
 8007bf6:	d908      	bls.n	8007c0a <_free_r+0x46>
 8007bf8:	6825      	ldr	r5, [r4, #0]
 8007bfa:	1961      	adds	r1, r4, r5
 8007bfc:	428b      	cmp	r3, r1
 8007bfe:	bf01      	itttt	eq
 8007c00:	6819      	ldreq	r1, [r3, #0]
 8007c02:	685b      	ldreq	r3, [r3, #4]
 8007c04:	1949      	addeq	r1, r1, r5
 8007c06:	6021      	streq	r1, [r4, #0]
 8007c08:	e7ed      	b.n	8007be6 <_free_r+0x22>
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	b10b      	cbz	r3, 8007c14 <_free_r+0x50>
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	d9fa      	bls.n	8007c0a <_free_r+0x46>
 8007c14:	6811      	ldr	r1, [r2, #0]
 8007c16:	1855      	adds	r5, r2, r1
 8007c18:	42a5      	cmp	r5, r4
 8007c1a:	d10b      	bne.n	8007c34 <_free_r+0x70>
 8007c1c:	6824      	ldr	r4, [r4, #0]
 8007c1e:	4421      	add	r1, r4
 8007c20:	1854      	adds	r4, r2, r1
 8007c22:	42a3      	cmp	r3, r4
 8007c24:	6011      	str	r1, [r2, #0]
 8007c26:	d1e0      	bne.n	8007bea <_free_r+0x26>
 8007c28:	681c      	ldr	r4, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	6053      	str	r3, [r2, #4]
 8007c2e:	440c      	add	r4, r1
 8007c30:	6014      	str	r4, [r2, #0]
 8007c32:	e7da      	b.n	8007bea <_free_r+0x26>
 8007c34:	d902      	bls.n	8007c3c <_free_r+0x78>
 8007c36:	230c      	movs	r3, #12
 8007c38:	6003      	str	r3, [r0, #0]
 8007c3a:	e7d6      	b.n	8007bea <_free_r+0x26>
 8007c3c:	6825      	ldr	r5, [r4, #0]
 8007c3e:	1961      	adds	r1, r4, r5
 8007c40:	428b      	cmp	r3, r1
 8007c42:	bf04      	itt	eq
 8007c44:	6819      	ldreq	r1, [r3, #0]
 8007c46:	685b      	ldreq	r3, [r3, #4]
 8007c48:	6063      	str	r3, [r4, #4]
 8007c4a:	bf04      	itt	eq
 8007c4c:	1949      	addeq	r1, r1, r5
 8007c4e:	6021      	streq	r1, [r4, #0]
 8007c50:	6054      	str	r4, [r2, #4]
 8007c52:	e7ca      	b.n	8007bea <_free_r+0x26>
 8007c54:	b003      	add	sp, #12
 8007c56:	bd30      	pop	{r4, r5, pc}
 8007c58:	200050c8 	.word	0x200050c8

08007c5c <malloc>:
 8007c5c:	4b02      	ldr	r3, [pc, #8]	; (8007c68 <malloc+0xc>)
 8007c5e:	4601      	mov	r1, r0
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	f000 b823 	b.w	8007cac <_malloc_r>
 8007c66:	bf00      	nop
 8007c68:	2000006c 	.word	0x2000006c

08007c6c <sbrk_aligned>:
 8007c6c:	b570      	push	{r4, r5, r6, lr}
 8007c6e:	4e0e      	ldr	r6, [pc, #56]	; (8007ca8 <sbrk_aligned+0x3c>)
 8007c70:	460c      	mov	r4, r1
 8007c72:	6831      	ldr	r1, [r6, #0]
 8007c74:	4605      	mov	r5, r0
 8007c76:	b911      	cbnz	r1, 8007c7e <sbrk_aligned+0x12>
 8007c78:	f002 f99c 	bl	8009fb4 <_sbrk_r>
 8007c7c:	6030      	str	r0, [r6, #0]
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4628      	mov	r0, r5
 8007c82:	f002 f997 	bl	8009fb4 <_sbrk_r>
 8007c86:	1c43      	adds	r3, r0, #1
 8007c88:	d00a      	beq.n	8007ca0 <sbrk_aligned+0x34>
 8007c8a:	1cc4      	adds	r4, r0, #3
 8007c8c:	f024 0403 	bic.w	r4, r4, #3
 8007c90:	42a0      	cmp	r0, r4
 8007c92:	d007      	beq.n	8007ca4 <sbrk_aligned+0x38>
 8007c94:	1a21      	subs	r1, r4, r0
 8007c96:	4628      	mov	r0, r5
 8007c98:	f002 f98c 	bl	8009fb4 <_sbrk_r>
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d101      	bne.n	8007ca4 <sbrk_aligned+0x38>
 8007ca0:	f04f 34ff 	mov.w	r4, #4294967295
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	bd70      	pop	{r4, r5, r6, pc}
 8007ca8:	200050cc 	.word	0x200050cc

08007cac <_malloc_r>:
 8007cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb0:	1ccd      	adds	r5, r1, #3
 8007cb2:	f025 0503 	bic.w	r5, r5, #3
 8007cb6:	3508      	adds	r5, #8
 8007cb8:	2d0c      	cmp	r5, #12
 8007cba:	bf38      	it	cc
 8007cbc:	250c      	movcc	r5, #12
 8007cbe:	2d00      	cmp	r5, #0
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	db01      	blt.n	8007cc8 <_malloc_r+0x1c>
 8007cc4:	42a9      	cmp	r1, r5
 8007cc6:	d905      	bls.n	8007cd4 <_malloc_r+0x28>
 8007cc8:	230c      	movs	r3, #12
 8007cca:	603b      	str	r3, [r7, #0]
 8007ccc:	2600      	movs	r6, #0
 8007cce:	4630      	mov	r0, r6
 8007cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007da8 <_malloc_r+0xfc>
 8007cd8:	f000 f868 	bl	8007dac <__malloc_lock>
 8007cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ce0:	461c      	mov	r4, r3
 8007ce2:	bb5c      	cbnz	r4, 8007d3c <_malloc_r+0x90>
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f7ff ffc0 	bl	8007c6c <sbrk_aligned>
 8007cec:	1c43      	adds	r3, r0, #1
 8007cee:	4604      	mov	r4, r0
 8007cf0:	d155      	bne.n	8007d9e <_malloc_r+0xf2>
 8007cf2:	f8d8 4000 	ldr.w	r4, [r8]
 8007cf6:	4626      	mov	r6, r4
 8007cf8:	2e00      	cmp	r6, #0
 8007cfa:	d145      	bne.n	8007d88 <_malloc_r+0xdc>
 8007cfc:	2c00      	cmp	r4, #0
 8007cfe:	d048      	beq.n	8007d92 <_malloc_r+0xe6>
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	4631      	mov	r1, r6
 8007d04:	4638      	mov	r0, r7
 8007d06:	eb04 0903 	add.w	r9, r4, r3
 8007d0a:	f002 f953 	bl	8009fb4 <_sbrk_r>
 8007d0e:	4581      	cmp	r9, r0
 8007d10:	d13f      	bne.n	8007d92 <_malloc_r+0xe6>
 8007d12:	6821      	ldr	r1, [r4, #0]
 8007d14:	1a6d      	subs	r5, r5, r1
 8007d16:	4629      	mov	r1, r5
 8007d18:	4638      	mov	r0, r7
 8007d1a:	f7ff ffa7 	bl	8007c6c <sbrk_aligned>
 8007d1e:	3001      	adds	r0, #1
 8007d20:	d037      	beq.n	8007d92 <_malloc_r+0xe6>
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	442b      	add	r3, r5
 8007d26:	6023      	str	r3, [r4, #0]
 8007d28:	f8d8 3000 	ldr.w	r3, [r8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d038      	beq.n	8007da2 <_malloc_r+0xf6>
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	42a2      	cmp	r2, r4
 8007d34:	d12b      	bne.n	8007d8e <_malloc_r+0xe2>
 8007d36:	2200      	movs	r2, #0
 8007d38:	605a      	str	r2, [r3, #4]
 8007d3a:	e00f      	b.n	8007d5c <_malloc_r+0xb0>
 8007d3c:	6822      	ldr	r2, [r4, #0]
 8007d3e:	1b52      	subs	r2, r2, r5
 8007d40:	d41f      	bmi.n	8007d82 <_malloc_r+0xd6>
 8007d42:	2a0b      	cmp	r2, #11
 8007d44:	d917      	bls.n	8007d76 <_malloc_r+0xca>
 8007d46:	1961      	adds	r1, r4, r5
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	6025      	str	r5, [r4, #0]
 8007d4c:	bf18      	it	ne
 8007d4e:	6059      	strne	r1, [r3, #4]
 8007d50:	6863      	ldr	r3, [r4, #4]
 8007d52:	bf08      	it	eq
 8007d54:	f8c8 1000 	streq.w	r1, [r8]
 8007d58:	5162      	str	r2, [r4, r5]
 8007d5a:	604b      	str	r3, [r1, #4]
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f104 060b 	add.w	r6, r4, #11
 8007d62:	f000 f829 	bl	8007db8 <__malloc_unlock>
 8007d66:	f026 0607 	bic.w	r6, r6, #7
 8007d6a:	1d23      	adds	r3, r4, #4
 8007d6c:	1af2      	subs	r2, r6, r3
 8007d6e:	d0ae      	beq.n	8007cce <_malloc_r+0x22>
 8007d70:	1b9b      	subs	r3, r3, r6
 8007d72:	50a3      	str	r3, [r4, r2]
 8007d74:	e7ab      	b.n	8007cce <_malloc_r+0x22>
 8007d76:	42a3      	cmp	r3, r4
 8007d78:	6862      	ldr	r2, [r4, #4]
 8007d7a:	d1dd      	bne.n	8007d38 <_malloc_r+0x8c>
 8007d7c:	f8c8 2000 	str.w	r2, [r8]
 8007d80:	e7ec      	b.n	8007d5c <_malloc_r+0xb0>
 8007d82:	4623      	mov	r3, r4
 8007d84:	6864      	ldr	r4, [r4, #4]
 8007d86:	e7ac      	b.n	8007ce2 <_malloc_r+0x36>
 8007d88:	4634      	mov	r4, r6
 8007d8a:	6876      	ldr	r6, [r6, #4]
 8007d8c:	e7b4      	b.n	8007cf8 <_malloc_r+0x4c>
 8007d8e:	4613      	mov	r3, r2
 8007d90:	e7cc      	b.n	8007d2c <_malloc_r+0x80>
 8007d92:	230c      	movs	r3, #12
 8007d94:	603b      	str	r3, [r7, #0]
 8007d96:	4638      	mov	r0, r7
 8007d98:	f000 f80e 	bl	8007db8 <__malloc_unlock>
 8007d9c:	e797      	b.n	8007cce <_malloc_r+0x22>
 8007d9e:	6025      	str	r5, [r4, #0]
 8007da0:	e7dc      	b.n	8007d5c <_malloc_r+0xb0>
 8007da2:	605b      	str	r3, [r3, #4]
 8007da4:	deff      	udf	#255	; 0xff
 8007da6:	bf00      	nop
 8007da8:	200050c8 	.word	0x200050c8

08007dac <__malloc_lock>:
 8007dac:	4801      	ldr	r0, [pc, #4]	; (8007db4 <__malloc_lock+0x8>)
 8007dae:	f7ff b876 	b.w	8006e9e <__retarget_lock_acquire_recursive>
 8007db2:	bf00      	nop
 8007db4:	200050c4 	.word	0x200050c4

08007db8 <__malloc_unlock>:
 8007db8:	4801      	ldr	r0, [pc, #4]	; (8007dc0 <__malloc_unlock+0x8>)
 8007dba:	f7ff b871 	b.w	8006ea0 <__retarget_lock_release_recursive>
 8007dbe:	bf00      	nop
 8007dc0:	200050c4 	.word	0x200050c4

08007dc4 <_Balloc>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	69c6      	ldr	r6, [r0, #28]
 8007dc8:	4604      	mov	r4, r0
 8007dca:	460d      	mov	r5, r1
 8007dcc:	b976      	cbnz	r6, 8007dec <_Balloc+0x28>
 8007dce:	2010      	movs	r0, #16
 8007dd0:	f7ff ff44 	bl	8007c5c <malloc>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	61e0      	str	r0, [r4, #28]
 8007dd8:	b920      	cbnz	r0, 8007de4 <_Balloc+0x20>
 8007dda:	4b18      	ldr	r3, [pc, #96]	; (8007e3c <_Balloc+0x78>)
 8007ddc:	4818      	ldr	r0, [pc, #96]	; (8007e40 <_Balloc+0x7c>)
 8007dde:	216b      	movs	r1, #107	; 0x6b
 8007de0:	f002 f902 	bl	8009fe8 <__assert_func>
 8007de4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007de8:	6006      	str	r6, [r0, #0]
 8007dea:	60c6      	str	r6, [r0, #12]
 8007dec:	69e6      	ldr	r6, [r4, #28]
 8007dee:	68f3      	ldr	r3, [r6, #12]
 8007df0:	b183      	cbz	r3, 8007e14 <_Balloc+0x50>
 8007df2:	69e3      	ldr	r3, [r4, #28]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007dfa:	b9b8      	cbnz	r0, 8007e2c <_Balloc+0x68>
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	fa01 f605 	lsl.w	r6, r1, r5
 8007e02:	1d72      	adds	r2, r6, #5
 8007e04:	0092      	lsls	r2, r2, #2
 8007e06:	4620      	mov	r0, r4
 8007e08:	f002 f90c 	bl	800a024 <_calloc_r>
 8007e0c:	b160      	cbz	r0, 8007e28 <_Balloc+0x64>
 8007e0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e12:	e00e      	b.n	8007e32 <_Balloc+0x6e>
 8007e14:	2221      	movs	r2, #33	; 0x21
 8007e16:	2104      	movs	r1, #4
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f002 f903 	bl	800a024 <_calloc_r>
 8007e1e:	69e3      	ldr	r3, [r4, #28]
 8007e20:	60f0      	str	r0, [r6, #12]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e4      	bne.n	8007df2 <_Balloc+0x2e>
 8007e28:	2000      	movs	r0, #0
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
 8007e2c:	6802      	ldr	r2, [r0, #0]
 8007e2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e32:	2300      	movs	r3, #0
 8007e34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e38:	e7f7      	b.n	8007e2a <_Balloc+0x66>
 8007e3a:	bf00      	nop
 8007e3c:	0800aff0 	.word	0x0800aff0
 8007e40:	0800b070 	.word	0x0800b070

08007e44 <_Bfree>:
 8007e44:	b570      	push	{r4, r5, r6, lr}
 8007e46:	69c6      	ldr	r6, [r0, #28]
 8007e48:	4605      	mov	r5, r0
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	b976      	cbnz	r6, 8007e6c <_Bfree+0x28>
 8007e4e:	2010      	movs	r0, #16
 8007e50:	f7ff ff04 	bl	8007c5c <malloc>
 8007e54:	4602      	mov	r2, r0
 8007e56:	61e8      	str	r0, [r5, #28]
 8007e58:	b920      	cbnz	r0, 8007e64 <_Bfree+0x20>
 8007e5a:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <_Bfree+0x3c>)
 8007e5c:	4809      	ldr	r0, [pc, #36]	; (8007e84 <_Bfree+0x40>)
 8007e5e:	218f      	movs	r1, #143	; 0x8f
 8007e60:	f002 f8c2 	bl	8009fe8 <__assert_func>
 8007e64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e68:	6006      	str	r6, [r0, #0]
 8007e6a:	60c6      	str	r6, [r0, #12]
 8007e6c:	b13c      	cbz	r4, 8007e7e <_Bfree+0x3a>
 8007e6e:	69eb      	ldr	r3, [r5, #28]
 8007e70:	6862      	ldr	r2, [r4, #4]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e78:	6021      	str	r1, [r4, #0]
 8007e7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e7e:	bd70      	pop	{r4, r5, r6, pc}
 8007e80:	0800aff0 	.word	0x0800aff0
 8007e84:	0800b070 	.word	0x0800b070

08007e88 <__multadd>:
 8007e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8c:	690d      	ldr	r5, [r1, #16]
 8007e8e:	4607      	mov	r7, r0
 8007e90:	460c      	mov	r4, r1
 8007e92:	461e      	mov	r6, r3
 8007e94:	f101 0c14 	add.w	ip, r1, #20
 8007e98:	2000      	movs	r0, #0
 8007e9a:	f8dc 3000 	ldr.w	r3, [ip]
 8007e9e:	b299      	uxth	r1, r3
 8007ea0:	fb02 6101 	mla	r1, r2, r1, r6
 8007ea4:	0c1e      	lsrs	r6, r3, #16
 8007ea6:	0c0b      	lsrs	r3, r1, #16
 8007ea8:	fb02 3306 	mla	r3, r2, r6, r3
 8007eac:	b289      	uxth	r1, r1
 8007eae:	3001      	adds	r0, #1
 8007eb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007eb4:	4285      	cmp	r5, r0
 8007eb6:	f84c 1b04 	str.w	r1, [ip], #4
 8007eba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ebe:	dcec      	bgt.n	8007e9a <__multadd+0x12>
 8007ec0:	b30e      	cbz	r6, 8007f06 <__multadd+0x7e>
 8007ec2:	68a3      	ldr	r3, [r4, #8]
 8007ec4:	42ab      	cmp	r3, r5
 8007ec6:	dc19      	bgt.n	8007efc <__multadd+0x74>
 8007ec8:	6861      	ldr	r1, [r4, #4]
 8007eca:	4638      	mov	r0, r7
 8007ecc:	3101      	adds	r1, #1
 8007ece:	f7ff ff79 	bl	8007dc4 <_Balloc>
 8007ed2:	4680      	mov	r8, r0
 8007ed4:	b928      	cbnz	r0, 8007ee2 <__multadd+0x5a>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <__multadd+0x84>)
 8007eda:	480d      	ldr	r0, [pc, #52]	; (8007f10 <__multadd+0x88>)
 8007edc:	21ba      	movs	r1, #186	; 0xba
 8007ede:	f002 f883 	bl	8009fe8 <__assert_func>
 8007ee2:	6922      	ldr	r2, [r4, #16]
 8007ee4:	3202      	adds	r2, #2
 8007ee6:	f104 010c 	add.w	r1, r4, #12
 8007eea:	0092      	lsls	r2, r2, #2
 8007eec:	300c      	adds	r0, #12
 8007eee:	f7fe ffd8 	bl	8006ea2 <memcpy>
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f7ff ffa5 	bl	8007e44 <_Bfree>
 8007efa:	4644      	mov	r4, r8
 8007efc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f00:	3501      	adds	r5, #1
 8007f02:	615e      	str	r6, [r3, #20]
 8007f04:	6125      	str	r5, [r4, #16]
 8007f06:	4620      	mov	r0, r4
 8007f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f0c:	0800b05f 	.word	0x0800b05f
 8007f10:	0800b070 	.word	0x0800b070

08007f14 <__s2b>:
 8007f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f18:	460c      	mov	r4, r1
 8007f1a:	4615      	mov	r5, r2
 8007f1c:	461f      	mov	r7, r3
 8007f1e:	2209      	movs	r2, #9
 8007f20:	3308      	adds	r3, #8
 8007f22:	4606      	mov	r6, r0
 8007f24:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f28:	2100      	movs	r1, #0
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	db09      	blt.n	8007f44 <__s2b+0x30>
 8007f30:	4630      	mov	r0, r6
 8007f32:	f7ff ff47 	bl	8007dc4 <_Balloc>
 8007f36:	b940      	cbnz	r0, 8007f4a <__s2b+0x36>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	4b19      	ldr	r3, [pc, #100]	; (8007fa0 <__s2b+0x8c>)
 8007f3c:	4819      	ldr	r0, [pc, #100]	; (8007fa4 <__s2b+0x90>)
 8007f3e:	21d3      	movs	r1, #211	; 0xd3
 8007f40:	f002 f852 	bl	8009fe8 <__assert_func>
 8007f44:	0052      	lsls	r2, r2, #1
 8007f46:	3101      	adds	r1, #1
 8007f48:	e7f0      	b.n	8007f2c <__s2b+0x18>
 8007f4a:	9b08      	ldr	r3, [sp, #32]
 8007f4c:	6143      	str	r3, [r0, #20]
 8007f4e:	2d09      	cmp	r5, #9
 8007f50:	f04f 0301 	mov.w	r3, #1
 8007f54:	6103      	str	r3, [r0, #16]
 8007f56:	dd16      	ble.n	8007f86 <__s2b+0x72>
 8007f58:	f104 0909 	add.w	r9, r4, #9
 8007f5c:	46c8      	mov	r8, r9
 8007f5e:	442c      	add	r4, r5
 8007f60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007f64:	4601      	mov	r1, r0
 8007f66:	3b30      	subs	r3, #48	; 0x30
 8007f68:	220a      	movs	r2, #10
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f7ff ff8c 	bl	8007e88 <__multadd>
 8007f70:	45a0      	cmp	r8, r4
 8007f72:	d1f5      	bne.n	8007f60 <__s2b+0x4c>
 8007f74:	f1a5 0408 	sub.w	r4, r5, #8
 8007f78:	444c      	add	r4, r9
 8007f7a:	1b2d      	subs	r5, r5, r4
 8007f7c:	1963      	adds	r3, r4, r5
 8007f7e:	42bb      	cmp	r3, r7
 8007f80:	db04      	blt.n	8007f8c <__s2b+0x78>
 8007f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f86:	340a      	adds	r4, #10
 8007f88:	2509      	movs	r5, #9
 8007f8a:	e7f6      	b.n	8007f7a <__s2b+0x66>
 8007f8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f90:	4601      	mov	r1, r0
 8007f92:	3b30      	subs	r3, #48	; 0x30
 8007f94:	220a      	movs	r2, #10
 8007f96:	4630      	mov	r0, r6
 8007f98:	f7ff ff76 	bl	8007e88 <__multadd>
 8007f9c:	e7ee      	b.n	8007f7c <__s2b+0x68>
 8007f9e:	bf00      	nop
 8007fa0:	0800b05f 	.word	0x0800b05f
 8007fa4:	0800b070 	.word	0x0800b070

08007fa8 <__hi0bits>:
 8007fa8:	0c03      	lsrs	r3, r0, #16
 8007faa:	041b      	lsls	r3, r3, #16
 8007fac:	b9d3      	cbnz	r3, 8007fe4 <__hi0bits+0x3c>
 8007fae:	0400      	lsls	r0, r0, #16
 8007fb0:	2310      	movs	r3, #16
 8007fb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007fb6:	bf04      	itt	eq
 8007fb8:	0200      	lsleq	r0, r0, #8
 8007fba:	3308      	addeq	r3, #8
 8007fbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007fc0:	bf04      	itt	eq
 8007fc2:	0100      	lsleq	r0, r0, #4
 8007fc4:	3304      	addeq	r3, #4
 8007fc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007fca:	bf04      	itt	eq
 8007fcc:	0080      	lsleq	r0, r0, #2
 8007fce:	3302      	addeq	r3, #2
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	db05      	blt.n	8007fe0 <__hi0bits+0x38>
 8007fd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007fd8:	f103 0301 	add.w	r3, r3, #1
 8007fdc:	bf08      	it	eq
 8007fde:	2320      	moveq	r3, #32
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	4770      	bx	lr
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	e7e4      	b.n	8007fb2 <__hi0bits+0xa>

08007fe8 <__lo0bits>:
 8007fe8:	6803      	ldr	r3, [r0, #0]
 8007fea:	f013 0207 	ands.w	r2, r3, #7
 8007fee:	d00c      	beq.n	800800a <__lo0bits+0x22>
 8007ff0:	07d9      	lsls	r1, r3, #31
 8007ff2:	d422      	bmi.n	800803a <__lo0bits+0x52>
 8007ff4:	079a      	lsls	r2, r3, #30
 8007ff6:	bf49      	itett	mi
 8007ff8:	085b      	lsrmi	r3, r3, #1
 8007ffa:	089b      	lsrpl	r3, r3, #2
 8007ffc:	6003      	strmi	r3, [r0, #0]
 8007ffe:	2201      	movmi	r2, #1
 8008000:	bf5c      	itt	pl
 8008002:	6003      	strpl	r3, [r0, #0]
 8008004:	2202      	movpl	r2, #2
 8008006:	4610      	mov	r0, r2
 8008008:	4770      	bx	lr
 800800a:	b299      	uxth	r1, r3
 800800c:	b909      	cbnz	r1, 8008012 <__lo0bits+0x2a>
 800800e:	0c1b      	lsrs	r3, r3, #16
 8008010:	2210      	movs	r2, #16
 8008012:	b2d9      	uxtb	r1, r3
 8008014:	b909      	cbnz	r1, 800801a <__lo0bits+0x32>
 8008016:	3208      	adds	r2, #8
 8008018:	0a1b      	lsrs	r3, r3, #8
 800801a:	0719      	lsls	r1, r3, #28
 800801c:	bf04      	itt	eq
 800801e:	091b      	lsreq	r3, r3, #4
 8008020:	3204      	addeq	r2, #4
 8008022:	0799      	lsls	r1, r3, #30
 8008024:	bf04      	itt	eq
 8008026:	089b      	lsreq	r3, r3, #2
 8008028:	3202      	addeq	r2, #2
 800802a:	07d9      	lsls	r1, r3, #31
 800802c:	d403      	bmi.n	8008036 <__lo0bits+0x4e>
 800802e:	085b      	lsrs	r3, r3, #1
 8008030:	f102 0201 	add.w	r2, r2, #1
 8008034:	d003      	beq.n	800803e <__lo0bits+0x56>
 8008036:	6003      	str	r3, [r0, #0]
 8008038:	e7e5      	b.n	8008006 <__lo0bits+0x1e>
 800803a:	2200      	movs	r2, #0
 800803c:	e7e3      	b.n	8008006 <__lo0bits+0x1e>
 800803e:	2220      	movs	r2, #32
 8008040:	e7e1      	b.n	8008006 <__lo0bits+0x1e>
	...

08008044 <__i2b>:
 8008044:	b510      	push	{r4, lr}
 8008046:	460c      	mov	r4, r1
 8008048:	2101      	movs	r1, #1
 800804a:	f7ff febb 	bl	8007dc4 <_Balloc>
 800804e:	4602      	mov	r2, r0
 8008050:	b928      	cbnz	r0, 800805e <__i2b+0x1a>
 8008052:	4b05      	ldr	r3, [pc, #20]	; (8008068 <__i2b+0x24>)
 8008054:	4805      	ldr	r0, [pc, #20]	; (800806c <__i2b+0x28>)
 8008056:	f240 1145 	movw	r1, #325	; 0x145
 800805a:	f001 ffc5 	bl	8009fe8 <__assert_func>
 800805e:	2301      	movs	r3, #1
 8008060:	6144      	str	r4, [r0, #20]
 8008062:	6103      	str	r3, [r0, #16]
 8008064:	bd10      	pop	{r4, pc}
 8008066:	bf00      	nop
 8008068:	0800b05f 	.word	0x0800b05f
 800806c:	0800b070 	.word	0x0800b070

08008070 <__multiply>:
 8008070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	4691      	mov	r9, r2
 8008076:	690a      	ldr	r2, [r1, #16]
 8008078:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800807c:	429a      	cmp	r2, r3
 800807e:	bfb8      	it	lt
 8008080:	460b      	movlt	r3, r1
 8008082:	460c      	mov	r4, r1
 8008084:	bfbc      	itt	lt
 8008086:	464c      	movlt	r4, r9
 8008088:	4699      	movlt	r9, r3
 800808a:	6927      	ldr	r7, [r4, #16]
 800808c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008090:	68a3      	ldr	r3, [r4, #8]
 8008092:	6861      	ldr	r1, [r4, #4]
 8008094:	eb07 060a 	add.w	r6, r7, sl
 8008098:	42b3      	cmp	r3, r6
 800809a:	b085      	sub	sp, #20
 800809c:	bfb8      	it	lt
 800809e:	3101      	addlt	r1, #1
 80080a0:	f7ff fe90 	bl	8007dc4 <_Balloc>
 80080a4:	b930      	cbnz	r0, 80080b4 <__multiply+0x44>
 80080a6:	4602      	mov	r2, r0
 80080a8:	4b44      	ldr	r3, [pc, #272]	; (80081bc <__multiply+0x14c>)
 80080aa:	4845      	ldr	r0, [pc, #276]	; (80081c0 <__multiply+0x150>)
 80080ac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80080b0:	f001 ff9a 	bl	8009fe8 <__assert_func>
 80080b4:	f100 0514 	add.w	r5, r0, #20
 80080b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80080bc:	462b      	mov	r3, r5
 80080be:	2200      	movs	r2, #0
 80080c0:	4543      	cmp	r3, r8
 80080c2:	d321      	bcc.n	8008108 <__multiply+0x98>
 80080c4:	f104 0314 	add.w	r3, r4, #20
 80080c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80080cc:	f109 0314 	add.w	r3, r9, #20
 80080d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80080d4:	9202      	str	r2, [sp, #8]
 80080d6:	1b3a      	subs	r2, r7, r4
 80080d8:	3a15      	subs	r2, #21
 80080da:	f022 0203 	bic.w	r2, r2, #3
 80080de:	3204      	adds	r2, #4
 80080e0:	f104 0115 	add.w	r1, r4, #21
 80080e4:	428f      	cmp	r7, r1
 80080e6:	bf38      	it	cc
 80080e8:	2204      	movcc	r2, #4
 80080ea:	9201      	str	r2, [sp, #4]
 80080ec:	9a02      	ldr	r2, [sp, #8]
 80080ee:	9303      	str	r3, [sp, #12]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d80c      	bhi.n	800810e <__multiply+0x9e>
 80080f4:	2e00      	cmp	r6, #0
 80080f6:	dd03      	ble.n	8008100 <__multiply+0x90>
 80080f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d05b      	beq.n	80081b8 <__multiply+0x148>
 8008100:	6106      	str	r6, [r0, #16]
 8008102:	b005      	add	sp, #20
 8008104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008108:	f843 2b04 	str.w	r2, [r3], #4
 800810c:	e7d8      	b.n	80080c0 <__multiply+0x50>
 800810e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008112:	f1ba 0f00 	cmp.w	sl, #0
 8008116:	d024      	beq.n	8008162 <__multiply+0xf2>
 8008118:	f104 0e14 	add.w	lr, r4, #20
 800811c:	46a9      	mov	r9, r5
 800811e:	f04f 0c00 	mov.w	ip, #0
 8008122:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008126:	f8d9 1000 	ldr.w	r1, [r9]
 800812a:	fa1f fb82 	uxth.w	fp, r2
 800812e:	b289      	uxth	r1, r1
 8008130:	fb0a 110b 	mla	r1, sl, fp, r1
 8008134:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008138:	f8d9 2000 	ldr.w	r2, [r9]
 800813c:	4461      	add	r1, ip
 800813e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008142:	fb0a c20b 	mla	r2, sl, fp, ip
 8008146:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800814a:	b289      	uxth	r1, r1
 800814c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008150:	4577      	cmp	r7, lr
 8008152:	f849 1b04 	str.w	r1, [r9], #4
 8008156:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800815a:	d8e2      	bhi.n	8008122 <__multiply+0xb2>
 800815c:	9a01      	ldr	r2, [sp, #4]
 800815e:	f845 c002 	str.w	ip, [r5, r2]
 8008162:	9a03      	ldr	r2, [sp, #12]
 8008164:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008168:	3304      	adds	r3, #4
 800816a:	f1b9 0f00 	cmp.w	r9, #0
 800816e:	d021      	beq.n	80081b4 <__multiply+0x144>
 8008170:	6829      	ldr	r1, [r5, #0]
 8008172:	f104 0c14 	add.w	ip, r4, #20
 8008176:	46ae      	mov	lr, r5
 8008178:	f04f 0a00 	mov.w	sl, #0
 800817c:	f8bc b000 	ldrh.w	fp, [ip]
 8008180:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008184:	fb09 220b 	mla	r2, r9, fp, r2
 8008188:	4452      	add	r2, sl
 800818a:	b289      	uxth	r1, r1
 800818c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008190:	f84e 1b04 	str.w	r1, [lr], #4
 8008194:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008198:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800819c:	f8be 1000 	ldrh.w	r1, [lr]
 80081a0:	fb09 110a 	mla	r1, r9, sl, r1
 80081a4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80081a8:	4567      	cmp	r7, ip
 80081aa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80081ae:	d8e5      	bhi.n	800817c <__multiply+0x10c>
 80081b0:	9a01      	ldr	r2, [sp, #4]
 80081b2:	50a9      	str	r1, [r5, r2]
 80081b4:	3504      	adds	r5, #4
 80081b6:	e799      	b.n	80080ec <__multiply+0x7c>
 80081b8:	3e01      	subs	r6, #1
 80081ba:	e79b      	b.n	80080f4 <__multiply+0x84>
 80081bc:	0800b05f 	.word	0x0800b05f
 80081c0:	0800b070 	.word	0x0800b070

080081c4 <__pow5mult>:
 80081c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081c8:	4615      	mov	r5, r2
 80081ca:	f012 0203 	ands.w	r2, r2, #3
 80081ce:	4606      	mov	r6, r0
 80081d0:	460f      	mov	r7, r1
 80081d2:	d007      	beq.n	80081e4 <__pow5mult+0x20>
 80081d4:	4c25      	ldr	r4, [pc, #148]	; (800826c <__pow5mult+0xa8>)
 80081d6:	3a01      	subs	r2, #1
 80081d8:	2300      	movs	r3, #0
 80081da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081de:	f7ff fe53 	bl	8007e88 <__multadd>
 80081e2:	4607      	mov	r7, r0
 80081e4:	10ad      	asrs	r5, r5, #2
 80081e6:	d03d      	beq.n	8008264 <__pow5mult+0xa0>
 80081e8:	69f4      	ldr	r4, [r6, #28]
 80081ea:	b97c      	cbnz	r4, 800820c <__pow5mult+0x48>
 80081ec:	2010      	movs	r0, #16
 80081ee:	f7ff fd35 	bl	8007c5c <malloc>
 80081f2:	4602      	mov	r2, r0
 80081f4:	61f0      	str	r0, [r6, #28]
 80081f6:	b928      	cbnz	r0, 8008204 <__pow5mult+0x40>
 80081f8:	4b1d      	ldr	r3, [pc, #116]	; (8008270 <__pow5mult+0xac>)
 80081fa:	481e      	ldr	r0, [pc, #120]	; (8008274 <__pow5mult+0xb0>)
 80081fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008200:	f001 fef2 	bl	8009fe8 <__assert_func>
 8008204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008208:	6004      	str	r4, [r0, #0]
 800820a:	60c4      	str	r4, [r0, #12]
 800820c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008214:	b94c      	cbnz	r4, 800822a <__pow5mult+0x66>
 8008216:	f240 2171 	movw	r1, #625	; 0x271
 800821a:	4630      	mov	r0, r6
 800821c:	f7ff ff12 	bl	8008044 <__i2b>
 8008220:	2300      	movs	r3, #0
 8008222:	f8c8 0008 	str.w	r0, [r8, #8]
 8008226:	4604      	mov	r4, r0
 8008228:	6003      	str	r3, [r0, #0]
 800822a:	f04f 0900 	mov.w	r9, #0
 800822e:	07eb      	lsls	r3, r5, #31
 8008230:	d50a      	bpl.n	8008248 <__pow5mult+0x84>
 8008232:	4639      	mov	r1, r7
 8008234:	4622      	mov	r2, r4
 8008236:	4630      	mov	r0, r6
 8008238:	f7ff ff1a 	bl	8008070 <__multiply>
 800823c:	4639      	mov	r1, r7
 800823e:	4680      	mov	r8, r0
 8008240:	4630      	mov	r0, r6
 8008242:	f7ff fdff 	bl	8007e44 <_Bfree>
 8008246:	4647      	mov	r7, r8
 8008248:	106d      	asrs	r5, r5, #1
 800824a:	d00b      	beq.n	8008264 <__pow5mult+0xa0>
 800824c:	6820      	ldr	r0, [r4, #0]
 800824e:	b938      	cbnz	r0, 8008260 <__pow5mult+0x9c>
 8008250:	4622      	mov	r2, r4
 8008252:	4621      	mov	r1, r4
 8008254:	4630      	mov	r0, r6
 8008256:	f7ff ff0b 	bl	8008070 <__multiply>
 800825a:	6020      	str	r0, [r4, #0]
 800825c:	f8c0 9000 	str.w	r9, [r0]
 8008260:	4604      	mov	r4, r0
 8008262:	e7e4      	b.n	800822e <__pow5mult+0x6a>
 8008264:	4638      	mov	r0, r7
 8008266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800826a:	bf00      	nop
 800826c:	0800b1c0 	.word	0x0800b1c0
 8008270:	0800aff0 	.word	0x0800aff0
 8008274:	0800b070 	.word	0x0800b070

08008278 <__lshift>:
 8008278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800827c:	460c      	mov	r4, r1
 800827e:	6849      	ldr	r1, [r1, #4]
 8008280:	6923      	ldr	r3, [r4, #16]
 8008282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008286:	68a3      	ldr	r3, [r4, #8]
 8008288:	4607      	mov	r7, r0
 800828a:	4691      	mov	r9, r2
 800828c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008290:	f108 0601 	add.w	r6, r8, #1
 8008294:	42b3      	cmp	r3, r6
 8008296:	db0b      	blt.n	80082b0 <__lshift+0x38>
 8008298:	4638      	mov	r0, r7
 800829a:	f7ff fd93 	bl	8007dc4 <_Balloc>
 800829e:	4605      	mov	r5, r0
 80082a0:	b948      	cbnz	r0, 80082b6 <__lshift+0x3e>
 80082a2:	4602      	mov	r2, r0
 80082a4:	4b28      	ldr	r3, [pc, #160]	; (8008348 <__lshift+0xd0>)
 80082a6:	4829      	ldr	r0, [pc, #164]	; (800834c <__lshift+0xd4>)
 80082a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80082ac:	f001 fe9c 	bl	8009fe8 <__assert_func>
 80082b0:	3101      	adds	r1, #1
 80082b2:	005b      	lsls	r3, r3, #1
 80082b4:	e7ee      	b.n	8008294 <__lshift+0x1c>
 80082b6:	2300      	movs	r3, #0
 80082b8:	f100 0114 	add.w	r1, r0, #20
 80082bc:	f100 0210 	add.w	r2, r0, #16
 80082c0:	4618      	mov	r0, r3
 80082c2:	4553      	cmp	r3, sl
 80082c4:	db33      	blt.n	800832e <__lshift+0xb6>
 80082c6:	6920      	ldr	r0, [r4, #16]
 80082c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082cc:	f104 0314 	add.w	r3, r4, #20
 80082d0:	f019 091f 	ands.w	r9, r9, #31
 80082d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082dc:	d02b      	beq.n	8008336 <__lshift+0xbe>
 80082de:	f1c9 0e20 	rsb	lr, r9, #32
 80082e2:	468a      	mov	sl, r1
 80082e4:	2200      	movs	r2, #0
 80082e6:	6818      	ldr	r0, [r3, #0]
 80082e8:	fa00 f009 	lsl.w	r0, r0, r9
 80082ec:	4310      	orrs	r0, r2
 80082ee:	f84a 0b04 	str.w	r0, [sl], #4
 80082f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f6:	459c      	cmp	ip, r3
 80082f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80082fc:	d8f3      	bhi.n	80082e6 <__lshift+0x6e>
 80082fe:	ebac 0304 	sub.w	r3, ip, r4
 8008302:	3b15      	subs	r3, #21
 8008304:	f023 0303 	bic.w	r3, r3, #3
 8008308:	3304      	adds	r3, #4
 800830a:	f104 0015 	add.w	r0, r4, #21
 800830e:	4584      	cmp	ip, r0
 8008310:	bf38      	it	cc
 8008312:	2304      	movcc	r3, #4
 8008314:	50ca      	str	r2, [r1, r3]
 8008316:	b10a      	cbz	r2, 800831c <__lshift+0xa4>
 8008318:	f108 0602 	add.w	r6, r8, #2
 800831c:	3e01      	subs	r6, #1
 800831e:	4638      	mov	r0, r7
 8008320:	612e      	str	r6, [r5, #16]
 8008322:	4621      	mov	r1, r4
 8008324:	f7ff fd8e 	bl	8007e44 <_Bfree>
 8008328:	4628      	mov	r0, r5
 800832a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008332:	3301      	adds	r3, #1
 8008334:	e7c5      	b.n	80082c2 <__lshift+0x4a>
 8008336:	3904      	subs	r1, #4
 8008338:	f853 2b04 	ldr.w	r2, [r3], #4
 800833c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008340:	459c      	cmp	ip, r3
 8008342:	d8f9      	bhi.n	8008338 <__lshift+0xc0>
 8008344:	e7ea      	b.n	800831c <__lshift+0xa4>
 8008346:	bf00      	nop
 8008348:	0800b05f 	.word	0x0800b05f
 800834c:	0800b070 	.word	0x0800b070

08008350 <__mcmp>:
 8008350:	b530      	push	{r4, r5, lr}
 8008352:	6902      	ldr	r2, [r0, #16]
 8008354:	690c      	ldr	r4, [r1, #16]
 8008356:	1b12      	subs	r2, r2, r4
 8008358:	d10e      	bne.n	8008378 <__mcmp+0x28>
 800835a:	f100 0314 	add.w	r3, r0, #20
 800835e:	3114      	adds	r1, #20
 8008360:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008364:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008368:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800836c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008370:	42a5      	cmp	r5, r4
 8008372:	d003      	beq.n	800837c <__mcmp+0x2c>
 8008374:	d305      	bcc.n	8008382 <__mcmp+0x32>
 8008376:	2201      	movs	r2, #1
 8008378:	4610      	mov	r0, r2
 800837a:	bd30      	pop	{r4, r5, pc}
 800837c:	4283      	cmp	r3, r0
 800837e:	d3f3      	bcc.n	8008368 <__mcmp+0x18>
 8008380:	e7fa      	b.n	8008378 <__mcmp+0x28>
 8008382:	f04f 32ff 	mov.w	r2, #4294967295
 8008386:	e7f7      	b.n	8008378 <__mcmp+0x28>

08008388 <__mdiff>:
 8008388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	460c      	mov	r4, r1
 800838e:	4606      	mov	r6, r0
 8008390:	4611      	mov	r1, r2
 8008392:	4620      	mov	r0, r4
 8008394:	4690      	mov	r8, r2
 8008396:	f7ff ffdb 	bl	8008350 <__mcmp>
 800839a:	1e05      	subs	r5, r0, #0
 800839c:	d110      	bne.n	80083c0 <__mdiff+0x38>
 800839e:	4629      	mov	r1, r5
 80083a0:	4630      	mov	r0, r6
 80083a2:	f7ff fd0f 	bl	8007dc4 <_Balloc>
 80083a6:	b930      	cbnz	r0, 80083b6 <__mdiff+0x2e>
 80083a8:	4b3a      	ldr	r3, [pc, #232]	; (8008494 <__mdiff+0x10c>)
 80083aa:	4602      	mov	r2, r0
 80083ac:	f240 2137 	movw	r1, #567	; 0x237
 80083b0:	4839      	ldr	r0, [pc, #228]	; (8008498 <__mdiff+0x110>)
 80083b2:	f001 fe19 	bl	8009fe8 <__assert_func>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c0:	bfa4      	itt	ge
 80083c2:	4643      	movge	r3, r8
 80083c4:	46a0      	movge	r8, r4
 80083c6:	4630      	mov	r0, r6
 80083c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80083cc:	bfa6      	itte	ge
 80083ce:	461c      	movge	r4, r3
 80083d0:	2500      	movge	r5, #0
 80083d2:	2501      	movlt	r5, #1
 80083d4:	f7ff fcf6 	bl	8007dc4 <_Balloc>
 80083d8:	b920      	cbnz	r0, 80083e4 <__mdiff+0x5c>
 80083da:	4b2e      	ldr	r3, [pc, #184]	; (8008494 <__mdiff+0x10c>)
 80083dc:	4602      	mov	r2, r0
 80083de:	f240 2145 	movw	r1, #581	; 0x245
 80083e2:	e7e5      	b.n	80083b0 <__mdiff+0x28>
 80083e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80083e8:	6926      	ldr	r6, [r4, #16]
 80083ea:	60c5      	str	r5, [r0, #12]
 80083ec:	f104 0914 	add.w	r9, r4, #20
 80083f0:	f108 0514 	add.w	r5, r8, #20
 80083f4:	f100 0e14 	add.w	lr, r0, #20
 80083f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80083fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008400:	f108 0210 	add.w	r2, r8, #16
 8008404:	46f2      	mov	sl, lr
 8008406:	2100      	movs	r1, #0
 8008408:	f859 3b04 	ldr.w	r3, [r9], #4
 800840c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008410:	fa11 f88b 	uxtah	r8, r1, fp
 8008414:	b299      	uxth	r1, r3
 8008416:	0c1b      	lsrs	r3, r3, #16
 8008418:	eba8 0801 	sub.w	r8, r8, r1
 800841c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008420:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008424:	fa1f f888 	uxth.w	r8, r8
 8008428:	1419      	asrs	r1, r3, #16
 800842a:	454e      	cmp	r6, r9
 800842c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008430:	f84a 3b04 	str.w	r3, [sl], #4
 8008434:	d8e8      	bhi.n	8008408 <__mdiff+0x80>
 8008436:	1b33      	subs	r3, r6, r4
 8008438:	3b15      	subs	r3, #21
 800843a:	f023 0303 	bic.w	r3, r3, #3
 800843e:	3304      	adds	r3, #4
 8008440:	3415      	adds	r4, #21
 8008442:	42a6      	cmp	r6, r4
 8008444:	bf38      	it	cc
 8008446:	2304      	movcc	r3, #4
 8008448:	441d      	add	r5, r3
 800844a:	4473      	add	r3, lr
 800844c:	469e      	mov	lr, r3
 800844e:	462e      	mov	r6, r5
 8008450:	4566      	cmp	r6, ip
 8008452:	d30e      	bcc.n	8008472 <__mdiff+0xea>
 8008454:	f10c 0203 	add.w	r2, ip, #3
 8008458:	1b52      	subs	r2, r2, r5
 800845a:	f022 0203 	bic.w	r2, r2, #3
 800845e:	3d03      	subs	r5, #3
 8008460:	45ac      	cmp	ip, r5
 8008462:	bf38      	it	cc
 8008464:	2200      	movcc	r2, #0
 8008466:	4413      	add	r3, r2
 8008468:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800846c:	b17a      	cbz	r2, 800848e <__mdiff+0x106>
 800846e:	6107      	str	r7, [r0, #16]
 8008470:	e7a4      	b.n	80083bc <__mdiff+0x34>
 8008472:	f856 8b04 	ldr.w	r8, [r6], #4
 8008476:	fa11 f288 	uxtah	r2, r1, r8
 800847a:	1414      	asrs	r4, r2, #16
 800847c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008480:	b292      	uxth	r2, r2
 8008482:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008486:	f84e 2b04 	str.w	r2, [lr], #4
 800848a:	1421      	asrs	r1, r4, #16
 800848c:	e7e0      	b.n	8008450 <__mdiff+0xc8>
 800848e:	3f01      	subs	r7, #1
 8008490:	e7ea      	b.n	8008468 <__mdiff+0xe0>
 8008492:	bf00      	nop
 8008494:	0800b05f 	.word	0x0800b05f
 8008498:	0800b070 	.word	0x0800b070

0800849c <__ulp>:
 800849c:	b082      	sub	sp, #8
 800849e:	ed8d 0b00 	vstr	d0, [sp]
 80084a2:	9a01      	ldr	r2, [sp, #4]
 80084a4:	4b0f      	ldr	r3, [pc, #60]	; (80084e4 <__ulp+0x48>)
 80084a6:	4013      	ands	r3, r2
 80084a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	dc08      	bgt.n	80084c2 <__ulp+0x26>
 80084b0:	425b      	negs	r3, r3
 80084b2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80084b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80084ba:	da04      	bge.n	80084c6 <__ulp+0x2a>
 80084bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80084c0:	4113      	asrs	r3, r2
 80084c2:	2200      	movs	r2, #0
 80084c4:	e008      	b.n	80084d8 <__ulp+0x3c>
 80084c6:	f1a2 0314 	sub.w	r3, r2, #20
 80084ca:	2b1e      	cmp	r3, #30
 80084cc:	bfda      	itte	le
 80084ce:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80084d2:	40da      	lsrle	r2, r3
 80084d4:	2201      	movgt	r2, #1
 80084d6:	2300      	movs	r3, #0
 80084d8:	4619      	mov	r1, r3
 80084da:	4610      	mov	r0, r2
 80084dc:	ec41 0b10 	vmov	d0, r0, r1
 80084e0:	b002      	add	sp, #8
 80084e2:	4770      	bx	lr
 80084e4:	7ff00000 	.word	0x7ff00000

080084e8 <__b2d>:
 80084e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ec:	6906      	ldr	r6, [r0, #16]
 80084ee:	f100 0814 	add.w	r8, r0, #20
 80084f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80084f6:	1f37      	subs	r7, r6, #4
 80084f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80084fc:	4610      	mov	r0, r2
 80084fe:	f7ff fd53 	bl	8007fa8 <__hi0bits>
 8008502:	f1c0 0320 	rsb	r3, r0, #32
 8008506:	280a      	cmp	r0, #10
 8008508:	600b      	str	r3, [r1, #0]
 800850a:	491b      	ldr	r1, [pc, #108]	; (8008578 <__b2d+0x90>)
 800850c:	dc15      	bgt.n	800853a <__b2d+0x52>
 800850e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008512:	fa22 f30c 	lsr.w	r3, r2, ip
 8008516:	45b8      	cmp	r8, r7
 8008518:	ea43 0501 	orr.w	r5, r3, r1
 800851c:	bf34      	ite	cc
 800851e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008522:	2300      	movcs	r3, #0
 8008524:	3015      	adds	r0, #21
 8008526:	fa02 f000 	lsl.w	r0, r2, r0
 800852a:	fa23 f30c 	lsr.w	r3, r3, ip
 800852e:	4303      	orrs	r3, r0
 8008530:	461c      	mov	r4, r3
 8008532:	ec45 4b10 	vmov	d0, r4, r5
 8008536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800853a:	45b8      	cmp	r8, r7
 800853c:	bf3a      	itte	cc
 800853e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008542:	f1a6 0708 	subcc.w	r7, r6, #8
 8008546:	2300      	movcs	r3, #0
 8008548:	380b      	subs	r0, #11
 800854a:	d012      	beq.n	8008572 <__b2d+0x8a>
 800854c:	f1c0 0120 	rsb	r1, r0, #32
 8008550:	fa23 f401 	lsr.w	r4, r3, r1
 8008554:	4082      	lsls	r2, r0
 8008556:	4322      	orrs	r2, r4
 8008558:	4547      	cmp	r7, r8
 800855a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800855e:	bf8c      	ite	hi
 8008560:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008564:	2200      	movls	r2, #0
 8008566:	4083      	lsls	r3, r0
 8008568:	40ca      	lsrs	r2, r1
 800856a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800856e:	4313      	orrs	r3, r2
 8008570:	e7de      	b.n	8008530 <__b2d+0x48>
 8008572:	ea42 0501 	orr.w	r5, r2, r1
 8008576:	e7db      	b.n	8008530 <__b2d+0x48>
 8008578:	3ff00000 	.word	0x3ff00000

0800857c <__d2b>:
 800857c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008580:	460f      	mov	r7, r1
 8008582:	2101      	movs	r1, #1
 8008584:	ec59 8b10 	vmov	r8, r9, d0
 8008588:	4616      	mov	r6, r2
 800858a:	f7ff fc1b 	bl	8007dc4 <_Balloc>
 800858e:	4604      	mov	r4, r0
 8008590:	b930      	cbnz	r0, 80085a0 <__d2b+0x24>
 8008592:	4602      	mov	r2, r0
 8008594:	4b24      	ldr	r3, [pc, #144]	; (8008628 <__d2b+0xac>)
 8008596:	4825      	ldr	r0, [pc, #148]	; (800862c <__d2b+0xb0>)
 8008598:	f240 310f 	movw	r1, #783	; 0x30f
 800859c:	f001 fd24 	bl	8009fe8 <__assert_func>
 80085a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085a8:	bb2d      	cbnz	r5, 80085f6 <__d2b+0x7a>
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	f1b8 0300 	subs.w	r3, r8, #0
 80085b0:	d026      	beq.n	8008600 <__d2b+0x84>
 80085b2:	4668      	mov	r0, sp
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	f7ff fd17 	bl	8007fe8 <__lo0bits>
 80085ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80085be:	b1e8      	cbz	r0, 80085fc <__d2b+0x80>
 80085c0:	f1c0 0320 	rsb	r3, r0, #32
 80085c4:	fa02 f303 	lsl.w	r3, r2, r3
 80085c8:	430b      	orrs	r3, r1
 80085ca:	40c2      	lsrs	r2, r0
 80085cc:	6163      	str	r3, [r4, #20]
 80085ce:	9201      	str	r2, [sp, #4]
 80085d0:	9b01      	ldr	r3, [sp, #4]
 80085d2:	61a3      	str	r3, [r4, #24]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	bf14      	ite	ne
 80085d8:	2202      	movne	r2, #2
 80085da:	2201      	moveq	r2, #1
 80085dc:	6122      	str	r2, [r4, #16]
 80085de:	b1bd      	cbz	r5, 8008610 <__d2b+0x94>
 80085e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80085e4:	4405      	add	r5, r0
 80085e6:	603d      	str	r5, [r7, #0]
 80085e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80085ec:	6030      	str	r0, [r6, #0]
 80085ee:	4620      	mov	r0, r4
 80085f0:	b003      	add	sp, #12
 80085f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085fa:	e7d6      	b.n	80085aa <__d2b+0x2e>
 80085fc:	6161      	str	r1, [r4, #20]
 80085fe:	e7e7      	b.n	80085d0 <__d2b+0x54>
 8008600:	a801      	add	r0, sp, #4
 8008602:	f7ff fcf1 	bl	8007fe8 <__lo0bits>
 8008606:	9b01      	ldr	r3, [sp, #4]
 8008608:	6163      	str	r3, [r4, #20]
 800860a:	3020      	adds	r0, #32
 800860c:	2201      	movs	r2, #1
 800860e:	e7e5      	b.n	80085dc <__d2b+0x60>
 8008610:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008614:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008618:	6038      	str	r0, [r7, #0]
 800861a:	6918      	ldr	r0, [r3, #16]
 800861c:	f7ff fcc4 	bl	8007fa8 <__hi0bits>
 8008620:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008624:	e7e2      	b.n	80085ec <__d2b+0x70>
 8008626:	bf00      	nop
 8008628:	0800b05f 	.word	0x0800b05f
 800862c:	0800b070 	.word	0x0800b070

08008630 <__ratio>:
 8008630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	4688      	mov	r8, r1
 8008636:	4669      	mov	r1, sp
 8008638:	4681      	mov	r9, r0
 800863a:	f7ff ff55 	bl	80084e8 <__b2d>
 800863e:	a901      	add	r1, sp, #4
 8008640:	4640      	mov	r0, r8
 8008642:	ec55 4b10 	vmov	r4, r5, d0
 8008646:	f7ff ff4f 	bl	80084e8 <__b2d>
 800864a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800864e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008652:	eba3 0c02 	sub.w	ip, r3, r2
 8008656:	e9dd 3200 	ldrd	r3, r2, [sp]
 800865a:	1a9b      	subs	r3, r3, r2
 800865c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008660:	ec51 0b10 	vmov	r0, r1, d0
 8008664:	2b00      	cmp	r3, #0
 8008666:	bfd6      	itet	le
 8008668:	460a      	movle	r2, r1
 800866a:	462a      	movgt	r2, r5
 800866c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008670:	468b      	mov	fp, r1
 8008672:	462f      	mov	r7, r5
 8008674:	bfd4      	ite	le
 8008676:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800867a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800867e:	4620      	mov	r0, r4
 8008680:	ee10 2a10 	vmov	r2, s0
 8008684:	465b      	mov	r3, fp
 8008686:	4639      	mov	r1, r7
 8008688:	f7f8 f8e8 	bl	800085c <__aeabi_ddiv>
 800868c:	ec41 0b10 	vmov	d0, r0, r1
 8008690:	b003      	add	sp, #12
 8008692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008696 <__copybits>:
 8008696:	3901      	subs	r1, #1
 8008698:	b570      	push	{r4, r5, r6, lr}
 800869a:	1149      	asrs	r1, r1, #5
 800869c:	6914      	ldr	r4, [r2, #16]
 800869e:	3101      	adds	r1, #1
 80086a0:	f102 0314 	add.w	r3, r2, #20
 80086a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80086a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80086ac:	1f05      	subs	r5, r0, #4
 80086ae:	42a3      	cmp	r3, r4
 80086b0:	d30c      	bcc.n	80086cc <__copybits+0x36>
 80086b2:	1aa3      	subs	r3, r4, r2
 80086b4:	3b11      	subs	r3, #17
 80086b6:	f023 0303 	bic.w	r3, r3, #3
 80086ba:	3211      	adds	r2, #17
 80086bc:	42a2      	cmp	r2, r4
 80086be:	bf88      	it	hi
 80086c0:	2300      	movhi	r3, #0
 80086c2:	4418      	add	r0, r3
 80086c4:	2300      	movs	r3, #0
 80086c6:	4288      	cmp	r0, r1
 80086c8:	d305      	bcc.n	80086d6 <__copybits+0x40>
 80086ca:	bd70      	pop	{r4, r5, r6, pc}
 80086cc:	f853 6b04 	ldr.w	r6, [r3], #4
 80086d0:	f845 6f04 	str.w	r6, [r5, #4]!
 80086d4:	e7eb      	b.n	80086ae <__copybits+0x18>
 80086d6:	f840 3b04 	str.w	r3, [r0], #4
 80086da:	e7f4      	b.n	80086c6 <__copybits+0x30>

080086dc <__any_on>:
 80086dc:	f100 0214 	add.w	r2, r0, #20
 80086e0:	6900      	ldr	r0, [r0, #16]
 80086e2:	114b      	asrs	r3, r1, #5
 80086e4:	4298      	cmp	r0, r3
 80086e6:	b510      	push	{r4, lr}
 80086e8:	db11      	blt.n	800870e <__any_on+0x32>
 80086ea:	dd0a      	ble.n	8008702 <__any_on+0x26>
 80086ec:	f011 011f 	ands.w	r1, r1, #31
 80086f0:	d007      	beq.n	8008702 <__any_on+0x26>
 80086f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80086f6:	fa24 f001 	lsr.w	r0, r4, r1
 80086fa:	fa00 f101 	lsl.w	r1, r0, r1
 80086fe:	428c      	cmp	r4, r1
 8008700:	d10b      	bne.n	800871a <__any_on+0x3e>
 8008702:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008706:	4293      	cmp	r3, r2
 8008708:	d803      	bhi.n	8008712 <__any_on+0x36>
 800870a:	2000      	movs	r0, #0
 800870c:	bd10      	pop	{r4, pc}
 800870e:	4603      	mov	r3, r0
 8008710:	e7f7      	b.n	8008702 <__any_on+0x26>
 8008712:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008716:	2900      	cmp	r1, #0
 8008718:	d0f5      	beq.n	8008706 <__any_on+0x2a>
 800871a:	2001      	movs	r0, #1
 800871c:	e7f6      	b.n	800870c <__any_on+0x30>

0800871e <sulp>:
 800871e:	b570      	push	{r4, r5, r6, lr}
 8008720:	4604      	mov	r4, r0
 8008722:	460d      	mov	r5, r1
 8008724:	ec45 4b10 	vmov	d0, r4, r5
 8008728:	4616      	mov	r6, r2
 800872a:	f7ff feb7 	bl	800849c <__ulp>
 800872e:	ec51 0b10 	vmov	r0, r1, d0
 8008732:	b17e      	cbz	r6, 8008754 <sulp+0x36>
 8008734:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008738:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800873c:	2b00      	cmp	r3, #0
 800873e:	dd09      	ble.n	8008754 <sulp+0x36>
 8008740:	051b      	lsls	r3, r3, #20
 8008742:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008746:	2400      	movs	r4, #0
 8008748:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800874c:	4622      	mov	r2, r4
 800874e:	462b      	mov	r3, r5
 8008750:	f7f7 ff5a 	bl	8000608 <__aeabi_dmul>
 8008754:	bd70      	pop	{r4, r5, r6, pc}
	...

08008758 <_strtod_l>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	ed2d 8b02 	vpush	{d8}
 8008760:	b09b      	sub	sp, #108	; 0x6c
 8008762:	4604      	mov	r4, r0
 8008764:	9213      	str	r2, [sp, #76]	; 0x4c
 8008766:	2200      	movs	r2, #0
 8008768:	9216      	str	r2, [sp, #88]	; 0x58
 800876a:	460d      	mov	r5, r1
 800876c:	f04f 0800 	mov.w	r8, #0
 8008770:	f04f 0900 	mov.w	r9, #0
 8008774:	460a      	mov	r2, r1
 8008776:	9215      	str	r2, [sp, #84]	; 0x54
 8008778:	7811      	ldrb	r1, [r2, #0]
 800877a:	292b      	cmp	r1, #43	; 0x2b
 800877c:	d04c      	beq.n	8008818 <_strtod_l+0xc0>
 800877e:	d83a      	bhi.n	80087f6 <_strtod_l+0x9e>
 8008780:	290d      	cmp	r1, #13
 8008782:	d834      	bhi.n	80087ee <_strtod_l+0x96>
 8008784:	2908      	cmp	r1, #8
 8008786:	d834      	bhi.n	80087f2 <_strtod_l+0x9a>
 8008788:	2900      	cmp	r1, #0
 800878a:	d03d      	beq.n	8008808 <_strtod_l+0xb0>
 800878c:	2200      	movs	r2, #0
 800878e:	920a      	str	r2, [sp, #40]	; 0x28
 8008790:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008792:	7832      	ldrb	r2, [r6, #0]
 8008794:	2a30      	cmp	r2, #48	; 0x30
 8008796:	f040 80b4 	bne.w	8008902 <_strtod_l+0x1aa>
 800879a:	7872      	ldrb	r2, [r6, #1]
 800879c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80087a0:	2a58      	cmp	r2, #88	; 0x58
 80087a2:	d170      	bne.n	8008886 <_strtod_l+0x12e>
 80087a4:	9302      	str	r3, [sp, #8]
 80087a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	ab16      	add	r3, sp, #88	; 0x58
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	4a8e      	ldr	r2, [pc, #568]	; (80089e8 <_strtod_l+0x290>)
 80087b0:	ab17      	add	r3, sp, #92	; 0x5c
 80087b2:	a915      	add	r1, sp, #84	; 0x54
 80087b4:	4620      	mov	r0, r4
 80087b6:	f001 fcb3 	bl	800a120 <__gethex>
 80087ba:	f010 070f 	ands.w	r7, r0, #15
 80087be:	4605      	mov	r5, r0
 80087c0:	d005      	beq.n	80087ce <_strtod_l+0x76>
 80087c2:	2f06      	cmp	r7, #6
 80087c4:	d12a      	bne.n	800881c <_strtod_l+0xc4>
 80087c6:	3601      	adds	r6, #1
 80087c8:	2300      	movs	r3, #0
 80087ca:	9615      	str	r6, [sp, #84]	; 0x54
 80087cc:	930a      	str	r3, [sp, #40]	; 0x28
 80087ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f040 857f 	bne.w	80092d4 <_strtod_l+0xb7c>
 80087d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d8:	b1db      	cbz	r3, 8008812 <_strtod_l+0xba>
 80087da:	4642      	mov	r2, r8
 80087dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80087e0:	ec43 2b10 	vmov	d0, r2, r3
 80087e4:	b01b      	add	sp, #108	; 0x6c
 80087e6:	ecbd 8b02 	vpop	{d8}
 80087ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ee:	2920      	cmp	r1, #32
 80087f0:	d1cc      	bne.n	800878c <_strtod_l+0x34>
 80087f2:	3201      	adds	r2, #1
 80087f4:	e7bf      	b.n	8008776 <_strtod_l+0x1e>
 80087f6:	292d      	cmp	r1, #45	; 0x2d
 80087f8:	d1c8      	bne.n	800878c <_strtod_l+0x34>
 80087fa:	2101      	movs	r1, #1
 80087fc:	910a      	str	r1, [sp, #40]	; 0x28
 80087fe:	1c51      	adds	r1, r2, #1
 8008800:	9115      	str	r1, [sp, #84]	; 0x54
 8008802:	7852      	ldrb	r2, [r2, #1]
 8008804:	2a00      	cmp	r2, #0
 8008806:	d1c3      	bne.n	8008790 <_strtod_l+0x38>
 8008808:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800880a:	9515      	str	r5, [sp, #84]	; 0x54
 800880c:	2b00      	cmp	r3, #0
 800880e:	f040 855f 	bne.w	80092d0 <_strtod_l+0xb78>
 8008812:	4642      	mov	r2, r8
 8008814:	464b      	mov	r3, r9
 8008816:	e7e3      	b.n	80087e0 <_strtod_l+0x88>
 8008818:	2100      	movs	r1, #0
 800881a:	e7ef      	b.n	80087fc <_strtod_l+0xa4>
 800881c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800881e:	b13a      	cbz	r2, 8008830 <_strtod_l+0xd8>
 8008820:	2135      	movs	r1, #53	; 0x35
 8008822:	a818      	add	r0, sp, #96	; 0x60
 8008824:	f7ff ff37 	bl	8008696 <__copybits>
 8008828:	9916      	ldr	r1, [sp, #88]	; 0x58
 800882a:	4620      	mov	r0, r4
 800882c:	f7ff fb0a 	bl	8007e44 <_Bfree>
 8008830:	3f01      	subs	r7, #1
 8008832:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008834:	2f04      	cmp	r7, #4
 8008836:	d806      	bhi.n	8008846 <_strtod_l+0xee>
 8008838:	e8df f007 	tbb	[pc, r7]
 800883c:	201d0314 	.word	0x201d0314
 8008840:	14          	.byte	0x14
 8008841:	00          	.byte	0x00
 8008842:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008846:	05e9      	lsls	r1, r5, #23
 8008848:	bf48      	it	mi
 800884a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800884e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008852:	0d1b      	lsrs	r3, r3, #20
 8008854:	051b      	lsls	r3, r3, #20
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1b9      	bne.n	80087ce <_strtod_l+0x76>
 800885a:	f7fe faf5 	bl	8006e48 <__errno>
 800885e:	2322      	movs	r3, #34	; 0x22
 8008860:	6003      	str	r3, [r0, #0]
 8008862:	e7b4      	b.n	80087ce <_strtod_l+0x76>
 8008864:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008868:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800886c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008870:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008874:	e7e7      	b.n	8008846 <_strtod_l+0xee>
 8008876:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80089f0 <_strtod_l+0x298>
 800887a:	e7e4      	b.n	8008846 <_strtod_l+0xee>
 800887c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008880:	f04f 38ff 	mov.w	r8, #4294967295
 8008884:	e7df      	b.n	8008846 <_strtod_l+0xee>
 8008886:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	9215      	str	r2, [sp, #84]	; 0x54
 800888c:	785b      	ldrb	r3, [r3, #1]
 800888e:	2b30      	cmp	r3, #48	; 0x30
 8008890:	d0f9      	beq.n	8008886 <_strtod_l+0x12e>
 8008892:	2b00      	cmp	r3, #0
 8008894:	d09b      	beq.n	80087ce <_strtod_l+0x76>
 8008896:	2301      	movs	r3, #1
 8008898:	f04f 0a00 	mov.w	sl, #0
 800889c:	9304      	str	r3, [sp, #16]
 800889e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80088a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80088a6:	46d3      	mov	fp, sl
 80088a8:	220a      	movs	r2, #10
 80088aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80088ac:	7806      	ldrb	r6, [r0, #0]
 80088ae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80088b2:	b2d9      	uxtb	r1, r3
 80088b4:	2909      	cmp	r1, #9
 80088b6:	d926      	bls.n	8008906 <_strtod_l+0x1ae>
 80088b8:	494c      	ldr	r1, [pc, #304]	; (80089ec <_strtod_l+0x294>)
 80088ba:	2201      	movs	r2, #1
 80088bc:	f7fe fa67 	bl	8006d8e <strncmp>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d030      	beq.n	8008926 <_strtod_l+0x1ce>
 80088c4:	2000      	movs	r0, #0
 80088c6:	4632      	mov	r2, r6
 80088c8:	9005      	str	r0, [sp, #20]
 80088ca:	465e      	mov	r6, fp
 80088cc:	4603      	mov	r3, r0
 80088ce:	2a65      	cmp	r2, #101	; 0x65
 80088d0:	d001      	beq.n	80088d6 <_strtod_l+0x17e>
 80088d2:	2a45      	cmp	r2, #69	; 0x45
 80088d4:	d113      	bne.n	80088fe <_strtod_l+0x1a6>
 80088d6:	b91e      	cbnz	r6, 80088e0 <_strtod_l+0x188>
 80088d8:	9a04      	ldr	r2, [sp, #16]
 80088da:	4302      	orrs	r2, r0
 80088dc:	d094      	beq.n	8008808 <_strtod_l+0xb0>
 80088de:	2600      	movs	r6, #0
 80088e0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80088e2:	1c6a      	adds	r2, r5, #1
 80088e4:	9215      	str	r2, [sp, #84]	; 0x54
 80088e6:	786a      	ldrb	r2, [r5, #1]
 80088e8:	2a2b      	cmp	r2, #43	; 0x2b
 80088ea:	d074      	beq.n	80089d6 <_strtod_l+0x27e>
 80088ec:	2a2d      	cmp	r2, #45	; 0x2d
 80088ee:	d078      	beq.n	80089e2 <_strtod_l+0x28a>
 80088f0:	f04f 0c00 	mov.w	ip, #0
 80088f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80088f8:	2909      	cmp	r1, #9
 80088fa:	d97f      	bls.n	80089fc <_strtod_l+0x2a4>
 80088fc:	9515      	str	r5, [sp, #84]	; 0x54
 80088fe:	2700      	movs	r7, #0
 8008900:	e09e      	b.n	8008a40 <_strtod_l+0x2e8>
 8008902:	2300      	movs	r3, #0
 8008904:	e7c8      	b.n	8008898 <_strtod_l+0x140>
 8008906:	f1bb 0f08 	cmp.w	fp, #8
 800890a:	bfd8      	it	le
 800890c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800890e:	f100 0001 	add.w	r0, r0, #1
 8008912:	bfda      	itte	le
 8008914:	fb02 3301 	mlale	r3, r2, r1, r3
 8008918:	9309      	strle	r3, [sp, #36]	; 0x24
 800891a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800891e:	f10b 0b01 	add.w	fp, fp, #1
 8008922:	9015      	str	r0, [sp, #84]	; 0x54
 8008924:	e7c1      	b.n	80088aa <_strtod_l+0x152>
 8008926:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	9215      	str	r2, [sp, #84]	; 0x54
 800892c:	785a      	ldrb	r2, [r3, #1]
 800892e:	f1bb 0f00 	cmp.w	fp, #0
 8008932:	d037      	beq.n	80089a4 <_strtod_l+0x24c>
 8008934:	9005      	str	r0, [sp, #20]
 8008936:	465e      	mov	r6, fp
 8008938:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800893c:	2b09      	cmp	r3, #9
 800893e:	d912      	bls.n	8008966 <_strtod_l+0x20e>
 8008940:	2301      	movs	r3, #1
 8008942:	e7c4      	b.n	80088ce <_strtod_l+0x176>
 8008944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	9215      	str	r2, [sp, #84]	; 0x54
 800894a:	785a      	ldrb	r2, [r3, #1]
 800894c:	3001      	adds	r0, #1
 800894e:	2a30      	cmp	r2, #48	; 0x30
 8008950:	d0f8      	beq.n	8008944 <_strtod_l+0x1ec>
 8008952:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008956:	2b08      	cmp	r3, #8
 8008958:	f200 84c1 	bhi.w	80092de <_strtod_l+0xb86>
 800895c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800895e:	9005      	str	r0, [sp, #20]
 8008960:	2000      	movs	r0, #0
 8008962:	930b      	str	r3, [sp, #44]	; 0x2c
 8008964:	4606      	mov	r6, r0
 8008966:	3a30      	subs	r2, #48	; 0x30
 8008968:	f100 0301 	add.w	r3, r0, #1
 800896c:	d014      	beq.n	8008998 <_strtod_l+0x240>
 800896e:	9905      	ldr	r1, [sp, #20]
 8008970:	4419      	add	r1, r3
 8008972:	9105      	str	r1, [sp, #20]
 8008974:	4633      	mov	r3, r6
 8008976:	eb00 0c06 	add.w	ip, r0, r6
 800897a:	210a      	movs	r1, #10
 800897c:	4563      	cmp	r3, ip
 800897e:	d113      	bne.n	80089a8 <_strtod_l+0x250>
 8008980:	1833      	adds	r3, r6, r0
 8008982:	2b08      	cmp	r3, #8
 8008984:	f106 0601 	add.w	r6, r6, #1
 8008988:	4406      	add	r6, r0
 800898a:	dc1a      	bgt.n	80089c2 <_strtod_l+0x26a>
 800898c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800898e:	230a      	movs	r3, #10
 8008990:	fb03 2301 	mla	r3, r3, r1, r2
 8008994:	9309      	str	r3, [sp, #36]	; 0x24
 8008996:	2300      	movs	r3, #0
 8008998:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800899a:	1c51      	adds	r1, r2, #1
 800899c:	9115      	str	r1, [sp, #84]	; 0x54
 800899e:	7852      	ldrb	r2, [r2, #1]
 80089a0:	4618      	mov	r0, r3
 80089a2:	e7c9      	b.n	8008938 <_strtod_l+0x1e0>
 80089a4:	4658      	mov	r0, fp
 80089a6:	e7d2      	b.n	800894e <_strtod_l+0x1f6>
 80089a8:	2b08      	cmp	r3, #8
 80089aa:	f103 0301 	add.w	r3, r3, #1
 80089ae:	dc03      	bgt.n	80089b8 <_strtod_l+0x260>
 80089b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80089b2:	434f      	muls	r7, r1
 80089b4:	9709      	str	r7, [sp, #36]	; 0x24
 80089b6:	e7e1      	b.n	800897c <_strtod_l+0x224>
 80089b8:	2b10      	cmp	r3, #16
 80089ba:	bfd8      	it	le
 80089bc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80089c0:	e7dc      	b.n	800897c <_strtod_l+0x224>
 80089c2:	2e10      	cmp	r6, #16
 80089c4:	bfdc      	itt	le
 80089c6:	230a      	movle	r3, #10
 80089c8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80089cc:	e7e3      	b.n	8008996 <_strtod_l+0x23e>
 80089ce:	2300      	movs	r3, #0
 80089d0:	9305      	str	r3, [sp, #20]
 80089d2:	2301      	movs	r3, #1
 80089d4:	e780      	b.n	80088d8 <_strtod_l+0x180>
 80089d6:	f04f 0c00 	mov.w	ip, #0
 80089da:	1caa      	adds	r2, r5, #2
 80089dc:	9215      	str	r2, [sp, #84]	; 0x54
 80089de:	78aa      	ldrb	r2, [r5, #2]
 80089e0:	e788      	b.n	80088f4 <_strtod_l+0x19c>
 80089e2:	f04f 0c01 	mov.w	ip, #1
 80089e6:	e7f8      	b.n	80089da <_strtod_l+0x282>
 80089e8:	0800b1d0 	.word	0x0800b1d0
 80089ec:	0800b1cc 	.word	0x0800b1cc
 80089f0:	7ff00000 	.word	0x7ff00000
 80089f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80089f6:	1c51      	adds	r1, r2, #1
 80089f8:	9115      	str	r1, [sp, #84]	; 0x54
 80089fa:	7852      	ldrb	r2, [r2, #1]
 80089fc:	2a30      	cmp	r2, #48	; 0x30
 80089fe:	d0f9      	beq.n	80089f4 <_strtod_l+0x29c>
 8008a00:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008a04:	2908      	cmp	r1, #8
 8008a06:	f63f af7a 	bhi.w	80088fe <_strtod_l+0x1a6>
 8008a0a:	3a30      	subs	r2, #48	; 0x30
 8008a0c:	9208      	str	r2, [sp, #32]
 8008a0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008a10:	920c      	str	r2, [sp, #48]	; 0x30
 8008a12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008a14:	1c57      	adds	r7, r2, #1
 8008a16:	9715      	str	r7, [sp, #84]	; 0x54
 8008a18:	7852      	ldrb	r2, [r2, #1]
 8008a1a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008a1e:	f1be 0f09 	cmp.w	lr, #9
 8008a22:	d938      	bls.n	8008a96 <_strtod_l+0x33e>
 8008a24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a26:	1a7f      	subs	r7, r7, r1
 8008a28:	2f08      	cmp	r7, #8
 8008a2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008a2e:	dc03      	bgt.n	8008a38 <_strtod_l+0x2e0>
 8008a30:	9908      	ldr	r1, [sp, #32]
 8008a32:	428f      	cmp	r7, r1
 8008a34:	bfa8      	it	ge
 8008a36:	460f      	movge	r7, r1
 8008a38:	f1bc 0f00 	cmp.w	ip, #0
 8008a3c:	d000      	beq.n	8008a40 <_strtod_l+0x2e8>
 8008a3e:	427f      	negs	r7, r7
 8008a40:	2e00      	cmp	r6, #0
 8008a42:	d14f      	bne.n	8008ae4 <_strtod_l+0x38c>
 8008a44:	9904      	ldr	r1, [sp, #16]
 8008a46:	4301      	orrs	r1, r0
 8008a48:	f47f aec1 	bne.w	80087ce <_strtod_l+0x76>
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f47f aedb 	bne.w	8008808 <_strtod_l+0xb0>
 8008a52:	2a69      	cmp	r2, #105	; 0x69
 8008a54:	d029      	beq.n	8008aaa <_strtod_l+0x352>
 8008a56:	dc26      	bgt.n	8008aa6 <_strtod_l+0x34e>
 8008a58:	2a49      	cmp	r2, #73	; 0x49
 8008a5a:	d026      	beq.n	8008aaa <_strtod_l+0x352>
 8008a5c:	2a4e      	cmp	r2, #78	; 0x4e
 8008a5e:	f47f aed3 	bne.w	8008808 <_strtod_l+0xb0>
 8008a62:	499b      	ldr	r1, [pc, #620]	; (8008cd0 <_strtod_l+0x578>)
 8008a64:	a815      	add	r0, sp, #84	; 0x54
 8008a66:	f001 fd9b 	bl	800a5a0 <__match>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	f43f aecc 	beq.w	8008808 <_strtod_l+0xb0>
 8008a70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	2b28      	cmp	r3, #40	; 0x28
 8008a76:	d12f      	bne.n	8008ad8 <_strtod_l+0x380>
 8008a78:	4996      	ldr	r1, [pc, #600]	; (8008cd4 <_strtod_l+0x57c>)
 8008a7a:	aa18      	add	r2, sp, #96	; 0x60
 8008a7c:	a815      	add	r0, sp, #84	; 0x54
 8008a7e:	f001 fda3 	bl	800a5c8 <__hexnan>
 8008a82:	2805      	cmp	r0, #5
 8008a84:	d128      	bne.n	8008ad8 <_strtod_l+0x380>
 8008a86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008a8c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008a90:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008a94:	e69b      	b.n	80087ce <_strtod_l+0x76>
 8008a96:	9f08      	ldr	r7, [sp, #32]
 8008a98:	210a      	movs	r1, #10
 8008a9a:	fb01 2107 	mla	r1, r1, r7, r2
 8008a9e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008aa2:	9208      	str	r2, [sp, #32]
 8008aa4:	e7b5      	b.n	8008a12 <_strtod_l+0x2ba>
 8008aa6:	2a6e      	cmp	r2, #110	; 0x6e
 8008aa8:	e7d9      	b.n	8008a5e <_strtod_l+0x306>
 8008aaa:	498b      	ldr	r1, [pc, #556]	; (8008cd8 <_strtod_l+0x580>)
 8008aac:	a815      	add	r0, sp, #84	; 0x54
 8008aae:	f001 fd77 	bl	800a5a0 <__match>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	f43f aea8 	beq.w	8008808 <_strtod_l+0xb0>
 8008ab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008aba:	4988      	ldr	r1, [pc, #544]	; (8008cdc <_strtod_l+0x584>)
 8008abc:	3b01      	subs	r3, #1
 8008abe:	a815      	add	r0, sp, #84	; 0x54
 8008ac0:	9315      	str	r3, [sp, #84]	; 0x54
 8008ac2:	f001 fd6d 	bl	800a5a0 <__match>
 8008ac6:	b910      	cbnz	r0, 8008ace <_strtod_l+0x376>
 8008ac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008aca:	3301      	adds	r3, #1
 8008acc:	9315      	str	r3, [sp, #84]	; 0x54
 8008ace:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008cec <_strtod_l+0x594>
 8008ad2:	f04f 0800 	mov.w	r8, #0
 8008ad6:	e67a      	b.n	80087ce <_strtod_l+0x76>
 8008ad8:	4881      	ldr	r0, [pc, #516]	; (8008ce0 <_strtod_l+0x588>)
 8008ada:	f001 fa7d 	bl	8009fd8 <nan>
 8008ade:	ec59 8b10 	vmov	r8, r9, d0
 8008ae2:	e674      	b.n	80087ce <_strtod_l+0x76>
 8008ae4:	9b05      	ldr	r3, [sp, #20]
 8008ae6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ae8:	1afb      	subs	r3, r7, r3
 8008aea:	f1bb 0f00 	cmp.w	fp, #0
 8008aee:	bf08      	it	eq
 8008af0:	46b3      	moveq	fp, r6
 8008af2:	2e10      	cmp	r6, #16
 8008af4:	9308      	str	r3, [sp, #32]
 8008af6:	4635      	mov	r5, r6
 8008af8:	bfa8      	it	ge
 8008afa:	2510      	movge	r5, #16
 8008afc:	f7f7 fd0a 	bl	8000514 <__aeabi_ui2d>
 8008b00:	2e09      	cmp	r6, #9
 8008b02:	4680      	mov	r8, r0
 8008b04:	4689      	mov	r9, r1
 8008b06:	dd13      	ble.n	8008b30 <_strtod_l+0x3d8>
 8008b08:	4b76      	ldr	r3, [pc, #472]	; (8008ce4 <_strtod_l+0x58c>)
 8008b0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008b0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008b12:	f7f7 fd79 	bl	8000608 <__aeabi_dmul>
 8008b16:	4680      	mov	r8, r0
 8008b18:	4650      	mov	r0, sl
 8008b1a:	4689      	mov	r9, r1
 8008b1c:	f7f7 fcfa 	bl	8000514 <__aeabi_ui2d>
 8008b20:	4602      	mov	r2, r0
 8008b22:	460b      	mov	r3, r1
 8008b24:	4640      	mov	r0, r8
 8008b26:	4649      	mov	r1, r9
 8008b28:	f7f7 fbb8 	bl	800029c <__adddf3>
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	4689      	mov	r9, r1
 8008b30:	2e0f      	cmp	r6, #15
 8008b32:	dc38      	bgt.n	8008ba6 <_strtod_l+0x44e>
 8008b34:	9b08      	ldr	r3, [sp, #32]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f43f ae49 	beq.w	80087ce <_strtod_l+0x76>
 8008b3c:	dd24      	ble.n	8008b88 <_strtod_l+0x430>
 8008b3e:	2b16      	cmp	r3, #22
 8008b40:	dc0b      	bgt.n	8008b5a <_strtod_l+0x402>
 8008b42:	4968      	ldr	r1, [pc, #416]	; (8008ce4 <_strtod_l+0x58c>)
 8008b44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b4c:	4642      	mov	r2, r8
 8008b4e:	464b      	mov	r3, r9
 8008b50:	f7f7 fd5a 	bl	8000608 <__aeabi_dmul>
 8008b54:	4680      	mov	r8, r0
 8008b56:	4689      	mov	r9, r1
 8008b58:	e639      	b.n	80087ce <_strtod_l+0x76>
 8008b5a:	9a08      	ldr	r2, [sp, #32]
 8008b5c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008b60:	4293      	cmp	r3, r2
 8008b62:	db20      	blt.n	8008ba6 <_strtod_l+0x44e>
 8008b64:	4c5f      	ldr	r4, [pc, #380]	; (8008ce4 <_strtod_l+0x58c>)
 8008b66:	f1c6 060f 	rsb	r6, r6, #15
 8008b6a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008b6e:	4642      	mov	r2, r8
 8008b70:	464b      	mov	r3, r9
 8008b72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b76:	f7f7 fd47 	bl	8000608 <__aeabi_dmul>
 8008b7a:	9b08      	ldr	r3, [sp, #32]
 8008b7c:	1b9e      	subs	r6, r3, r6
 8008b7e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008b82:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008b86:	e7e3      	b.n	8008b50 <_strtod_l+0x3f8>
 8008b88:	9b08      	ldr	r3, [sp, #32]
 8008b8a:	3316      	adds	r3, #22
 8008b8c:	db0b      	blt.n	8008ba6 <_strtod_l+0x44e>
 8008b8e:	9b05      	ldr	r3, [sp, #20]
 8008b90:	1bdf      	subs	r7, r3, r7
 8008b92:	4b54      	ldr	r3, [pc, #336]	; (8008ce4 <_strtod_l+0x58c>)
 8008b94:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b9c:	4640      	mov	r0, r8
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	f7f7 fe5c 	bl	800085c <__aeabi_ddiv>
 8008ba4:	e7d6      	b.n	8008b54 <_strtod_l+0x3fc>
 8008ba6:	9b08      	ldr	r3, [sp, #32]
 8008ba8:	1b75      	subs	r5, r6, r5
 8008baa:	441d      	add	r5, r3
 8008bac:	2d00      	cmp	r5, #0
 8008bae:	dd70      	ble.n	8008c92 <_strtod_l+0x53a>
 8008bb0:	f015 030f 	ands.w	r3, r5, #15
 8008bb4:	d00a      	beq.n	8008bcc <_strtod_l+0x474>
 8008bb6:	494b      	ldr	r1, [pc, #300]	; (8008ce4 <_strtod_l+0x58c>)
 8008bb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008bbc:	4642      	mov	r2, r8
 8008bbe:	464b      	mov	r3, r9
 8008bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bc4:	f7f7 fd20 	bl	8000608 <__aeabi_dmul>
 8008bc8:	4680      	mov	r8, r0
 8008bca:	4689      	mov	r9, r1
 8008bcc:	f035 050f 	bics.w	r5, r5, #15
 8008bd0:	d04d      	beq.n	8008c6e <_strtod_l+0x516>
 8008bd2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008bd6:	dd22      	ble.n	8008c1e <_strtod_l+0x4c6>
 8008bd8:	2500      	movs	r5, #0
 8008bda:	46ab      	mov	fp, r5
 8008bdc:	9509      	str	r5, [sp, #36]	; 0x24
 8008bde:	9505      	str	r5, [sp, #20]
 8008be0:	2322      	movs	r3, #34	; 0x22
 8008be2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008cec <_strtod_l+0x594>
 8008be6:	6023      	str	r3, [r4, #0]
 8008be8:	f04f 0800 	mov.w	r8, #0
 8008bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f43f aded 	beq.w	80087ce <_strtod_l+0x76>
 8008bf4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f7ff f924 	bl	8007e44 <_Bfree>
 8008bfc:	9905      	ldr	r1, [sp, #20]
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f7ff f920 	bl	8007e44 <_Bfree>
 8008c04:	4659      	mov	r1, fp
 8008c06:	4620      	mov	r0, r4
 8008c08:	f7ff f91c 	bl	8007e44 <_Bfree>
 8008c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f7ff f918 	bl	8007e44 <_Bfree>
 8008c14:	4629      	mov	r1, r5
 8008c16:	4620      	mov	r0, r4
 8008c18:	f7ff f914 	bl	8007e44 <_Bfree>
 8008c1c:	e5d7      	b.n	80087ce <_strtod_l+0x76>
 8008c1e:	4b32      	ldr	r3, [pc, #200]	; (8008ce8 <_strtod_l+0x590>)
 8008c20:	9304      	str	r3, [sp, #16]
 8008c22:	2300      	movs	r3, #0
 8008c24:	112d      	asrs	r5, r5, #4
 8008c26:	4640      	mov	r0, r8
 8008c28:	4649      	mov	r1, r9
 8008c2a:	469a      	mov	sl, r3
 8008c2c:	2d01      	cmp	r5, #1
 8008c2e:	dc21      	bgt.n	8008c74 <_strtod_l+0x51c>
 8008c30:	b10b      	cbz	r3, 8008c36 <_strtod_l+0x4de>
 8008c32:	4680      	mov	r8, r0
 8008c34:	4689      	mov	r9, r1
 8008c36:	492c      	ldr	r1, [pc, #176]	; (8008ce8 <_strtod_l+0x590>)
 8008c38:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008c3c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008c40:	4642      	mov	r2, r8
 8008c42:	464b      	mov	r3, r9
 8008c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c48:	f7f7 fcde 	bl	8000608 <__aeabi_dmul>
 8008c4c:	4b27      	ldr	r3, [pc, #156]	; (8008cec <_strtod_l+0x594>)
 8008c4e:	460a      	mov	r2, r1
 8008c50:	400b      	ands	r3, r1
 8008c52:	4927      	ldr	r1, [pc, #156]	; (8008cf0 <_strtod_l+0x598>)
 8008c54:	428b      	cmp	r3, r1
 8008c56:	4680      	mov	r8, r0
 8008c58:	d8be      	bhi.n	8008bd8 <_strtod_l+0x480>
 8008c5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008c5e:	428b      	cmp	r3, r1
 8008c60:	bf86      	itte	hi
 8008c62:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008cf4 <_strtod_l+0x59c>
 8008c66:	f04f 38ff 	movhi.w	r8, #4294967295
 8008c6a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008c6e:	2300      	movs	r3, #0
 8008c70:	9304      	str	r3, [sp, #16]
 8008c72:	e07b      	b.n	8008d6c <_strtod_l+0x614>
 8008c74:	07ea      	lsls	r2, r5, #31
 8008c76:	d505      	bpl.n	8008c84 <_strtod_l+0x52c>
 8008c78:	9b04      	ldr	r3, [sp, #16]
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	f7f7 fcc3 	bl	8000608 <__aeabi_dmul>
 8008c82:	2301      	movs	r3, #1
 8008c84:	9a04      	ldr	r2, [sp, #16]
 8008c86:	3208      	adds	r2, #8
 8008c88:	f10a 0a01 	add.w	sl, sl, #1
 8008c8c:	106d      	asrs	r5, r5, #1
 8008c8e:	9204      	str	r2, [sp, #16]
 8008c90:	e7cc      	b.n	8008c2c <_strtod_l+0x4d4>
 8008c92:	d0ec      	beq.n	8008c6e <_strtod_l+0x516>
 8008c94:	426d      	negs	r5, r5
 8008c96:	f015 020f 	ands.w	r2, r5, #15
 8008c9a:	d00a      	beq.n	8008cb2 <_strtod_l+0x55a>
 8008c9c:	4b11      	ldr	r3, [pc, #68]	; (8008ce4 <_strtod_l+0x58c>)
 8008c9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008caa:	f7f7 fdd7 	bl	800085c <__aeabi_ddiv>
 8008cae:	4680      	mov	r8, r0
 8008cb0:	4689      	mov	r9, r1
 8008cb2:	112d      	asrs	r5, r5, #4
 8008cb4:	d0db      	beq.n	8008c6e <_strtod_l+0x516>
 8008cb6:	2d1f      	cmp	r5, #31
 8008cb8:	dd1e      	ble.n	8008cf8 <_strtod_l+0x5a0>
 8008cba:	2500      	movs	r5, #0
 8008cbc:	46ab      	mov	fp, r5
 8008cbe:	9509      	str	r5, [sp, #36]	; 0x24
 8008cc0:	9505      	str	r5, [sp, #20]
 8008cc2:	2322      	movs	r3, #34	; 0x22
 8008cc4:	f04f 0800 	mov.w	r8, #0
 8008cc8:	f04f 0900 	mov.w	r9, #0
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	e78d      	b.n	8008bec <_strtod_l+0x494>
 8008cd0:	0800afb9 	.word	0x0800afb9
 8008cd4:	0800b1e4 	.word	0x0800b1e4
 8008cd8:	0800afb1 	.word	0x0800afb1
 8008cdc:	0800afe6 	.word	0x0800afe6
 8008ce0:	0800b390 	.word	0x0800b390
 8008ce4:	0800b0f8 	.word	0x0800b0f8
 8008ce8:	0800b0d0 	.word	0x0800b0d0
 8008cec:	7ff00000 	.word	0x7ff00000
 8008cf0:	7ca00000 	.word	0x7ca00000
 8008cf4:	7fefffff 	.word	0x7fefffff
 8008cf8:	f015 0310 	ands.w	r3, r5, #16
 8008cfc:	bf18      	it	ne
 8008cfe:	236a      	movne	r3, #106	; 0x6a
 8008d00:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80090a4 <_strtod_l+0x94c>
 8008d04:	9304      	str	r3, [sp, #16]
 8008d06:	4640      	mov	r0, r8
 8008d08:	4649      	mov	r1, r9
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	07ea      	lsls	r2, r5, #31
 8008d0e:	d504      	bpl.n	8008d1a <_strtod_l+0x5c2>
 8008d10:	e9da 2300 	ldrd	r2, r3, [sl]
 8008d14:	f7f7 fc78 	bl	8000608 <__aeabi_dmul>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	106d      	asrs	r5, r5, #1
 8008d1c:	f10a 0a08 	add.w	sl, sl, #8
 8008d20:	d1f4      	bne.n	8008d0c <_strtod_l+0x5b4>
 8008d22:	b10b      	cbz	r3, 8008d28 <_strtod_l+0x5d0>
 8008d24:	4680      	mov	r8, r0
 8008d26:	4689      	mov	r9, r1
 8008d28:	9b04      	ldr	r3, [sp, #16]
 8008d2a:	b1bb      	cbz	r3, 8008d5c <_strtod_l+0x604>
 8008d2c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008d30:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	4649      	mov	r1, r9
 8008d38:	dd10      	ble.n	8008d5c <_strtod_l+0x604>
 8008d3a:	2b1f      	cmp	r3, #31
 8008d3c:	f340 811e 	ble.w	8008f7c <_strtod_l+0x824>
 8008d40:	2b34      	cmp	r3, #52	; 0x34
 8008d42:	bfde      	ittt	le
 8008d44:	f04f 33ff 	movle.w	r3, #4294967295
 8008d48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008d4c:	4093      	lslle	r3, r2
 8008d4e:	f04f 0800 	mov.w	r8, #0
 8008d52:	bfcc      	ite	gt
 8008d54:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008d58:	ea03 0901 	andle.w	r9, r3, r1
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2300      	movs	r3, #0
 8008d60:	4640      	mov	r0, r8
 8008d62:	4649      	mov	r1, r9
 8008d64:	f7f7 feb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d1a6      	bne.n	8008cba <_strtod_l+0x562>
 8008d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d72:	4633      	mov	r3, r6
 8008d74:	465a      	mov	r2, fp
 8008d76:	4620      	mov	r0, r4
 8008d78:	f7ff f8cc 	bl	8007f14 <__s2b>
 8008d7c:	9009      	str	r0, [sp, #36]	; 0x24
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	f43f af2a 	beq.w	8008bd8 <_strtod_l+0x480>
 8008d84:	9a08      	ldr	r2, [sp, #32]
 8008d86:	9b05      	ldr	r3, [sp, #20]
 8008d88:	2a00      	cmp	r2, #0
 8008d8a:	eba3 0307 	sub.w	r3, r3, r7
 8008d8e:	bfa8      	it	ge
 8008d90:	2300      	movge	r3, #0
 8008d92:	930c      	str	r3, [sp, #48]	; 0x30
 8008d94:	2500      	movs	r5, #0
 8008d96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008d9a:	9312      	str	r3, [sp, #72]	; 0x48
 8008d9c:	46ab      	mov	fp, r5
 8008d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da0:	4620      	mov	r0, r4
 8008da2:	6859      	ldr	r1, [r3, #4]
 8008da4:	f7ff f80e 	bl	8007dc4 <_Balloc>
 8008da8:	9005      	str	r0, [sp, #20]
 8008daa:	2800      	cmp	r0, #0
 8008dac:	f43f af18 	beq.w	8008be0 <_strtod_l+0x488>
 8008db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db2:	691a      	ldr	r2, [r3, #16]
 8008db4:	3202      	adds	r2, #2
 8008db6:	f103 010c 	add.w	r1, r3, #12
 8008dba:	0092      	lsls	r2, r2, #2
 8008dbc:	300c      	adds	r0, #12
 8008dbe:	f7fe f870 	bl	8006ea2 <memcpy>
 8008dc2:	ec49 8b10 	vmov	d0, r8, r9
 8008dc6:	aa18      	add	r2, sp, #96	; 0x60
 8008dc8:	a917      	add	r1, sp, #92	; 0x5c
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f7ff fbd6 	bl	800857c <__d2b>
 8008dd0:	ec49 8b18 	vmov	d8, r8, r9
 8008dd4:	9016      	str	r0, [sp, #88]	; 0x58
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f43f af02 	beq.w	8008be0 <_strtod_l+0x488>
 8008ddc:	2101      	movs	r1, #1
 8008dde:	4620      	mov	r0, r4
 8008de0:	f7ff f930 	bl	8008044 <__i2b>
 8008de4:	4683      	mov	fp, r0
 8008de6:	2800      	cmp	r0, #0
 8008de8:	f43f aefa 	beq.w	8008be0 <_strtod_l+0x488>
 8008dec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008dee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008df0:	2e00      	cmp	r6, #0
 8008df2:	bfab      	itete	ge
 8008df4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008df6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008df8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008dfa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008dfe:	bfac      	ite	ge
 8008e00:	eb06 0a03 	addge.w	sl, r6, r3
 8008e04:	1b9f      	sublt	r7, r3, r6
 8008e06:	9b04      	ldr	r3, [sp, #16]
 8008e08:	1af6      	subs	r6, r6, r3
 8008e0a:	4416      	add	r6, r2
 8008e0c:	4ba0      	ldr	r3, [pc, #640]	; (8009090 <_strtod_l+0x938>)
 8008e0e:	3e01      	subs	r6, #1
 8008e10:	429e      	cmp	r6, r3
 8008e12:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008e16:	f280 80c4 	bge.w	8008fa2 <_strtod_l+0x84a>
 8008e1a:	1b9b      	subs	r3, r3, r6
 8008e1c:	2b1f      	cmp	r3, #31
 8008e1e:	eba2 0203 	sub.w	r2, r2, r3
 8008e22:	f04f 0101 	mov.w	r1, #1
 8008e26:	f300 80b0 	bgt.w	8008f8a <_strtod_l+0x832>
 8008e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e2e:	930e      	str	r3, [sp, #56]	; 0x38
 8008e30:	2300      	movs	r3, #0
 8008e32:	930d      	str	r3, [sp, #52]	; 0x34
 8008e34:	eb0a 0602 	add.w	r6, sl, r2
 8008e38:	9b04      	ldr	r3, [sp, #16]
 8008e3a:	45b2      	cmp	sl, r6
 8008e3c:	4417      	add	r7, r2
 8008e3e:	441f      	add	r7, r3
 8008e40:	4653      	mov	r3, sl
 8008e42:	bfa8      	it	ge
 8008e44:	4633      	movge	r3, r6
 8008e46:	42bb      	cmp	r3, r7
 8008e48:	bfa8      	it	ge
 8008e4a:	463b      	movge	r3, r7
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	bfc2      	ittt	gt
 8008e50:	1af6      	subgt	r6, r6, r3
 8008e52:	1aff      	subgt	r7, r7, r3
 8008e54:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	dd17      	ble.n	8008e8e <_strtod_l+0x736>
 8008e5e:	4659      	mov	r1, fp
 8008e60:	461a      	mov	r2, r3
 8008e62:	4620      	mov	r0, r4
 8008e64:	f7ff f9ae 	bl	80081c4 <__pow5mult>
 8008e68:	4683      	mov	fp, r0
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	f43f aeb8 	beq.w	8008be0 <_strtod_l+0x488>
 8008e70:	4601      	mov	r1, r0
 8008e72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008e74:	4620      	mov	r0, r4
 8008e76:	f7ff f8fb 	bl	8008070 <__multiply>
 8008e7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	f43f aeaf 	beq.w	8008be0 <_strtod_l+0x488>
 8008e82:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008e84:	4620      	mov	r0, r4
 8008e86:	f7fe ffdd 	bl	8007e44 <_Bfree>
 8008e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e8c:	9316      	str	r3, [sp, #88]	; 0x58
 8008e8e:	2e00      	cmp	r6, #0
 8008e90:	f300 808c 	bgt.w	8008fac <_strtod_l+0x854>
 8008e94:	9b08      	ldr	r3, [sp, #32]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	dd08      	ble.n	8008eac <_strtod_l+0x754>
 8008e9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e9c:	9905      	ldr	r1, [sp, #20]
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f7ff f990 	bl	80081c4 <__pow5mult>
 8008ea4:	9005      	str	r0, [sp, #20]
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	f43f ae9a 	beq.w	8008be0 <_strtod_l+0x488>
 8008eac:	2f00      	cmp	r7, #0
 8008eae:	dd08      	ble.n	8008ec2 <_strtod_l+0x76a>
 8008eb0:	9905      	ldr	r1, [sp, #20]
 8008eb2:	463a      	mov	r2, r7
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f7ff f9df 	bl	8008278 <__lshift>
 8008eba:	9005      	str	r0, [sp, #20]
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	f43f ae8f 	beq.w	8008be0 <_strtod_l+0x488>
 8008ec2:	f1ba 0f00 	cmp.w	sl, #0
 8008ec6:	dd08      	ble.n	8008eda <_strtod_l+0x782>
 8008ec8:	4659      	mov	r1, fp
 8008eca:	4652      	mov	r2, sl
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f7ff f9d3 	bl	8008278 <__lshift>
 8008ed2:	4683      	mov	fp, r0
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	f43f ae83 	beq.w	8008be0 <_strtod_l+0x488>
 8008eda:	9a05      	ldr	r2, [sp, #20]
 8008edc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f7ff fa52 	bl	8008388 <__mdiff>
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f43f ae7a 	beq.w	8008be0 <_strtod_l+0x488>
 8008eec:	68c3      	ldr	r3, [r0, #12]
 8008eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60c3      	str	r3, [r0, #12]
 8008ef4:	4659      	mov	r1, fp
 8008ef6:	f7ff fa2b 	bl	8008350 <__mcmp>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	da60      	bge.n	8008fc0 <_strtod_l+0x868>
 8008efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f00:	ea53 0308 	orrs.w	r3, r3, r8
 8008f04:	f040 8084 	bne.w	8009010 <_strtod_l+0x8b8>
 8008f08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d17f      	bne.n	8009010 <_strtod_l+0x8b8>
 8008f10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f14:	0d1b      	lsrs	r3, r3, #20
 8008f16:	051b      	lsls	r3, r3, #20
 8008f18:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008f1c:	d978      	bls.n	8009010 <_strtod_l+0x8b8>
 8008f1e:	696b      	ldr	r3, [r5, #20]
 8008f20:	b913      	cbnz	r3, 8008f28 <_strtod_l+0x7d0>
 8008f22:	692b      	ldr	r3, [r5, #16]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	dd73      	ble.n	8009010 <_strtod_l+0x8b8>
 8008f28:	4629      	mov	r1, r5
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f7ff f9a3 	bl	8008278 <__lshift>
 8008f32:	4659      	mov	r1, fp
 8008f34:	4605      	mov	r5, r0
 8008f36:	f7ff fa0b 	bl	8008350 <__mcmp>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	dd68      	ble.n	8009010 <_strtod_l+0x8b8>
 8008f3e:	9904      	ldr	r1, [sp, #16]
 8008f40:	4a54      	ldr	r2, [pc, #336]	; (8009094 <_strtod_l+0x93c>)
 8008f42:	464b      	mov	r3, r9
 8008f44:	2900      	cmp	r1, #0
 8008f46:	f000 8084 	beq.w	8009052 <_strtod_l+0x8fa>
 8008f4a:	ea02 0109 	and.w	r1, r2, r9
 8008f4e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008f52:	dc7e      	bgt.n	8009052 <_strtod_l+0x8fa>
 8008f54:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008f58:	f77f aeb3 	ble.w	8008cc2 <_strtod_l+0x56a>
 8008f5c:	4b4e      	ldr	r3, [pc, #312]	; (8009098 <_strtod_l+0x940>)
 8008f5e:	4640      	mov	r0, r8
 8008f60:	4649      	mov	r1, r9
 8008f62:	2200      	movs	r2, #0
 8008f64:	f7f7 fb50 	bl	8000608 <__aeabi_dmul>
 8008f68:	4b4a      	ldr	r3, [pc, #296]	; (8009094 <_strtod_l+0x93c>)
 8008f6a:	400b      	ands	r3, r1
 8008f6c:	4680      	mov	r8, r0
 8008f6e:	4689      	mov	r9, r1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f47f ae3f 	bne.w	8008bf4 <_strtod_l+0x49c>
 8008f76:	2322      	movs	r3, #34	; 0x22
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	e63b      	b.n	8008bf4 <_strtod_l+0x49c>
 8008f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f80:	fa02 f303 	lsl.w	r3, r2, r3
 8008f84:	ea03 0808 	and.w	r8, r3, r8
 8008f88:	e6e8      	b.n	8008d5c <_strtod_l+0x604>
 8008f8a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008f8e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008f92:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008f96:	36e2      	adds	r6, #226	; 0xe2
 8008f98:	fa01 f306 	lsl.w	r3, r1, r6
 8008f9c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008fa0:	e748      	b.n	8008e34 <_strtod_l+0x6dc>
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008faa:	e743      	b.n	8008e34 <_strtod_l+0x6dc>
 8008fac:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008fae:	4632      	mov	r2, r6
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f7ff f961 	bl	8008278 <__lshift>
 8008fb6:	9016      	str	r0, [sp, #88]	; 0x58
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	f47f af6b 	bne.w	8008e94 <_strtod_l+0x73c>
 8008fbe:	e60f      	b.n	8008be0 <_strtod_l+0x488>
 8008fc0:	46ca      	mov	sl, r9
 8008fc2:	d171      	bne.n	80090a8 <_strtod_l+0x950>
 8008fc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fca:	b352      	cbz	r2, 8009022 <_strtod_l+0x8ca>
 8008fcc:	4a33      	ldr	r2, [pc, #204]	; (800909c <_strtod_l+0x944>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d12a      	bne.n	8009028 <_strtod_l+0x8d0>
 8008fd2:	9b04      	ldr	r3, [sp, #16]
 8008fd4:	4641      	mov	r1, r8
 8008fd6:	b1fb      	cbz	r3, 8009018 <_strtod_l+0x8c0>
 8008fd8:	4b2e      	ldr	r3, [pc, #184]	; (8009094 <_strtod_l+0x93c>)
 8008fda:	ea09 0303 	and.w	r3, r9, r3
 8008fde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe6:	d81a      	bhi.n	800901e <_strtod_l+0x8c6>
 8008fe8:	0d1b      	lsrs	r3, r3, #20
 8008fea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008fee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff2:	4299      	cmp	r1, r3
 8008ff4:	d118      	bne.n	8009028 <_strtod_l+0x8d0>
 8008ff6:	4b2a      	ldr	r3, [pc, #168]	; (80090a0 <_strtod_l+0x948>)
 8008ff8:	459a      	cmp	sl, r3
 8008ffa:	d102      	bne.n	8009002 <_strtod_l+0x8aa>
 8008ffc:	3101      	adds	r1, #1
 8008ffe:	f43f adef 	beq.w	8008be0 <_strtod_l+0x488>
 8009002:	4b24      	ldr	r3, [pc, #144]	; (8009094 <_strtod_l+0x93c>)
 8009004:	ea0a 0303 	and.w	r3, sl, r3
 8009008:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800900c:	f04f 0800 	mov.w	r8, #0
 8009010:	9b04      	ldr	r3, [sp, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1a2      	bne.n	8008f5c <_strtod_l+0x804>
 8009016:	e5ed      	b.n	8008bf4 <_strtod_l+0x49c>
 8009018:	f04f 33ff 	mov.w	r3, #4294967295
 800901c:	e7e9      	b.n	8008ff2 <_strtod_l+0x89a>
 800901e:	4613      	mov	r3, r2
 8009020:	e7e7      	b.n	8008ff2 <_strtod_l+0x89a>
 8009022:	ea53 0308 	orrs.w	r3, r3, r8
 8009026:	d08a      	beq.n	8008f3e <_strtod_l+0x7e6>
 8009028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800902a:	b1e3      	cbz	r3, 8009066 <_strtod_l+0x90e>
 800902c:	ea13 0f0a 	tst.w	r3, sl
 8009030:	d0ee      	beq.n	8009010 <_strtod_l+0x8b8>
 8009032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009034:	9a04      	ldr	r2, [sp, #16]
 8009036:	4640      	mov	r0, r8
 8009038:	4649      	mov	r1, r9
 800903a:	b1c3      	cbz	r3, 800906e <_strtod_l+0x916>
 800903c:	f7ff fb6f 	bl	800871e <sulp>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	ec51 0b18 	vmov	r0, r1, d8
 8009048:	f7f7 f928 	bl	800029c <__adddf3>
 800904c:	4680      	mov	r8, r0
 800904e:	4689      	mov	r9, r1
 8009050:	e7de      	b.n	8009010 <_strtod_l+0x8b8>
 8009052:	4013      	ands	r3, r2
 8009054:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009058:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800905c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009060:	f04f 38ff 	mov.w	r8, #4294967295
 8009064:	e7d4      	b.n	8009010 <_strtod_l+0x8b8>
 8009066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009068:	ea13 0f08 	tst.w	r3, r8
 800906c:	e7e0      	b.n	8009030 <_strtod_l+0x8d8>
 800906e:	f7ff fb56 	bl	800871e <sulp>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	ec51 0b18 	vmov	r0, r1, d8
 800907a:	f7f7 f90d 	bl	8000298 <__aeabi_dsub>
 800907e:	2200      	movs	r2, #0
 8009080:	2300      	movs	r3, #0
 8009082:	4680      	mov	r8, r0
 8009084:	4689      	mov	r9, r1
 8009086:	f7f7 fd27 	bl	8000ad8 <__aeabi_dcmpeq>
 800908a:	2800      	cmp	r0, #0
 800908c:	d0c0      	beq.n	8009010 <_strtod_l+0x8b8>
 800908e:	e618      	b.n	8008cc2 <_strtod_l+0x56a>
 8009090:	fffffc02 	.word	0xfffffc02
 8009094:	7ff00000 	.word	0x7ff00000
 8009098:	39500000 	.word	0x39500000
 800909c:	000fffff 	.word	0x000fffff
 80090a0:	7fefffff 	.word	0x7fefffff
 80090a4:	0800b1f8 	.word	0x0800b1f8
 80090a8:	4659      	mov	r1, fp
 80090aa:	4628      	mov	r0, r5
 80090ac:	f7ff fac0 	bl	8008630 <__ratio>
 80090b0:	ec57 6b10 	vmov	r6, r7, d0
 80090b4:	ee10 0a10 	vmov	r0, s0
 80090b8:	2200      	movs	r2, #0
 80090ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090be:	4639      	mov	r1, r7
 80090c0:	f7f7 fd1e 	bl	8000b00 <__aeabi_dcmple>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d071      	beq.n	80091ac <_strtod_l+0xa54>
 80090c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d17c      	bne.n	80091c8 <_strtod_l+0xa70>
 80090ce:	f1b8 0f00 	cmp.w	r8, #0
 80090d2:	d15a      	bne.n	800918a <_strtod_l+0xa32>
 80090d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d15d      	bne.n	8009198 <_strtod_l+0xa40>
 80090dc:	4b90      	ldr	r3, [pc, #576]	; (8009320 <_strtod_l+0xbc8>)
 80090de:	2200      	movs	r2, #0
 80090e0:	4630      	mov	r0, r6
 80090e2:	4639      	mov	r1, r7
 80090e4:	f7f7 fd02 	bl	8000aec <__aeabi_dcmplt>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	d15c      	bne.n	80091a6 <_strtod_l+0xa4e>
 80090ec:	4630      	mov	r0, r6
 80090ee:	4639      	mov	r1, r7
 80090f0:	4b8c      	ldr	r3, [pc, #560]	; (8009324 <_strtod_l+0xbcc>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	f7f7 fa88 	bl	8000608 <__aeabi_dmul>
 80090f8:	4606      	mov	r6, r0
 80090fa:	460f      	mov	r7, r1
 80090fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009100:	9606      	str	r6, [sp, #24]
 8009102:	9307      	str	r3, [sp, #28]
 8009104:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009108:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800910c:	4b86      	ldr	r3, [pc, #536]	; (8009328 <_strtod_l+0xbd0>)
 800910e:	ea0a 0303 	and.w	r3, sl, r3
 8009112:	930d      	str	r3, [sp, #52]	; 0x34
 8009114:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009116:	4b85      	ldr	r3, [pc, #532]	; (800932c <_strtod_l+0xbd4>)
 8009118:	429a      	cmp	r2, r3
 800911a:	f040 8090 	bne.w	800923e <_strtod_l+0xae6>
 800911e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009122:	ec49 8b10 	vmov	d0, r8, r9
 8009126:	f7ff f9b9 	bl	800849c <__ulp>
 800912a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800912e:	ec51 0b10 	vmov	r0, r1, d0
 8009132:	f7f7 fa69 	bl	8000608 <__aeabi_dmul>
 8009136:	4642      	mov	r2, r8
 8009138:	464b      	mov	r3, r9
 800913a:	f7f7 f8af 	bl	800029c <__adddf3>
 800913e:	460b      	mov	r3, r1
 8009140:	4979      	ldr	r1, [pc, #484]	; (8009328 <_strtod_l+0xbd0>)
 8009142:	4a7b      	ldr	r2, [pc, #492]	; (8009330 <_strtod_l+0xbd8>)
 8009144:	4019      	ands	r1, r3
 8009146:	4291      	cmp	r1, r2
 8009148:	4680      	mov	r8, r0
 800914a:	d944      	bls.n	80091d6 <_strtod_l+0xa7e>
 800914c:	ee18 2a90 	vmov	r2, s17
 8009150:	4b78      	ldr	r3, [pc, #480]	; (8009334 <_strtod_l+0xbdc>)
 8009152:	429a      	cmp	r2, r3
 8009154:	d104      	bne.n	8009160 <_strtod_l+0xa08>
 8009156:	ee18 3a10 	vmov	r3, s16
 800915a:	3301      	adds	r3, #1
 800915c:	f43f ad40 	beq.w	8008be0 <_strtod_l+0x488>
 8009160:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009334 <_strtod_l+0xbdc>
 8009164:	f04f 38ff 	mov.w	r8, #4294967295
 8009168:	9916      	ldr	r1, [sp, #88]	; 0x58
 800916a:	4620      	mov	r0, r4
 800916c:	f7fe fe6a 	bl	8007e44 <_Bfree>
 8009170:	9905      	ldr	r1, [sp, #20]
 8009172:	4620      	mov	r0, r4
 8009174:	f7fe fe66 	bl	8007e44 <_Bfree>
 8009178:	4659      	mov	r1, fp
 800917a:	4620      	mov	r0, r4
 800917c:	f7fe fe62 	bl	8007e44 <_Bfree>
 8009180:	4629      	mov	r1, r5
 8009182:	4620      	mov	r0, r4
 8009184:	f7fe fe5e 	bl	8007e44 <_Bfree>
 8009188:	e609      	b.n	8008d9e <_strtod_l+0x646>
 800918a:	f1b8 0f01 	cmp.w	r8, #1
 800918e:	d103      	bne.n	8009198 <_strtod_l+0xa40>
 8009190:	f1b9 0f00 	cmp.w	r9, #0
 8009194:	f43f ad95 	beq.w	8008cc2 <_strtod_l+0x56a>
 8009198:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80092f0 <_strtod_l+0xb98>
 800919c:	4f60      	ldr	r7, [pc, #384]	; (8009320 <_strtod_l+0xbc8>)
 800919e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80091a2:	2600      	movs	r6, #0
 80091a4:	e7ae      	b.n	8009104 <_strtod_l+0x9ac>
 80091a6:	4f5f      	ldr	r7, [pc, #380]	; (8009324 <_strtod_l+0xbcc>)
 80091a8:	2600      	movs	r6, #0
 80091aa:	e7a7      	b.n	80090fc <_strtod_l+0x9a4>
 80091ac:	4b5d      	ldr	r3, [pc, #372]	; (8009324 <_strtod_l+0xbcc>)
 80091ae:	4630      	mov	r0, r6
 80091b0:	4639      	mov	r1, r7
 80091b2:	2200      	movs	r2, #0
 80091b4:	f7f7 fa28 	bl	8000608 <__aeabi_dmul>
 80091b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ba:	4606      	mov	r6, r0
 80091bc:	460f      	mov	r7, r1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d09c      	beq.n	80090fc <_strtod_l+0x9a4>
 80091c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80091c6:	e79d      	b.n	8009104 <_strtod_l+0x9ac>
 80091c8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80092f8 <_strtod_l+0xba0>
 80091cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80091d0:	ec57 6b17 	vmov	r6, r7, d7
 80091d4:	e796      	b.n	8009104 <_strtod_l+0x9ac>
 80091d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80091da:	9b04      	ldr	r3, [sp, #16]
 80091dc:	46ca      	mov	sl, r9
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1c2      	bne.n	8009168 <_strtod_l+0xa10>
 80091e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091e8:	0d1b      	lsrs	r3, r3, #20
 80091ea:	051b      	lsls	r3, r3, #20
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d1bb      	bne.n	8009168 <_strtod_l+0xa10>
 80091f0:	4630      	mov	r0, r6
 80091f2:	4639      	mov	r1, r7
 80091f4:	f7f7 fd68 	bl	8000cc8 <__aeabi_d2lz>
 80091f8:	f7f7 f9d8 	bl	80005ac <__aeabi_l2d>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	4630      	mov	r0, r6
 8009202:	4639      	mov	r1, r7
 8009204:	f7f7 f848 	bl	8000298 <__aeabi_dsub>
 8009208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800920a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800920e:	ea43 0308 	orr.w	r3, r3, r8
 8009212:	4313      	orrs	r3, r2
 8009214:	4606      	mov	r6, r0
 8009216:	460f      	mov	r7, r1
 8009218:	d054      	beq.n	80092c4 <_strtod_l+0xb6c>
 800921a:	a339      	add	r3, pc, #228	; (adr r3, 8009300 <_strtod_l+0xba8>)
 800921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009220:	f7f7 fc64 	bl	8000aec <__aeabi_dcmplt>
 8009224:	2800      	cmp	r0, #0
 8009226:	f47f ace5 	bne.w	8008bf4 <_strtod_l+0x49c>
 800922a:	a337      	add	r3, pc, #220	; (adr r3, 8009308 <_strtod_l+0xbb0>)
 800922c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009230:	4630      	mov	r0, r6
 8009232:	4639      	mov	r1, r7
 8009234:	f7f7 fc78 	bl	8000b28 <__aeabi_dcmpgt>
 8009238:	2800      	cmp	r0, #0
 800923a:	d095      	beq.n	8009168 <_strtod_l+0xa10>
 800923c:	e4da      	b.n	8008bf4 <_strtod_l+0x49c>
 800923e:	9b04      	ldr	r3, [sp, #16]
 8009240:	b333      	cbz	r3, 8009290 <_strtod_l+0xb38>
 8009242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009244:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009248:	d822      	bhi.n	8009290 <_strtod_l+0xb38>
 800924a:	a331      	add	r3, pc, #196	; (adr r3, 8009310 <_strtod_l+0xbb8>)
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f7 fc54 	bl	8000b00 <__aeabi_dcmple>
 8009258:	b1a0      	cbz	r0, 8009284 <_strtod_l+0xb2c>
 800925a:	4639      	mov	r1, r7
 800925c:	4630      	mov	r0, r6
 800925e:	f7f7 fcab 	bl	8000bb8 <__aeabi_d2uiz>
 8009262:	2801      	cmp	r0, #1
 8009264:	bf38      	it	cc
 8009266:	2001      	movcc	r0, #1
 8009268:	f7f7 f954 	bl	8000514 <__aeabi_ui2d>
 800926c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800926e:	4606      	mov	r6, r0
 8009270:	460f      	mov	r7, r1
 8009272:	bb23      	cbnz	r3, 80092be <_strtod_l+0xb66>
 8009274:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009278:	9010      	str	r0, [sp, #64]	; 0x40
 800927a:	9311      	str	r3, [sp, #68]	; 0x44
 800927c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009280:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009288:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800928c:	1a9b      	subs	r3, r3, r2
 800928e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009290:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009294:	eeb0 0a48 	vmov.f32	s0, s16
 8009298:	eef0 0a68 	vmov.f32	s1, s17
 800929c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80092a0:	f7ff f8fc 	bl	800849c <__ulp>
 80092a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80092a8:	ec53 2b10 	vmov	r2, r3, d0
 80092ac:	f7f7 f9ac 	bl	8000608 <__aeabi_dmul>
 80092b0:	ec53 2b18 	vmov	r2, r3, d8
 80092b4:	f7f6 fff2 	bl	800029c <__adddf3>
 80092b8:	4680      	mov	r8, r0
 80092ba:	4689      	mov	r9, r1
 80092bc:	e78d      	b.n	80091da <_strtod_l+0xa82>
 80092be:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80092c2:	e7db      	b.n	800927c <_strtod_l+0xb24>
 80092c4:	a314      	add	r3, pc, #80	; (adr r3, 8009318 <_strtod_l+0xbc0>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	f7f7 fc0f 	bl	8000aec <__aeabi_dcmplt>
 80092ce:	e7b3      	b.n	8009238 <_strtod_l+0xae0>
 80092d0:	2300      	movs	r3, #0
 80092d2:	930a      	str	r3, [sp, #40]	; 0x28
 80092d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80092d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	f7ff ba7c 	b.w	80087d6 <_strtod_l+0x7e>
 80092de:	2a65      	cmp	r2, #101	; 0x65
 80092e0:	f43f ab75 	beq.w	80089ce <_strtod_l+0x276>
 80092e4:	2a45      	cmp	r2, #69	; 0x45
 80092e6:	f43f ab72 	beq.w	80089ce <_strtod_l+0x276>
 80092ea:	2301      	movs	r3, #1
 80092ec:	f7ff bbaa 	b.w	8008a44 <_strtod_l+0x2ec>
 80092f0:	00000000 	.word	0x00000000
 80092f4:	bff00000 	.word	0xbff00000
 80092f8:	00000000 	.word	0x00000000
 80092fc:	3ff00000 	.word	0x3ff00000
 8009300:	94a03595 	.word	0x94a03595
 8009304:	3fdfffff 	.word	0x3fdfffff
 8009308:	35afe535 	.word	0x35afe535
 800930c:	3fe00000 	.word	0x3fe00000
 8009310:	ffc00000 	.word	0xffc00000
 8009314:	41dfffff 	.word	0x41dfffff
 8009318:	94a03595 	.word	0x94a03595
 800931c:	3fcfffff 	.word	0x3fcfffff
 8009320:	3ff00000 	.word	0x3ff00000
 8009324:	3fe00000 	.word	0x3fe00000
 8009328:	7ff00000 	.word	0x7ff00000
 800932c:	7fe00000 	.word	0x7fe00000
 8009330:	7c9fffff 	.word	0x7c9fffff
 8009334:	7fefffff 	.word	0x7fefffff

08009338 <_strtod_r>:
 8009338:	4b01      	ldr	r3, [pc, #4]	; (8009340 <_strtod_r+0x8>)
 800933a:	f7ff ba0d 	b.w	8008758 <_strtod_l>
 800933e:	bf00      	nop
 8009340:	20000070 	.word	0x20000070

08009344 <_strtol_l.constprop.0>:
 8009344:	2b01      	cmp	r3, #1
 8009346:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800934a:	d001      	beq.n	8009350 <_strtol_l.constprop.0+0xc>
 800934c:	2b24      	cmp	r3, #36	; 0x24
 800934e:	d906      	bls.n	800935e <_strtol_l.constprop.0+0x1a>
 8009350:	f7fd fd7a 	bl	8006e48 <__errno>
 8009354:	2316      	movs	r3, #22
 8009356:	6003      	str	r3, [r0, #0]
 8009358:	2000      	movs	r0, #0
 800935a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009444 <_strtol_l.constprop.0+0x100>
 8009362:	460d      	mov	r5, r1
 8009364:	462e      	mov	r6, r5
 8009366:	f815 4b01 	ldrb.w	r4, [r5], #1
 800936a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800936e:	f017 0708 	ands.w	r7, r7, #8
 8009372:	d1f7      	bne.n	8009364 <_strtol_l.constprop.0+0x20>
 8009374:	2c2d      	cmp	r4, #45	; 0x2d
 8009376:	d132      	bne.n	80093de <_strtol_l.constprop.0+0x9a>
 8009378:	782c      	ldrb	r4, [r5, #0]
 800937a:	2701      	movs	r7, #1
 800937c:	1cb5      	adds	r5, r6, #2
 800937e:	2b00      	cmp	r3, #0
 8009380:	d05b      	beq.n	800943a <_strtol_l.constprop.0+0xf6>
 8009382:	2b10      	cmp	r3, #16
 8009384:	d109      	bne.n	800939a <_strtol_l.constprop.0+0x56>
 8009386:	2c30      	cmp	r4, #48	; 0x30
 8009388:	d107      	bne.n	800939a <_strtol_l.constprop.0+0x56>
 800938a:	782c      	ldrb	r4, [r5, #0]
 800938c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009390:	2c58      	cmp	r4, #88	; 0x58
 8009392:	d14d      	bne.n	8009430 <_strtol_l.constprop.0+0xec>
 8009394:	786c      	ldrb	r4, [r5, #1]
 8009396:	2310      	movs	r3, #16
 8009398:	3502      	adds	r5, #2
 800939a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800939e:	f108 38ff 	add.w	r8, r8, #4294967295
 80093a2:	f04f 0e00 	mov.w	lr, #0
 80093a6:	fbb8 f9f3 	udiv	r9, r8, r3
 80093aa:	4676      	mov	r6, lr
 80093ac:	fb03 8a19 	mls	sl, r3, r9, r8
 80093b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80093b4:	f1bc 0f09 	cmp.w	ip, #9
 80093b8:	d816      	bhi.n	80093e8 <_strtol_l.constprop.0+0xa4>
 80093ba:	4664      	mov	r4, ip
 80093bc:	42a3      	cmp	r3, r4
 80093be:	dd24      	ble.n	800940a <_strtol_l.constprop.0+0xc6>
 80093c0:	f1be 3fff 	cmp.w	lr, #4294967295
 80093c4:	d008      	beq.n	80093d8 <_strtol_l.constprop.0+0x94>
 80093c6:	45b1      	cmp	r9, r6
 80093c8:	d31c      	bcc.n	8009404 <_strtol_l.constprop.0+0xc0>
 80093ca:	d101      	bne.n	80093d0 <_strtol_l.constprop.0+0x8c>
 80093cc:	45a2      	cmp	sl, r4
 80093ce:	db19      	blt.n	8009404 <_strtol_l.constprop.0+0xc0>
 80093d0:	fb06 4603 	mla	r6, r6, r3, r4
 80093d4:	f04f 0e01 	mov.w	lr, #1
 80093d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093dc:	e7e8      	b.n	80093b0 <_strtol_l.constprop.0+0x6c>
 80093de:	2c2b      	cmp	r4, #43	; 0x2b
 80093e0:	bf04      	itt	eq
 80093e2:	782c      	ldrbeq	r4, [r5, #0]
 80093e4:	1cb5      	addeq	r5, r6, #2
 80093e6:	e7ca      	b.n	800937e <_strtol_l.constprop.0+0x3a>
 80093e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80093ec:	f1bc 0f19 	cmp.w	ip, #25
 80093f0:	d801      	bhi.n	80093f6 <_strtol_l.constprop.0+0xb2>
 80093f2:	3c37      	subs	r4, #55	; 0x37
 80093f4:	e7e2      	b.n	80093bc <_strtol_l.constprop.0+0x78>
 80093f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80093fa:	f1bc 0f19 	cmp.w	ip, #25
 80093fe:	d804      	bhi.n	800940a <_strtol_l.constprop.0+0xc6>
 8009400:	3c57      	subs	r4, #87	; 0x57
 8009402:	e7db      	b.n	80093bc <_strtol_l.constprop.0+0x78>
 8009404:	f04f 3eff 	mov.w	lr, #4294967295
 8009408:	e7e6      	b.n	80093d8 <_strtol_l.constprop.0+0x94>
 800940a:	f1be 3fff 	cmp.w	lr, #4294967295
 800940e:	d105      	bne.n	800941c <_strtol_l.constprop.0+0xd8>
 8009410:	2322      	movs	r3, #34	; 0x22
 8009412:	6003      	str	r3, [r0, #0]
 8009414:	4646      	mov	r6, r8
 8009416:	b942      	cbnz	r2, 800942a <_strtol_l.constprop.0+0xe6>
 8009418:	4630      	mov	r0, r6
 800941a:	e79e      	b.n	800935a <_strtol_l.constprop.0+0x16>
 800941c:	b107      	cbz	r7, 8009420 <_strtol_l.constprop.0+0xdc>
 800941e:	4276      	negs	r6, r6
 8009420:	2a00      	cmp	r2, #0
 8009422:	d0f9      	beq.n	8009418 <_strtol_l.constprop.0+0xd4>
 8009424:	f1be 0f00 	cmp.w	lr, #0
 8009428:	d000      	beq.n	800942c <_strtol_l.constprop.0+0xe8>
 800942a:	1e69      	subs	r1, r5, #1
 800942c:	6011      	str	r1, [r2, #0]
 800942e:	e7f3      	b.n	8009418 <_strtol_l.constprop.0+0xd4>
 8009430:	2430      	movs	r4, #48	; 0x30
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1b1      	bne.n	800939a <_strtol_l.constprop.0+0x56>
 8009436:	2308      	movs	r3, #8
 8009438:	e7af      	b.n	800939a <_strtol_l.constprop.0+0x56>
 800943a:	2c30      	cmp	r4, #48	; 0x30
 800943c:	d0a5      	beq.n	800938a <_strtol_l.constprop.0+0x46>
 800943e:	230a      	movs	r3, #10
 8009440:	e7ab      	b.n	800939a <_strtol_l.constprop.0+0x56>
 8009442:	bf00      	nop
 8009444:	0800b221 	.word	0x0800b221

08009448 <_strtol_r>:
 8009448:	f7ff bf7c 	b.w	8009344 <_strtol_l.constprop.0>

0800944c <__ssputs_r>:
 800944c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009450:	688e      	ldr	r6, [r1, #8]
 8009452:	461f      	mov	r7, r3
 8009454:	42be      	cmp	r6, r7
 8009456:	680b      	ldr	r3, [r1, #0]
 8009458:	4682      	mov	sl, r0
 800945a:	460c      	mov	r4, r1
 800945c:	4690      	mov	r8, r2
 800945e:	d82c      	bhi.n	80094ba <__ssputs_r+0x6e>
 8009460:	898a      	ldrh	r2, [r1, #12]
 8009462:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009466:	d026      	beq.n	80094b6 <__ssputs_r+0x6a>
 8009468:	6965      	ldr	r5, [r4, #20]
 800946a:	6909      	ldr	r1, [r1, #16]
 800946c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009470:	eba3 0901 	sub.w	r9, r3, r1
 8009474:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009478:	1c7b      	adds	r3, r7, #1
 800947a:	444b      	add	r3, r9
 800947c:	106d      	asrs	r5, r5, #1
 800947e:	429d      	cmp	r5, r3
 8009480:	bf38      	it	cc
 8009482:	461d      	movcc	r5, r3
 8009484:	0553      	lsls	r3, r2, #21
 8009486:	d527      	bpl.n	80094d8 <__ssputs_r+0x8c>
 8009488:	4629      	mov	r1, r5
 800948a:	f7fe fc0f 	bl	8007cac <_malloc_r>
 800948e:	4606      	mov	r6, r0
 8009490:	b360      	cbz	r0, 80094ec <__ssputs_r+0xa0>
 8009492:	6921      	ldr	r1, [r4, #16]
 8009494:	464a      	mov	r2, r9
 8009496:	f7fd fd04 	bl	8006ea2 <memcpy>
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094a4:	81a3      	strh	r3, [r4, #12]
 80094a6:	6126      	str	r6, [r4, #16]
 80094a8:	6165      	str	r5, [r4, #20]
 80094aa:	444e      	add	r6, r9
 80094ac:	eba5 0509 	sub.w	r5, r5, r9
 80094b0:	6026      	str	r6, [r4, #0]
 80094b2:	60a5      	str	r5, [r4, #8]
 80094b4:	463e      	mov	r6, r7
 80094b6:	42be      	cmp	r6, r7
 80094b8:	d900      	bls.n	80094bc <__ssputs_r+0x70>
 80094ba:	463e      	mov	r6, r7
 80094bc:	6820      	ldr	r0, [r4, #0]
 80094be:	4632      	mov	r2, r6
 80094c0:	4641      	mov	r1, r8
 80094c2:	f000 fd5c 	bl	8009f7e <memmove>
 80094c6:	68a3      	ldr	r3, [r4, #8]
 80094c8:	1b9b      	subs	r3, r3, r6
 80094ca:	60a3      	str	r3, [r4, #8]
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	4433      	add	r3, r6
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	2000      	movs	r0, #0
 80094d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d8:	462a      	mov	r2, r5
 80094da:	f001 f922 	bl	800a722 <_realloc_r>
 80094de:	4606      	mov	r6, r0
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d1e0      	bne.n	80094a6 <__ssputs_r+0x5a>
 80094e4:	6921      	ldr	r1, [r4, #16]
 80094e6:	4650      	mov	r0, sl
 80094e8:	f7fe fb6c 	bl	8007bc4 <_free_r>
 80094ec:	230c      	movs	r3, #12
 80094ee:	f8ca 3000 	str.w	r3, [sl]
 80094f2:	89a3      	ldrh	r3, [r4, #12]
 80094f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f8:	81a3      	strh	r3, [r4, #12]
 80094fa:	f04f 30ff 	mov.w	r0, #4294967295
 80094fe:	e7e9      	b.n	80094d4 <__ssputs_r+0x88>

08009500 <_svfiprintf_r>:
 8009500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009504:	4698      	mov	r8, r3
 8009506:	898b      	ldrh	r3, [r1, #12]
 8009508:	061b      	lsls	r3, r3, #24
 800950a:	b09d      	sub	sp, #116	; 0x74
 800950c:	4607      	mov	r7, r0
 800950e:	460d      	mov	r5, r1
 8009510:	4614      	mov	r4, r2
 8009512:	d50e      	bpl.n	8009532 <_svfiprintf_r+0x32>
 8009514:	690b      	ldr	r3, [r1, #16]
 8009516:	b963      	cbnz	r3, 8009532 <_svfiprintf_r+0x32>
 8009518:	2140      	movs	r1, #64	; 0x40
 800951a:	f7fe fbc7 	bl	8007cac <_malloc_r>
 800951e:	6028      	str	r0, [r5, #0]
 8009520:	6128      	str	r0, [r5, #16]
 8009522:	b920      	cbnz	r0, 800952e <_svfiprintf_r+0x2e>
 8009524:	230c      	movs	r3, #12
 8009526:	603b      	str	r3, [r7, #0]
 8009528:	f04f 30ff 	mov.w	r0, #4294967295
 800952c:	e0d0      	b.n	80096d0 <_svfiprintf_r+0x1d0>
 800952e:	2340      	movs	r3, #64	; 0x40
 8009530:	616b      	str	r3, [r5, #20]
 8009532:	2300      	movs	r3, #0
 8009534:	9309      	str	r3, [sp, #36]	; 0x24
 8009536:	2320      	movs	r3, #32
 8009538:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800953c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009540:	2330      	movs	r3, #48	; 0x30
 8009542:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80096e8 <_svfiprintf_r+0x1e8>
 8009546:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800954a:	f04f 0901 	mov.w	r9, #1
 800954e:	4623      	mov	r3, r4
 8009550:	469a      	mov	sl, r3
 8009552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009556:	b10a      	cbz	r2, 800955c <_svfiprintf_r+0x5c>
 8009558:	2a25      	cmp	r2, #37	; 0x25
 800955a:	d1f9      	bne.n	8009550 <_svfiprintf_r+0x50>
 800955c:	ebba 0b04 	subs.w	fp, sl, r4
 8009560:	d00b      	beq.n	800957a <_svfiprintf_r+0x7a>
 8009562:	465b      	mov	r3, fp
 8009564:	4622      	mov	r2, r4
 8009566:	4629      	mov	r1, r5
 8009568:	4638      	mov	r0, r7
 800956a:	f7ff ff6f 	bl	800944c <__ssputs_r>
 800956e:	3001      	adds	r0, #1
 8009570:	f000 80a9 	beq.w	80096c6 <_svfiprintf_r+0x1c6>
 8009574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009576:	445a      	add	r2, fp
 8009578:	9209      	str	r2, [sp, #36]	; 0x24
 800957a:	f89a 3000 	ldrb.w	r3, [sl]
 800957e:	2b00      	cmp	r3, #0
 8009580:	f000 80a1 	beq.w	80096c6 <_svfiprintf_r+0x1c6>
 8009584:	2300      	movs	r3, #0
 8009586:	f04f 32ff 	mov.w	r2, #4294967295
 800958a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800958e:	f10a 0a01 	add.w	sl, sl, #1
 8009592:	9304      	str	r3, [sp, #16]
 8009594:	9307      	str	r3, [sp, #28]
 8009596:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800959a:	931a      	str	r3, [sp, #104]	; 0x68
 800959c:	4654      	mov	r4, sl
 800959e:	2205      	movs	r2, #5
 80095a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a4:	4850      	ldr	r0, [pc, #320]	; (80096e8 <_svfiprintf_r+0x1e8>)
 80095a6:	f7f6 fe1b 	bl	80001e0 <memchr>
 80095aa:	9a04      	ldr	r2, [sp, #16]
 80095ac:	b9d8      	cbnz	r0, 80095e6 <_svfiprintf_r+0xe6>
 80095ae:	06d0      	lsls	r0, r2, #27
 80095b0:	bf44      	itt	mi
 80095b2:	2320      	movmi	r3, #32
 80095b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095b8:	0711      	lsls	r1, r2, #28
 80095ba:	bf44      	itt	mi
 80095bc:	232b      	movmi	r3, #43	; 0x2b
 80095be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095c2:	f89a 3000 	ldrb.w	r3, [sl]
 80095c6:	2b2a      	cmp	r3, #42	; 0x2a
 80095c8:	d015      	beq.n	80095f6 <_svfiprintf_r+0xf6>
 80095ca:	9a07      	ldr	r2, [sp, #28]
 80095cc:	4654      	mov	r4, sl
 80095ce:	2000      	movs	r0, #0
 80095d0:	f04f 0c0a 	mov.w	ip, #10
 80095d4:	4621      	mov	r1, r4
 80095d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095da:	3b30      	subs	r3, #48	; 0x30
 80095dc:	2b09      	cmp	r3, #9
 80095de:	d94d      	bls.n	800967c <_svfiprintf_r+0x17c>
 80095e0:	b1b0      	cbz	r0, 8009610 <_svfiprintf_r+0x110>
 80095e2:	9207      	str	r2, [sp, #28]
 80095e4:	e014      	b.n	8009610 <_svfiprintf_r+0x110>
 80095e6:	eba0 0308 	sub.w	r3, r0, r8
 80095ea:	fa09 f303 	lsl.w	r3, r9, r3
 80095ee:	4313      	orrs	r3, r2
 80095f0:	9304      	str	r3, [sp, #16]
 80095f2:	46a2      	mov	sl, r4
 80095f4:	e7d2      	b.n	800959c <_svfiprintf_r+0x9c>
 80095f6:	9b03      	ldr	r3, [sp, #12]
 80095f8:	1d19      	adds	r1, r3, #4
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	9103      	str	r1, [sp, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	bfbb      	ittet	lt
 8009602:	425b      	neglt	r3, r3
 8009604:	f042 0202 	orrlt.w	r2, r2, #2
 8009608:	9307      	strge	r3, [sp, #28]
 800960a:	9307      	strlt	r3, [sp, #28]
 800960c:	bfb8      	it	lt
 800960e:	9204      	strlt	r2, [sp, #16]
 8009610:	7823      	ldrb	r3, [r4, #0]
 8009612:	2b2e      	cmp	r3, #46	; 0x2e
 8009614:	d10c      	bne.n	8009630 <_svfiprintf_r+0x130>
 8009616:	7863      	ldrb	r3, [r4, #1]
 8009618:	2b2a      	cmp	r3, #42	; 0x2a
 800961a:	d134      	bne.n	8009686 <_svfiprintf_r+0x186>
 800961c:	9b03      	ldr	r3, [sp, #12]
 800961e:	1d1a      	adds	r2, r3, #4
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	9203      	str	r2, [sp, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	bfb8      	it	lt
 8009628:	f04f 33ff 	movlt.w	r3, #4294967295
 800962c:	3402      	adds	r4, #2
 800962e:	9305      	str	r3, [sp, #20]
 8009630:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80096f8 <_svfiprintf_r+0x1f8>
 8009634:	7821      	ldrb	r1, [r4, #0]
 8009636:	2203      	movs	r2, #3
 8009638:	4650      	mov	r0, sl
 800963a:	f7f6 fdd1 	bl	80001e0 <memchr>
 800963e:	b138      	cbz	r0, 8009650 <_svfiprintf_r+0x150>
 8009640:	9b04      	ldr	r3, [sp, #16]
 8009642:	eba0 000a 	sub.w	r0, r0, sl
 8009646:	2240      	movs	r2, #64	; 0x40
 8009648:	4082      	lsls	r2, r0
 800964a:	4313      	orrs	r3, r2
 800964c:	3401      	adds	r4, #1
 800964e:	9304      	str	r3, [sp, #16]
 8009650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009654:	4825      	ldr	r0, [pc, #148]	; (80096ec <_svfiprintf_r+0x1ec>)
 8009656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800965a:	2206      	movs	r2, #6
 800965c:	f7f6 fdc0 	bl	80001e0 <memchr>
 8009660:	2800      	cmp	r0, #0
 8009662:	d038      	beq.n	80096d6 <_svfiprintf_r+0x1d6>
 8009664:	4b22      	ldr	r3, [pc, #136]	; (80096f0 <_svfiprintf_r+0x1f0>)
 8009666:	bb1b      	cbnz	r3, 80096b0 <_svfiprintf_r+0x1b0>
 8009668:	9b03      	ldr	r3, [sp, #12]
 800966a:	3307      	adds	r3, #7
 800966c:	f023 0307 	bic.w	r3, r3, #7
 8009670:	3308      	adds	r3, #8
 8009672:	9303      	str	r3, [sp, #12]
 8009674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009676:	4433      	add	r3, r6
 8009678:	9309      	str	r3, [sp, #36]	; 0x24
 800967a:	e768      	b.n	800954e <_svfiprintf_r+0x4e>
 800967c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009680:	460c      	mov	r4, r1
 8009682:	2001      	movs	r0, #1
 8009684:	e7a6      	b.n	80095d4 <_svfiprintf_r+0xd4>
 8009686:	2300      	movs	r3, #0
 8009688:	3401      	adds	r4, #1
 800968a:	9305      	str	r3, [sp, #20]
 800968c:	4619      	mov	r1, r3
 800968e:	f04f 0c0a 	mov.w	ip, #10
 8009692:	4620      	mov	r0, r4
 8009694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009698:	3a30      	subs	r2, #48	; 0x30
 800969a:	2a09      	cmp	r2, #9
 800969c:	d903      	bls.n	80096a6 <_svfiprintf_r+0x1a6>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d0c6      	beq.n	8009630 <_svfiprintf_r+0x130>
 80096a2:	9105      	str	r1, [sp, #20]
 80096a4:	e7c4      	b.n	8009630 <_svfiprintf_r+0x130>
 80096a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80096aa:	4604      	mov	r4, r0
 80096ac:	2301      	movs	r3, #1
 80096ae:	e7f0      	b.n	8009692 <_svfiprintf_r+0x192>
 80096b0:	ab03      	add	r3, sp, #12
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	462a      	mov	r2, r5
 80096b6:	4b0f      	ldr	r3, [pc, #60]	; (80096f4 <_svfiprintf_r+0x1f4>)
 80096b8:	a904      	add	r1, sp, #16
 80096ba:	4638      	mov	r0, r7
 80096bc:	f7fc fc36 	bl	8005f2c <_printf_float>
 80096c0:	1c42      	adds	r2, r0, #1
 80096c2:	4606      	mov	r6, r0
 80096c4:	d1d6      	bne.n	8009674 <_svfiprintf_r+0x174>
 80096c6:	89ab      	ldrh	r3, [r5, #12]
 80096c8:	065b      	lsls	r3, r3, #25
 80096ca:	f53f af2d 	bmi.w	8009528 <_svfiprintf_r+0x28>
 80096ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096d0:	b01d      	add	sp, #116	; 0x74
 80096d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d6:	ab03      	add	r3, sp, #12
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	462a      	mov	r2, r5
 80096dc:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <_svfiprintf_r+0x1f4>)
 80096de:	a904      	add	r1, sp, #16
 80096e0:	4638      	mov	r0, r7
 80096e2:	f7fc fec7 	bl	8006474 <_printf_i>
 80096e6:	e7eb      	b.n	80096c0 <_svfiprintf_r+0x1c0>
 80096e8:	0800b321 	.word	0x0800b321
 80096ec:	0800b32b 	.word	0x0800b32b
 80096f0:	08005f2d 	.word	0x08005f2d
 80096f4:	0800944d 	.word	0x0800944d
 80096f8:	0800b327 	.word	0x0800b327

080096fc <_sungetc_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	1c4b      	adds	r3, r1, #1
 8009700:	4614      	mov	r4, r2
 8009702:	d103      	bne.n	800970c <_sungetc_r+0x10>
 8009704:	f04f 35ff 	mov.w	r5, #4294967295
 8009708:	4628      	mov	r0, r5
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	8993      	ldrh	r3, [r2, #12]
 800970e:	f023 0320 	bic.w	r3, r3, #32
 8009712:	8193      	strh	r3, [r2, #12]
 8009714:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009716:	6852      	ldr	r2, [r2, #4]
 8009718:	b2cd      	uxtb	r5, r1
 800971a:	b18b      	cbz	r3, 8009740 <_sungetc_r+0x44>
 800971c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800971e:	4293      	cmp	r3, r2
 8009720:	dd08      	ble.n	8009734 <_sungetc_r+0x38>
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	1e5a      	subs	r2, r3, #1
 8009726:	6022      	str	r2, [r4, #0]
 8009728:	f803 5c01 	strb.w	r5, [r3, #-1]
 800972c:	6863      	ldr	r3, [r4, #4]
 800972e:	3301      	adds	r3, #1
 8009730:	6063      	str	r3, [r4, #4]
 8009732:	e7e9      	b.n	8009708 <_sungetc_r+0xc>
 8009734:	4621      	mov	r1, r4
 8009736:	f000 fbe8 	bl	8009f0a <__submore>
 800973a:	2800      	cmp	r0, #0
 800973c:	d0f1      	beq.n	8009722 <_sungetc_r+0x26>
 800973e:	e7e1      	b.n	8009704 <_sungetc_r+0x8>
 8009740:	6921      	ldr	r1, [r4, #16]
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	b151      	cbz	r1, 800975c <_sungetc_r+0x60>
 8009746:	4299      	cmp	r1, r3
 8009748:	d208      	bcs.n	800975c <_sungetc_r+0x60>
 800974a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800974e:	42a9      	cmp	r1, r5
 8009750:	d104      	bne.n	800975c <_sungetc_r+0x60>
 8009752:	3b01      	subs	r3, #1
 8009754:	3201      	adds	r2, #1
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	6062      	str	r2, [r4, #4]
 800975a:	e7d5      	b.n	8009708 <_sungetc_r+0xc>
 800975c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009764:	6363      	str	r3, [r4, #52]	; 0x34
 8009766:	2303      	movs	r3, #3
 8009768:	63a3      	str	r3, [r4, #56]	; 0x38
 800976a:	4623      	mov	r3, r4
 800976c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	2301      	movs	r3, #1
 8009774:	e7dc      	b.n	8009730 <_sungetc_r+0x34>

08009776 <__ssrefill_r>:
 8009776:	b510      	push	{r4, lr}
 8009778:	460c      	mov	r4, r1
 800977a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800977c:	b169      	cbz	r1, 800979a <__ssrefill_r+0x24>
 800977e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009782:	4299      	cmp	r1, r3
 8009784:	d001      	beq.n	800978a <__ssrefill_r+0x14>
 8009786:	f7fe fa1d 	bl	8007bc4 <_free_r>
 800978a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800978c:	6063      	str	r3, [r4, #4]
 800978e:	2000      	movs	r0, #0
 8009790:	6360      	str	r0, [r4, #52]	; 0x34
 8009792:	b113      	cbz	r3, 800979a <__ssrefill_r+0x24>
 8009794:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009796:	6023      	str	r3, [r4, #0]
 8009798:	bd10      	pop	{r4, pc}
 800979a:	6923      	ldr	r3, [r4, #16]
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	2300      	movs	r3, #0
 80097a0:	6063      	str	r3, [r4, #4]
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	f043 0320 	orr.w	r3, r3, #32
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	f04f 30ff 	mov.w	r0, #4294967295
 80097ae:	e7f3      	b.n	8009798 <__ssrefill_r+0x22>

080097b0 <__ssvfiscanf_r>:
 80097b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b4:	460c      	mov	r4, r1
 80097b6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80097ba:	2100      	movs	r1, #0
 80097bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80097c0:	49a6      	ldr	r1, [pc, #664]	; (8009a5c <__ssvfiscanf_r+0x2ac>)
 80097c2:	91a0      	str	r1, [sp, #640]	; 0x280
 80097c4:	f10d 0804 	add.w	r8, sp, #4
 80097c8:	49a5      	ldr	r1, [pc, #660]	; (8009a60 <__ssvfiscanf_r+0x2b0>)
 80097ca:	4fa6      	ldr	r7, [pc, #664]	; (8009a64 <__ssvfiscanf_r+0x2b4>)
 80097cc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009a68 <__ssvfiscanf_r+0x2b8>
 80097d0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80097d4:	4606      	mov	r6, r0
 80097d6:	91a1      	str	r1, [sp, #644]	; 0x284
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	7813      	ldrb	r3, [r2, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 815a 	beq.w	8009a96 <__ssvfiscanf_r+0x2e6>
 80097e2:	5cf9      	ldrb	r1, [r7, r3]
 80097e4:	f011 0108 	ands.w	r1, r1, #8
 80097e8:	f102 0501 	add.w	r5, r2, #1
 80097ec:	d019      	beq.n	8009822 <__ssvfiscanf_r+0x72>
 80097ee:	6863      	ldr	r3, [r4, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	dd0f      	ble.n	8009814 <__ssvfiscanf_r+0x64>
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	781a      	ldrb	r2, [r3, #0]
 80097f8:	5cba      	ldrb	r2, [r7, r2]
 80097fa:	0712      	lsls	r2, r2, #28
 80097fc:	d401      	bmi.n	8009802 <__ssvfiscanf_r+0x52>
 80097fe:	462a      	mov	r2, r5
 8009800:	e7eb      	b.n	80097da <__ssvfiscanf_r+0x2a>
 8009802:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009804:	3201      	adds	r2, #1
 8009806:	9245      	str	r2, [sp, #276]	; 0x114
 8009808:	6862      	ldr	r2, [r4, #4]
 800980a:	3301      	adds	r3, #1
 800980c:	3a01      	subs	r2, #1
 800980e:	6062      	str	r2, [r4, #4]
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	e7ec      	b.n	80097ee <__ssvfiscanf_r+0x3e>
 8009814:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009816:	4621      	mov	r1, r4
 8009818:	4630      	mov	r0, r6
 800981a:	4798      	blx	r3
 800981c:	2800      	cmp	r0, #0
 800981e:	d0e9      	beq.n	80097f4 <__ssvfiscanf_r+0x44>
 8009820:	e7ed      	b.n	80097fe <__ssvfiscanf_r+0x4e>
 8009822:	2b25      	cmp	r3, #37	; 0x25
 8009824:	d012      	beq.n	800984c <__ssvfiscanf_r+0x9c>
 8009826:	469a      	mov	sl, r3
 8009828:	6863      	ldr	r3, [r4, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	f340 8091 	ble.w	8009952 <__ssvfiscanf_r+0x1a2>
 8009830:	6822      	ldr	r2, [r4, #0]
 8009832:	7813      	ldrb	r3, [r2, #0]
 8009834:	4553      	cmp	r3, sl
 8009836:	f040 812e 	bne.w	8009a96 <__ssvfiscanf_r+0x2e6>
 800983a:	6863      	ldr	r3, [r4, #4]
 800983c:	3b01      	subs	r3, #1
 800983e:	6063      	str	r3, [r4, #4]
 8009840:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009842:	3201      	adds	r2, #1
 8009844:	3301      	adds	r3, #1
 8009846:	6022      	str	r2, [r4, #0]
 8009848:	9345      	str	r3, [sp, #276]	; 0x114
 800984a:	e7d8      	b.n	80097fe <__ssvfiscanf_r+0x4e>
 800984c:	9141      	str	r1, [sp, #260]	; 0x104
 800984e:	9143      	str	r1, [sp, #268]	; 0x10c
 8009850:	7853      	ldrb	r3, [r2, #1]
 8009852:	2b2a      	cmp	r3, #42	; 0x2a
 8009854:	bf02      	ittt	eq
 8009856:	2310      	moveq	r3, #16
 8009858:	1c95      	addeq	r5, r2, #2
 800985a:	9341      	streq	r3, [sp, #260]	; 0x104
 800985c:	220a      	movs	r2, #10
 800985e:	46aa      	mov	sl, r5
 8009860:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009864:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009868:	2b09      	cmp	r3, #9
 800986a:	d91c      	bls.n	80098a6 <__ssvfiscanf_r+0xf6>
 800986c:	487e      	ldr	r0, [pc, #504]	; (8009a68 <__ssvfiscanf_r+0x2b8>)
 800986e:	2203      	movs	r2, #3
 8009870:	f7f6 fcb6 	bl	80001e0 <memchr>
 8009874:	b138      	cbz	r0, 8009886 <__ssvfiscanf_r+0xd6>
 8009876:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009878:	eba0 0009 	sub.w	r0, r0, r9
 800987c:	2301      	movs	r3, #1
 800987e:	4083      	lsls	r3, r0
 8009880:	4313      	orrs	r3, r2
 8009882:	9341      	str	r3, [sp, #260]	; 0x104
 8009884:	4655      	mov	r5, sl
 8009886:	f815 3b01 	ldrb.w	r3, [r5], #1
 800988a:	2b78      	cmp	r3, #120	; 0x78
 800988c:	d806      	bhi.n	800989c <__ssvfiscanf_r+0xec>
 800988e:	2b57      	cmp	r3, #87	; 0x57
 8009890:	d810      	bhi.n	80098b4 <__ssvfiscanf_r+0x104>
 8009892:	2b25      	cmp	r3, #37	; 0x25
 8009894:	d0c7      	beq.n	8009826 <__ssvfiscanf_r+0x76>
 8009896:	d857      	bhi.n	8009948 <__ssvfiscanf_r+0x198>
 8009898:	2b00      	cmp	r3, #0
 800989a:	d065      	beq.n	8009968 <__ssvfiscanf_r+0x1b8>
 800989c:	2303      	movs	r3, #3
 800989e:	9347      	str	r3, [sp, #284]	; 0x11c
 80098a0:	230a      	movs	r3, #10
 80098a2:	9342      	str	r3, [sp, #264]	; 0x108
 80098a4:	e076      	b.n	8009994 <__ssvfiscanf_r+0x1e4>
 80098a6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80098a8:	fb02 1103 	mla	r1, r2, r3, r1
 80098ac:	3930      	subs	r1, #48	; 0x30
 80098ae:	9143      	str	r1, [sp, #268]	; 0x10c
 80098b0:	4655      	mov	r5, sl
 80098b2:	e7d4      	b.n	800985e <__ssvfiscanf_r+0xae>
 80098b4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80098b8:	2a20      	cmp	r2, #32
 80098ba:	d8ef      	bhi.n	800989c <__ssvfiscanf_r+0xec>
 80098bc:	a101      	add	r1, pc, #4	; (adr r1, 80098c4 <__ssvfiscanf_r+0x114>)
 80098be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80098c2:	bf00      	nop
 80098c4:	08009977 	.word	0x08009977
 80098c8:	0800989d 	.word	0x0800989d
 80098cc:	0800989d 	.word	0x0800989d
 80098d0:	080099d5 	.word	0x080099d5
 80098d4:	0800989d 	.word	0x0800989d
 80098d8:	0800989d 	.word	0x0800989d
 80098dc:	0800989d 	.word	0x0800989d
 80098e0:	0800989d 	.word	0x0800989d
 80098e4:	0800989d 	.word	0x0800989d
 80098e8:	0800989d 	.word	0x0800989d
 80098ec:	0800989d 	.word	0x0800989d
 80098f0:	080099eb 	.word	0x080099eb
 80098f4:	080099d1 	.word	0x080099d1
 80098f8:	0800994f 	.word	0x0800994f
 80098fc:	0800994f 	.word	0x0800994f
 8009900:	0800994f 	.word	0x0800994f
 8009904:	0800989d 	.word	0x0800989d
 8009908:	0800998d 	.word	0x0800998d
 800990c:	0800989d 	.word	0x0800989d
 8009910:	0800989d 	.word	0x0800989d
 8009914:	0800989d 	.word	0x0800989d
 8009918:	0800989d 	.word	0x0800989d
 800991c:	080099fb 	.word	0x080099fb
 8009920:	080099c9 	.word	0x080099c9
 8009924:	0800996f 	.word	0x0800996f
 8009928:	0800989d 	.word	0x0800989d
 800992c:	0800989d 	.word	0x0800989d
 8009930:	080099f7 	.word	0x080099f7
 8009934:	0800989d 	.word	0x0800989d
 8009938:	080099d1 	.word	0x080099d1
 800993c:	0800989d 	.word	0x0800989d
 8009940:	0800989d 	.word	0x0800989d
 8009944:	08009977 	.word	0x08009977
 8009948:	3b45      	subs	r3, #69	; 0x45
 800994a:	2b02      	cmp	r3, #2
 800994c:	d8a6      	bhi.n	800989c <__ssvfiscanf_r+0xec>
 800994e:	2305      	movs	r3, #5
 8009950:	e01f      	b.n	8009992 <__ssvfiscanf_r+0x1e2>
 8009952:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009954:	4621      	mov	r1, r4
 8009956:	4630      	mov	r0, r6
 8009958:	4798      	blx	r3
 800995a:	2800      	cmp	r0, #0
 800995c:	f43f af68 	beq.w	8009830 <__ssvfiscanf_r+0x80>
 8009960:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009962:	2800      	cmp	r0, #0
 8009964:	f040 808d 	bne.w	8009a82 <__ssvfiscanf_r+0x2d2>
 8009968:	f04f 30ff 	mov.w	r0, #4294967295
 800996c:	e08f      	b.n	8009a8e <__ssvfiscanf_r+0x2de>
 800996e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009970:	f042 0220 	orr.w	r2, r2, #32
 8009974:	9241      	str	r2, [sp, #260]	; 0x104
 8009976:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800997c:	9241      	str	r2, [sp, #260]	; 0x104
 800997e:	2210      	movs	r2, #16
 8009980:	2b6f      	cmp	r3, #111	; 0x6f
 8009982:	9242      	str	r2, [sp, #264]	; 0x108
 8009984:	bf34      	ite	cc
 8009986:	2303      	movcc	r3, #3
 8009988:	2304      	movcs	r3, #4
 800998a:	e002      	b.n	8009992 <__ssvfiscanf_r+0x1e2>
 800998c:	2300      	movs	r3, #0
 800998e:	9342      	str	r3, [sp, #264]	; 0x108
 8009990:	2303      	movs	r3, #3
 8009992:	9347      	str	r3, [sp, #284]	; 0x11c
 8009994:	6863      	ldr	r3, [r4, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	dd3d      	ble.n	8009a16 <__ssvfiscanf_r+0x266>
 800999a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800999c:	0659      	lsls	r1, r3, #25
 800999e:	d404      	bmi.n	80099aa <__ssvfiscanf_r+0x1fa>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	781a      	ldrb	r2, [r3, #0]
 80099a4:	5cba      	ldrb	r2, [r7, r2]
 80099a6:	0712      	lsls	r2, r2, #28
 80099a8:	d43c      	bmi.n	8009a24 <__ssvfiscanf_r+0x274>
 80099aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	dc4b      	bgt.n	8009a48 <__ssvfiscanf_r+0x298>
 80099b0:	466b      	mov	r3, sp
 80099b2:	4622      	mov	r2, r4
 80099b4:	a941      	add	r1, sp, #260	; 0x104
 80099b6:	4630      	mov	r0, r6
 80099b8:	f000 f872 	bl	8009aa0 <_scanf_chars>
 80099bc:	2801      	cmp	r0, #1
 80099be:	d06a      	beq.n	8009a96 <__ssvfiscanf_r+0x2e6>
 80099c0:	2802      	cmp	r0, #2
 80099c2:	f47f af1c 	bne.w	80097fe <__ssvfiscanf_r+0x4e>
 80099c6:	e7cb      	b.n	8009960 <__ssvfiscanf_r+0x1b0>
 80099c8:	2308      	movs	r3, #8
 80099ca:	9342      	str	r3, [sp, #264]	; 0x108
 80099cc:	2304      	movs	r3, #4
 80099ce:	e7e0      	b.n	8009992 <__ssvfiscanf_r+0x1e2>
 80099d0:	220a      	movs	r2, #10
 80099d2:	e7d5      	b.n	8009980 <__ssvfiscanf_r+0x1d0>
 80099d4:	4629      	mov	r1, r5
 80099d6:	4640      	mov	r0, r8
 80099d8:	f000 fa5e 	bl	8009e98 <__sccl>
 80099dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80099de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099e2:	9341      	str	r3, [sp, #260]	; 0x104
 80099e4:	4605      	mov	r5, r0
 80099e6:	2301      	movs	r3, #1
 80099e8:	e7d3      	b.n	8009992 <__ssvfiscanf_r+0x1e2>
 80099ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80099ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099f0:	9341      	str	r3, [sp, #260]	; 0x104
 80099f2:	2300      	movs	r3, #0
 80099f4:	e7cd      	b.n	8009992 <__ssvfiscanf_r+0x1e2>
 80099f6:	2302      	movs	r3, #2
 80099f8:	e7cb      	b.n	8009992 <__ssvfiscanf_r+0x1e2>
 80099fa:	9841      	ldr	r0, [sp, #260]	; 0x104
 80099fc:	06c3      	lsls	r3, r0, #27
 80099fe:	f53f aefe 	bmi.w	80097fe <__ssvfiscanf_r+0x4e>
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009a06:	1d19      	adds	r1, r3, #4
 8009a08:	9100      	str	r1, [sp, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	07c0      	lsls	r0, r0, #31
 8009a0e:	bf4c      	ite	mi
 8009a10:	801a      	strhmi	r2, [r3, #0]
 8009a12:	601a      	strpl	r2, [r3, #0]
 8009a14:	e6f3      	b.n	80097fe <__ssvfiscanf_r+0x4e>
 8009a16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	4798      	blx	r3
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d0bb      	beq.n	800999a <__ssvfiscanf_r+0x1ea>
 8009a22:	e79d      	b.n	8009960 <__ssvfiscanf_r+0x1b0>
 8009a24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009a26:	3201      	adds	r2, #1
 8009a28:	9245      	str	r2, [sp, #276]	; 0x114
 8009a2a:	6862      	ldr	r2, [r4, #4]
 8009a2c:	3a01      	subs	r2, #1
 8009a2e:	2a00      	cmp	r2, #0
 8009a30:	6062      	str	r2, [r4, #4]
 8009a32:	dd02      	ble.n	8009a3a <__ssvfiscanf_r+0x28a>
 8009a34:	3301      	adds	r3, #1
 8009a36:	6023      	str	r3, [r4, #0]
 8009a38:	e7b2      	b.n	80099a0 <__ssvfiscanf_r+0x1f0>
 8009a3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	4630      	mov	r0, r6
 8009a40:	4798      	blx	r3
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d0ac      	beq.n	80099a0 <__ssvfiscanf_r+0x1f0>
 8009a46:	e78b      	b.n	8009960 <__ssvfiscanf_r+0x1b0>
 8009a48:	2b04      	cmp	r3, #4
 8009a4a:	dc0f      	bgt.n	8009a6c <__ssvfiscanf_r+0x2bc>
 8009a4c:	466b      	mov	r3, sp
 8009a4e:	4622      	mov	r2, r4
 8009a50:	a941      	add	r1, sp, #260	; 0x104
 8009a52:	4630      	mov	r0, r6
 8009a54:	f000 f87e 	bl	8009b54 <_scanf_i>
 8009a58:	e7b0      	b.n	80099bc <__ssvfiscanf_r+0x20c>
 8009a5a:	bf00      	nop
 8009a5c:	080096fd 	.word	0x080096fd
 8009a60:	08009777 	.word	0x08009777
 8009a64:	0800b221 	.word	0x0800b221
 8009a68:	0800b327 	.word	0x0800b327
 8009a6c:	4b0b      	ldr	r3, [pc, #44]	; (8009a9c <__ssvfiscanf_r+0x2ec>)
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f43f aec5 	beq.w	80097fe <__ssvfiscanf_r+0x4e>
 8009a74:	466b      	mov	r3, sp
 8009a76:	4622      	mov	r2, r4
 8009a78:	a941      	add	r1, sp, #260	; 0x104
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7fc fe1c 	bl	80066b8 <_scanf_float>
 8009a80:	e79c      	b.n	80099bc <__ssvfiscanf_r+0x20c>
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009a88:	bf18      	it	ne
 8009a8a:	f04f 30ff 	movne.w	r0, #4294967295
 8009a8e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a96:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009a98:	e7f9      	b.n	8009a8e <__ssvfiscanf_r+0x2de>
 8009a9a:	bf00      	nop
 8009a9c:	080066b9 	.word	0x080066b9

08009aa0 <_scanf_chars>:
 8009aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aa4:	4615      	mov	r5, r2
 8009aa6:	688a      	ldr	r2, [r1, #8]
 8009aa8:	4680      	mov	r8, r0
 8009aaa:	460c      	mov	r4, r1
 8009aac:	b932      	cbnz	r2, 8009abc <_scanf_chars+0x1c>
 8009aae:	698a      	ldr	r2, [r1, #24]
 8009ab0:	2a00      	cmp	r2, #0
 8009ab2:	bf0c      	ite	eq
 8009ab4:	2201      	moveq	r2, #1
 8009ab6:	f04f 32ff 	movne.w	r2, #4294967295
 8009aba:	608a      	str	r2, [r1, #8]
 8009abc:	6822      	ldr	r2, [r4, #0]
 8009abe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009b50 <_scanf_chars+0xb0>
 8009ac2:	06d1      	lsls	r1, r2, #27
 8009ac4:	bf5f      	itttt	pl
 8009ac6:	681a      	ldrpl	r2, [r3, #0]
 8009ac8:	1d11      	addpl	r1, r2, #4
 8009aca:	6019      	strpl	r1, [r3, #0]
 8009acc:	6816      	ldrpl	r6, [r2, #0]
 8009ace:	2700      	movs	r7, #0
 8009ad0:	69a0      	ldr	r0, [r4, #24]
 8009ad2:	b188      	cbz	r0, 8009af8 <_scanf_chars+0x58>
 8009ad4:	2801      	cmp	r0, #1
 8009ad6:	d107      	bne.n	8009ae8 <_scanf_chars+0x48>
 8009ad8:	682a      	ldr	r2, [r5, #0]
 8009ada:	7811      	ldrb	r1, [r2, #0]
 8009adc:	6962      	ldr	r2, [r4, #20]
 8009ade:	5c52      	ldrb	r2, [r2, r1]
 8009ae0:	b952      	cbnz	r2, 8009af8 <_scanf_chars+0x58>
 8009ae2:	2f00      	cmp	r7, #0
 8009ae4:	d031      	beq.n	8009b4a <_scanf_chars+0xaa>
 8009ae6:	e022      	b.n	8009b2e <_scanf_chars+0x8e>
 8009ae8:	2802      	cmp	r0, #2
 8009aea:	d120      	bne.n	8009b2e <_scanf_chars+0x8e>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009af4:	071b      	lsls	r3, r3, #28
 8009af6:	d41a      	bmi.n	8009b2e <_scanf_chars+0x8e>
 8009af8:	6823      	ldr	r3, [r4, #0]
 8009afa:	06da      	lsls	r2, r3, #27
 8009afc:	bf5e      	ittt	pl
 8009afe:	682b      	ldrpl	r3, [r5, #0]
 8009b00:	781b      	ldrbpl	r3, [r3, #0]
 8009b02:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009b06:	682a      	ldr	r2, [r5, #0]
 8009b08:	686b      	ldr	r3, [r5, #4]
 8009b0a:	3201      	adds	r2, #1
 8009b0c:	602a      	str	r2, [r5, #0]
 8009b0e:	68a2      	ldr	r2, [r4, #8]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	3a01      	subs	r2, #1
 8009b14:	606b      	str	r3, [r5, #4]
 8009b16:	3701      	adds	r7, #1
 8009b18:	60a2      	str	r2, [r4, #8]
 8009b1a:	b142      	cbz	r2, 8009b2e <_scanf_chars+0x8e>
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	dcd7      	bgt.n	8009ad0 <_scanf_chars+0x30>
 8009b20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009b24:	4629      	mov	r1, r5
 8009b26:	4640      	mov	r0, r8
 8009b28:	4798      	blx	r3
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d0d0      	beq.n	8009ad0 <_scanf_chars+0x30>
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	f013 0310 	ands.w	r3, r3, #16
 8009b34:	d105      	bne.n	8009b42 <_scanf_chars+0xa2>
 8009b36:	68e2      	ldr	r2, [r4, #12]
 8009b38:	3201      	adds	r2, #1
 8009b3a:	60e2      	str	r2, [r4, #12]
 8009b3c:	69a2      	ldr	r2, [r4, #24]
 8009b3e:	b102      	cbz	r2, 8009b42 <_scanf_chars+0xa2>
 8009b40:	7033      	strb	r3, [r6, #0]
 8009b42:	6923      	ldr	r3, [r4, #16]
 8009b44:	443b      	add	r3, r7
 8009b46:	6123      	str	r3, [r4, #16]
 8009b48:	2000      	movs	r0, #0
 8009b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b4e:	bf00      	nop
 8009b50:	0800b221 	.word	0x0800b221

08009b54 <_scanf_i>:
 8009b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	4698      	mov	r8, r3
 8009b5a:	4b74      	ldr	r3, [pc, #464]	; (8009d2c <_scanf_i+0x1d8>)
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	4682      	mov	sl, r0
 8009b60:	4616      	mov	r6, r2
 8009b62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b66:	b087      	sub	sp, #28
 8009b68:	ab03      	add	r3, sp, #12
 8009b6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009b6e:	4b70      	ldr	r3, [pc, #448]	; (8009d30 <_scanf_i+0x1dc>)
 8009b70:	69a1      	ldr	r1, [r4, #24]
 8009b72:	4a70      	ldr	r2, [pc, #448]	; (8009d34 <_scanf_i+0x1e0>)
 8009b74:	2903      	cmp	r1, #3
 8009b76:	bf18      	it	ne
 8009b78:	461a      	movne	r2, r3
 8009b7a:	68a3      	ldr	r3, [r4, #8]
 8009b7c:	9201      	str	r2, [sp, #4]
 8009b7e:	1e5a      	subs	r2, r3, #1
 8009b80:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009b84:	bf88      	it	hi
 8009b86:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009b8a:	4627      	mov	r7, r4
 8009b8c:	bf82      	ittt	hi
 8009b8e:	eb03 0905 	addhi.w	r9, r3, r5
 8009b92:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009b96:	60a3      	strhi	r3, [r4, #8]
 8009b98:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009b9c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009ba0:	bf98      	it	ls
 8009ba2:	f04f 0900 	movls.w	r9, #0
 8009ba6:	6023      	str	r3, [r4, #0]
 8009ba8:	463d      	mov	r5, r7
 8009baa:	f04f 0b00 	mov.w	fp, #0
 8009bae:	6831      	ldr	r1, [r6, #0]
 8009bb0:	ab03      	add	r3, sp, #12
 8009bb2:	7809      	ldrb	r1, [r1, #0]
 8009bb4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009bb8:	2202      	movs	r2, #2
 8009bba:	f7f6 fb11 	bl	80001e0 <memchr>
 8009bbe:	b328      	cbz	r0, 8009c0c <_scanf_i+0xb8>
 8009bc0:	f1bb 0f01 	cmp.w	fp, #1
 8009bc4:	d159      	bne.n	8009c7a <_scanf_i+0x126>
 8009bc6:	6862      	ldr	r2, [r4, #4]
 8009bc8:	b92a      	cbnz	r2, 8009bd6 <_scanf_i+0x82>
 8009bca:	6822      	ldr	r2, [r4, #0]
 8009bcc:	2308      	movs	r3, #8
 8009bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bd2:	6063      	str	r3, [r4, #4]
 8009bd4:	6022      	str	r2, [r4, #0]
 8009bd6:	6822      	ldr	r2, [r4, #0]
 8009bd8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009bdc:	6022      	str	r2, [r4, #0]
 8009bde:	68a2      	ldr	r2, [r4, #8]
 8009be0:	1e51      	subs	r1, r2, #1
 8009be2:	60a1      	str	r1, [r4, #8]
 8009be4:	b192      	cbz	r2, 8009c0c <_scanf_i+0xb8>
 8009be6:	6832      	ldr	r2, [r6, #0]
 8009be8:	1c51      	adds	r1, r2, #1
 8009bea:	6031      	str	r1, [r6, #0]
 8009bec:	7812      	ldrb	r2, [r2, #0]
 8009bee:	f805 2b01 	strb.w	r2, [r5], #1
 8009bf2:	6872      	ldr	r2, [r6, #4]
 8009bf4:	3a01      	subs	r2, #1
 8009bf6:	2a00      	cmp	r2, #0
 8009bf8:	6072      	str	r2, [r6, #4]
 8009bfa:	dc07      	bgt.n	8009c0c <_scanf_i+0xb8>
 8009bfc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009c00:	4631      	mov	r1, r6
 8009c02:	4650      	mov	r0, sl
 8009c04:	4790      	blx	r2
 8009c06:	2800      	cmp	r0, #0
 8009c08:	f040 8085 	bne.w	8009d16 <_scanf_i+0x1c2>
 8009c0c:	f10b 0b01 	add.w	fp, fp, #1
 8009c10:	f1bb 0f03 	cmp.w	fp, #3
 8009c14:	d1cb      	bne.n	8009bae <_scanf_i+0x5a>
 8009c16:	6863      	ldr	r3, [r4, #4]
 8009c18:	b90b      	cbnz	r3, 8009c1e <_scanf_i+0xca>
 8009c1a:	230a      	movs	r3, #10
 8009c1c:	6063      	str	r3, [r4, #4]
 8009c1e:	6863      	ldr	r3, [r4, #4]
 8009c20:	4945      	ldr	r1, [pc, #276]	; (8009d38 <_scanf_i+0x1e4>)
 8009c22:	6960      	ldr	r0, [r4, #20]
 8009c24:	1ac9      	subs	r1, r1, r3
 8009c26:	f000 f937 	bl	8009e98 <__sccl>
 8009c2a:	f04f 0b00 	mov.w	fp, #0
 8009c2e:	68a3      	ldr	r3, [r4, #8]
 8009c30:	6822      	ldr	r2, [r4, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d03d      	beq.n	8009cb2 <_scanf_i+0x15e>
 8009c36:	6831      	ldr	r1, [r6, #0]
 8009c38:	6960      	ldr	r0, [r4, #20]
 8009c3a:	f891 c000 	ldrb.w	ip, [r1]
 8009c3e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d035      	beq.n	8009cb2 <_scanf_i+0x15e>
 8009c46:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009c4a:	d124      	bne.n	8009c96 <_scanf_i+0x142>
 8009c4c:	0510      	lsls	r0, r2, #20
 8009c4e:	d522      	bpl.n	8009c96 <_scanf_i+0x142>
 8009c50:	f10b 0b01 	add.w	fp, fp, #1
 8009c54:	f1b9 0f00 	cmp.w	r9, #0
 8009c58:	d003      	beq.n	8009c62 <_scanf_i+0x10e>
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	f109 39ff 	add.w	r9, r9, #4294967295
 8009c60:	60a3      	str	r3, [r4, #8]
 8009c62:	6873      	ldr	r3, [r6, #4]
 8009c64:	3b01      	subs	r3, #1
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	6073      	str	r3, [r6, #4]
 8009c6a:	dd1b      	ble.n	8009ca4 <_scanf_i+0x150>
 8009c6c:	6833      	ldr	r3, [r6, #0]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	6033      	str	r3, [r6, #0]
 8009c72:	68a3      	ldr	r3, [r4, #8]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	60a3      	str	r3, [r4, #8]
 8009c78:	e7d9      	b.n	8009c2e <_scanf_i+0xda>
 8009c7a:	f1bb 0f02 	cmp.w	fp, #2
 8009c7e:	d1ae      	bne.n	8009bde <_scanf_i+0x8a>
 8009c80:	6822      	ldr	r2, [r4, #0]
 8009c82:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009c86:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009c8a:	d1bf      	bne.n	8009c0c <_scanf_i+0xb8>
 8009c8c:	2310      	movs	r3, #16
 8009c8e:	6063      	str	r3, [r4, #4]
 8009c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c94:	e7a2      	b.n	8009bdc <_scanf_i+0x88>
 8009c96:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009c9a:	6022      	str	r2, [r4, #0]
 8009c9c:	780b      	ldrb	r3, [r1, #0]
 8009c9e:	f805 3b01 	strb.w	r3, [r5], #1
 8009ca2:	e7de      	b.n	8009c62 <_scanf_i+0x10e>
 8009ca4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009ca8:	4631      	mov	r1, r6
 8009caa:	4650      	mov	r0, sl
 8009cac:	4798      	blx	r3
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d0df      	beq.n	8009c72 <_scanf_i+0x11e>
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	05d9      	lsls	r1, r3, #23
 8009cb6:	d50d      	bpl.n	8009cd4 <_scanf_i+0x180>
 8009cb8:	42bd      	cmp	r5, r7
 8009cba:	d909      	bls.n	8009cd0 <_scanf_i+0x17c>
 8009cbc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009cc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009cc4:	4632      	mov	r2, r6
 8009cc6:	4650      	mov	r0, sl
 8009cc8:	4798      	blx	r3
 8009cca:	f105 39ff 	add.w	r9, r5, #4294967295
 8009cce:	464d      	mov	r5, r9
 8009cd0:	42bd      	cmp	r5, r7
 8009cd2:	d028      	beq.n	8009d26 <_scanf_i+0x1d2>
 8009cd4:	6822      	ldr	r2, [r4, #0]
 8009cd6:	f012 0210 	ands.w	r2, r2, #16
 8009cda:	d113      	bne.n	8009d04 <_scanf_i+0x1b0>
 8009cdc:	702a      	strb	r2, [r5, #0]
 8009cde:	6863      	ldr	r3, [r4, #4]
 8009ce0:	9e01      	ldr	r6, [sp, #4]
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	4650      	mov	r0, sl
 8009ce6:	47b0      	blx	r6
 8009ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8009cec:	6821      	ldr	r1, [r4, #0]
 8009cee:	1d1a      	adds	r2, r3, #4
 8009cf0:	f8c8 2000 	str.w	r2, [r8]
 8009cf4:	f011 0f20 	tst.w	r1, #32
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	d00f      	beq.n	8009d1c <_scanf_i+0x1c8>
 8009cfc:	6018      	str	r0, [r3, #0]
 8009cfe:	68e3      	ldr	r3, [r4, #12]
 8009d00:	3301      	adds	r3, #1
 8009d02:	60e3      	str	r3, [r4, #12]
 8009d04:	6923      	ldr	r3, [r4, #16]
 8009d06:	1bed      	subs	r5, r5, r7
 8009d08:	445d      	add	r5, fp
 8009d0a:	442b      	add	r3, r5
 8009d0c:	6123      	str	r3, [r4, #16]
 8009d0e:	2000      	movs	r0, #0
 8009d10:	b007      	add	sp, #28
 8009d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d16:	f04f 0b00 	mov.w	fp, #0
 8009d1a:	e7ca      	b.n	8009cb2 <_scanf_i+0x15e>
 8009d1c:	07ca      	lsls	r2, r1, #31
 8009d1e:	bf4c      	ite	mi
 8009d20:	8018      	strhmi	r0, [r3, #0]
 8009d22:	6018      	strpl	r0, [r3, #0]
 8009d24:	e7eb      	b.n	8009cfe <_scanf_i+0x1aa>
 8009d26:	2001      	movs	r0, #1
 8009d28:	e7f2      	b.n	8009d10 <_scanf_i+0x1bc>
 8009d2a:	bf00      	nop
 8009d2c:	0800af20 	.word	0x0800af20
 8009d30:	0800a865 	.word	0x0800a865
 8009d34:	08009449 	.word	0x08009449
 8009d38:	0800b342 	.word	0x0800b342

08009d3c <__sflush_r>:
 8009d3c:	898a      	ldrh	r2, [r1, #12]
 8009d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d42:	4605      	mov	r5, r0
 8009d44:	0710      	lsls	r0, r2, #28
 8009d46:	460c      	mov	r4, r1
 8009d48:	d458      	bmi.n	8009dfc <__sflush_r+0xc0>
 8009d4a:	684b      	ldr	r3, [r1, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dc05      	bgt.n	8009d5c <__sflush_r+0x20>
 8009d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	dc02      	bgt.n	8009d5c <__sflush_r+0x20>
 8009d56:	2000      	movs	r0, #0
 8009d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d5e:	2e00      	cmp	r6, #0
 8009d60:	d0f9      	beq.n	8009d56 <__sflush_r+0x1a>
 8009d62:	2300      	movs	r3, #0
 8009d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d68:	682f      	ldr	r7, [r5, #0]
 8009d6a:	6a21      	ldr	r1, [r4, #32]
 8009d6c:	602b      	str	r3, [r5, #0]
 8009d6e:	d032      	beq.n	8009dd6 <__sflush_r+0x9a>
 8009d70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	075a      	lsls	r2, r3, #29
 8009d76:	d505      	bpl.n	8009d84 <__sflush_r+0x48>
 8009d78:	6863      	ldr	r3, [r4, #4]
 8009d7a:	1ac0      	subs	r0, r0, r3
 8009d7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d7e:	b10b      	cbz	r3, 8009d84 <__sflush_r+0x48>
 8009d80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d82:	1ac0      	subs	r0, r0, r3
 8009d84:	2300      	movs	r3, #0
 8009d86:	4602      	mov	r2, r0
 8009d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d8a:	6a21      	ldr	r1, [r4, #32]
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	47b0      	blx	r6
 8009d90:	1c43      	adds	r3, r0, #1
 8009d92:	89a3      	ldrh	r3, [r4, #12]
 8009d94:	d106      	bne.n	8009da4 <__sflush_r+0x68>
 8009d96:	6829      	ldr	r1, [r5, #0]
 8009d98:	291d      	cmp	r1, #29
 8009d9a:	d82b      	bhi.n	8009df4 <__sflush_r+0xb8>
 8009d9c:	4a29      	ldr	r2, [pc, #164]	; (8009e44 <__sflush_r+0x108>)
 8009d9e:	410a      	asrs	r2, r1
 8009da0:	07d6      	lsls	r6, r2, #31
 8009da2:	d427      	bmi.n	8009df4 <__sflush_r+0xb8>
 8009da4:	2200      	movs	r2, #0
 8009da6:	6062      	str	r2, [r4, #4]
 8009da8:	04d9      	lsls	r1, r3, #19
 8009daa:	6922      	ldr	r2, [r4, #16]
 8009dac:	6022      	str	r2, [r4, #0]
 8009dae:	d504      	bpl.n	8009dba <__sflush_r+0x7e>
 8009db0:	1c42      	adds	r2, r0, #1
 8009db2:	d101      	bne.n	8009db8 <__sflush_r+0x7c>
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	b903      	cbnz	r3, 8009dba <__sflush_r+0x7e>
 8009db8:	6560      	str	r0, [r4, #84]	; 0x54
 8009dba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dbc:	602f      	str	r7, [r5, #0]
 8009dbe:	2900      	cmp	r1, #0
 8009dc0:	d0c9      	beq.n	8009d56 <__sflush_r+0x1a>
 8009dc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dc6:	4299      	cmp	r1, r3
 8009dc8:	d002      	beq.n	8009dd0 <__sflush_r+0x94>
 8009dca:	4628      	mov	r0, r5
 8009dcc:	f7fd fefa 	bl	8007bc4 <_free_r>
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	6360      	str	r0, [r4, #52]	; 0x34
 8009dd4:	e7c0      	b.n	8009d58 <__sflush_r+0x1c>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	4628      	mov	r0, r5
 8009dda:	47b0      	blx	r6
 8009ddc:	1c41      	adds	r1, r0, #1
 8009dde:	d1c8      	bne.n	8009d72 <__sflush_r+0x36>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d0c5      	beq.n	8009d72 <__sflush_r+0x36>
 8009de6:	2b1d      	cmp	r3, #29
 8009de8:	d001      	beq.n	8009dee <__sflush_r+0xb2>
 8009dea:	2b16      	cmp	r3, #22
 8009dec:	d101      	bne.n	8009df2 <__sflush_r+0xb6>
 8009dee:	602f      	str	r7, [r5, #0]
 8009df0:	e7b1      	b.n	8009d56 <__sflush_r+0x1a>
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	e7ad      	b.n	8009d58 <__sflush_r+0x1c>
 8009dfc:	690f      	ldr	r7, [r1, #16]
 8009dfe:	2f00      	cmp	r7, #0
 8009e00:	d0a9      	beq.n	8009d56 <__sflush_r+0x1a>
 8009e02:	0793      	lsls	r3, r2, #30
 8009e04:	680e      	ldr	r6, [r1, #0]
 8009e06:	bf08      	it	eq
 8009e08:	694b      	ldreq	r3, [r1, #20]
 8009e0a:	600f      	str	r7, [r1, #0]
 8009e0c:	bf18      	it	ne
 8009e0e:	2300      	movne	r3, #0
 8009e10:	eba6 0807 	sub.w	r8, r6, r7
 8009e14:	608b      	str	r3, [r1, #8]
 8009e16:	f1b8 0f00 	cmp.w	r8, #0
 8009e1a:	dd9c      	ble.n	8009d56 <__sflush_r+0x1a>
 8009e1c:	6a21      	ldr	r1, [r4, #32]
 8009e1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e20:	4643      	mov	r3, r8
 8009e22:	463a      	mov	r2, r7
 8009e24:	4628      	mov	r0, r5
 8009e26:	47b0      	blx	r6
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	dc06      	bgt.n	8009e3a <__sflush_r+0xfe>
 8009e2c:	89a3      	ldrh	r3, [r4, #12]
 8009e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e32:	81a3      	strh	r3, [r4, #12]
 8009e34:	f04f 30ff 	mov.w	r0, #4294967295
 8009e38:	e78e      	b.n	8009d58 <__sflush_r+0x1c>
 8009e3a:	4407      	add	r7, r0
 8009e3c:	eba8 0800 	sub.w	r8, r8, r0
 8009e40:	e7e9      	b.n	8009e16 <__sflush_r+0xda>
 8009e42:	bf00      	nop
 8009e44:	dfbffffe 	.word	0xdfbffffe

08009e48 <_fflush_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	690b      	ldr	r3, [r1, #16]
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	460c      	mov	r4, r1
 8009e50:	b913      	cbnz	r3, 8009e58 <_fflush_r+0x10>
 8009e52:	2500      	movs	r5, #0
 8009e54:	4628      	mov	r0, r5
 8009e56:	bd38      	pop	{r3, r4, r5, pc}
 8009e58:	b118      	cbz	r0, 8009e62 <_fflush_r+0x1a>
 8009e5a:	6a03      	ldr	r3, [r0, #32]
 8009e5c:	b90b      	cbnz	r3, 8009e62 <_fflush_r+0x1a>
 8009e5e:	f7fc fec7 	bl	8006bf0 <__sinit>
 8009e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d0f3      	beq.n	8009e52 <_fflush_r+0xa>
 8009e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e6c:	07d0      	lsls	r0, r2, #31
 8009e6e:	d404      	bmi.n	8009e7a <_fflush_r+0x32>
 8009e70:	0599      	lsls	r1, r3, #22
 8009e72:	d402      	bmi.n	8009e7a <_fflush_r+0x32>
 8009e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e76:	f7fd f812 	bl	8006e9e <__retarget_lock_acquire_recursive>
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	f7ff ff5d 	bl	8009d3c <__sflush_r>
 8009e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e84:	07da      	lsls	r2, r3, #31
 8009e86:	4605      	mov	r5, r0
 8009e88:	d4e4      	bmi.n	8009e54 <_fflush_r+0xc>
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	059b      	lsls	r3, r3, #22
 8009e8e:	d4e1      	bmi.n	8009e54 <_fflush_r+0xc>
 8009e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e92:	f7fd f805 	bl	8006ea0 <__retarget_lock_release_recursive>
 8009e96:	e7dd      	b.n	8009e54 <_fflush_r+0xc>

08009e98 <__sccl>:
 8009e98:	b570      	push	{r4, r5, r6, lr}
 8009e9a:	780b      	ldrb	r3, [r1, #0]
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	2b5e      	cmp	r3, #94	; 0x5e
 8009ea0:	bf0b      	itete	eq
 8009ea2:	784b      	ldrbeq	r3, [r1, #1]
 8009ea4:	1c4a      	addne	r2, r1, #1
 8009ea6:	1c8a      	addeq	r2, r1, #2
 8009ea8:	2100      	movne	r1, #0
 8009eaa:	bf08      	it	eq
 8009eac:	2101      	moveq	r1, #1
 8009eae:	3801      	subs	r0, #1
 8009eb0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009eb4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009eb8:	42a8      	cmp	r0, r5
 8009eba:	d1fb      	bne.n	8009eb4 <__sccl+0x1c>
 8009ebc:	b90b      	cbnz	r3, 8009ec2 <__sccl+0x2a>
 8009ebe:	1e50      	subs	r0, r2, #1
 8009ec0:	bd70      	pop	{r4, r5, r6, pc}
 8009ec2:	f081 0101 	eor.w	r1, r1, #1
 8009ec6:	54e1      	strb	r1, [r4, r3]
 8009ec8:	4610      	mov	r0, r2
 8009eca:	4602      	mov	r2, r0
 8009ecc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009ed0:	2d2d      	cmp	r5, #45	; 0x2d
 8009ed2:	d005      	beq.n	8009ee0 <__sccl+0x48>
 8009ed4:	2d5d      	cmp	r5, #93	; 0x5d
 8009ed6:	d016      	beq.n	8009f06 <__sccl+0x6e>
 8009ed8:	2d00      	cmp	r5, #0
 8009eda:	d0f1      	beq.n	8009ec0 <__sccl+0x28>
 8009edc:	462b      	mov	r3, r5
 8009ede:	e7f2      	b.n	8009ec6 <__sccl+0x2e>
 8009ee0:	7846      	ldrb	r6, [r0, #1]
 8009ee2:	2e5d      	cmp	r6, #93	; 0x5d
 8009ee4:	d0fa      	beq.n	8009edc <__sccl+0x44>
 8009ee6:	42b3      	cmp	r3, r6
 8009ee8:	dcf8      	bgt.n	8009edc <__sccl+0x44>
 8009eea:	3002      	adds	r0, #2
 8009eec:	461a      	mov	r2, r3
 8009eee:	3201      	adds	r2, #1
 8009ef0:	4296      	cmp	r6, r2
 8009ef2:	54a1      	strb	r1, [r4, r2]
 8009ef4:	dcfb      	bgt.n	8009eee <__sccl+0x56>
 8009ef6:	1af2      	subs	r2, r6, r3
 8009ef8:	3a01      	subs	r2, #1
 8009efa:	1c5d      	adds	r5, r3, #1
 8009efc:	42b3      	cmp	r3, r6
 8009efe:	bfa8      	it	ge
 8009f00:	2200      	movge	r2, #0
 8009f02:	18ab      	adds	r3, r5, r2
 8009f04:	e7e1      	b.n	8009eca <__sccl+0x32>
 8009f06:	4610      	mov	r0, r2
 8009f08:	e7da      	b.n	8009ec0 <__sccl+0x28>

08009f0a <__submore>:
 8009f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f0e:	460c      	mov	r4, r1
 8009f10:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009f12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f16:	4299      	cmp	r1, r3
 8009f18:	d11d      	bne.n	8009f56 <__submore+0x4c>
 8009f1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f1e:	f7fd fec5 	bl	8007cac <_malloc_r>
 8009f22:	b918      	cbnz	r0, 8009f2c <__submore+0x22>
 8009f24:	f04f 30ff 	mov.w	r0, #4294967295
 8009f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f30:	63a3      	str	r3, [r4, #56]	; 0x38
 8009f32:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009f36:	6360      	str	r0, [r4, #52]	; 0x34
 8009f38:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009f3c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009f40:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009f44:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009f48:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009f4c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009f50:	6020      	str	r0, [r4, #0]
 8009f52:	2000      	movs	r0, #0
 8009f54:	e7e8      	b.n	8009f28 <__submore+0x1e>
 8009f56:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009f58:	0077      	lsls	r7, r6, #1
 8009f5a:	463a      	mov	r2, r7
 8009f5c:	f000 fbe1 	bl	800a722 <_realloc_r>
 8009f60:	4605      	mov	r5, r0
 8009f62:	2800      	cmp	r0, #0
 8009f64:	d0de      	beq.n	8009f24 <__submore+0x1a>
 8009f66:	eb00 0806 	add.w	r8, r0, r6
 8009f6a:	4601      	mov	r1, r0
 8009f6c:	4632      	mov	r2, r6
 8009f6e:	4640      	mov	r0, r8
 8009f70:	f7fc ff97 	bl	8006ea2 <memcpy>
 8009f74:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009f78:	f8c4 8000 	str.w	r8, [r4]
 8009f7c:	e7e9      	b.n	8009f52 <__submore+0x48>

08009f7e <memmove>:
 8009f7e:	4288      	cmp	r0, r1
 8009f80:	b510      	push	{r4, lr}
 8009f82:	eb01 0402 	add.w	r4, r1, r2
 8009f86:	d902      	bls.n	8009f8e <memmove+0x10>
 8009f88:	4284      	cmp	r4, r0
 8009f8a:	4623      	mov	r3, r4
 8009f8c:	d807      	bhi.n	8009f9e <memmove+0x20>
 8009f8e:	1e43      	subs	r3, r0, #1
 8009f90:	42a1      	cmp	r1, r4
 8009f92:	d008      	beq.n	8009fa6 <memmove+0x28>
 8009f94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f98:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f9c:	e7f8      	b.n	8009f90 <memmove+0x12>
 8009f9e:	4402      	add	r2, r0
 8009fa0:	4601      	mov	r1, r0
 8009fa2:	428a      	cmp	r2, r1
 8009fa4:	d100      	bne.n	8009fa8 <memmove+0x2a>
 8009fa6:	bd10      	pop	{r4, pc}
 8009fa8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009fac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009fb0:	e7f7      	b.n	8009fa2 <memmove+0x24>
	...

08009fb4 <_sbrk_r>:
 8009fb4:	b538      	push	{r3, r4, r5, lr}
 8009fb6:	4d06      	ldr	r5, [pc, #24]	; (8009fd0 <_sbrk_r+0x1c>)
 8009fb8:	2300      	movs	r3, #0
 8009fba:	4604      	mov	r4, r0
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	602b      	str	r3, [r5, #0]
 8009fc0:	f7f7 fc2c 	bl	800181c <_sbrk>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d102      	bne.n	8009fce <_sbrk_r+0x1a>
 8009fc8:	682b      	ldr	r3, [r5, #0]
 8009fca:	b103      	cbz	r3, 8009fce <_sbrk_r+0x1a>
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
 8009fd0:	200050c0 	.word	0x200050c0
 8009fd4:	00000000 	.word	0x00000000

08009fd8 <nan>:
 8009fd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009fe0 <nan+0x8>
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	00000000 	.word	0x00000000
 8009fe4:	7ff80000 	.word	0x7ff80000

08009fe8 <__assert_func>:
 8009fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fea:	4614      	mov	r4, r2
 8009fec:	461a      	mov	r2, r3
 8009fee:	4b09      	ldr	r3, [pc, #36]	; (800a014 <__assert_func+0x2c>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	68d8      	ldr	r0, [r3, #12]
 8009ff6:	b14c      	cbz	r4, 800a00c <__assert_func+0x24>
 8009ff8:	4b07      	ldr	r3, [pc, #28]	; (800a018 <__assert_func+0x30>)
 8009ffa:	9100      	str	r1, [sp, #0]
 8009ffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a000:	4906      	ldr	r1, [pc, #24]	; (800a01c <__assert_func+0x34>)
 800a002:	462b      	mov	r3, r5
 800a004:	f000 fc3e 	bl	800a884 <fiprintf>
 800a008:	f000 fc4e 	bl	800a8a8 <abort>
 800a00c:	4b04      	ldr	r3, [pc, #16]	; (800a020 <__assert_func+0x38>)
 800a00e:	461c      	mov	r4, r3
 800a010:	e7f3      	b.n	8009ffa <__assert_func+0x12>
 800a012:	bf00      	nop
 800a014:	2000006c 	.word	0x2000006c
 800a018:	0800b355 	.word	0x0800b355
 800a01c:	0800b362 	.word	0x0800b362
 800a020:	0800b390 	.word	0x0800b390

0800a024 <_calloc_r>:
 800a024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a026:	fba1 2402 	umull	r2, r4, r1, r2
 800a02a:	b94c      	cbnz	r4, 800a040 <_calloc_r+0x1c>
 800a02c:	4611      	mov	r1, r2
 800a02e:	9201      	str	r2, [sp, #4]
 800a030:	f7fd fe3c 	bl	8007cac <_malloc_r>
 800a034:	9a01      	ldr	r2, [sp, #4]
 800a036:	4605      	mov	r5, r0
 800a038:	b930      	cbnz	r0, 800a048 <_calloc_r+0x24>
 800a03a:	4628      	mov	r0, r5
 800a03c:	b003      	add	sp, #12
 800a03e:	bd30      	pop	{r4, r5, pc}
 800a040:	220c      	movs	r2, #12
 800a042:	6002      	str	r2, [r0, #0]
 800a044:	2500      	movs	r5, #0
 800a046:	e7f8      	b.n	800a03a <_calloc_r+0x16>
 800a048:	4621      	mov	r1, r4
 800a04a:	f7fc fe98 	bl	8006d7e <memset>
 800a04e:	e7f4      	b.n	800a03a <_calloc_r+0x16>

0800a050 <rshift>:
 800a050:	6903      	ldr	r3, [r0, #16]
 800a052:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a056:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a05a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a05e:	f100 0414 	add.w	r4, r0, #20
 800a062:	dd45      	ble.n	800a0f0 <rshift+0xa0>
 800a064:	f011 011f 	ands.w	r1, r1, #31
 800a068:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a06c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a070:	d10c      	bne.n	800a08c <rshift+0x3c>
 800a072:	f100 0710 	add.w	r7, r0, #16
 800a076:	4629      	mov	r1, r5
 800a078:	42b1      	cmp	r1, r6
 800a07a:	d334      	bcc.n	800a0e6 <rshift+0x96>
 800a07c:	1a9b      	subs	r3, r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	1eea      	subs	r2, r5, #3
 800a082:	4296      	cmp	r6, r2
 800a084:	bf38      	it	cc
 800a086:	2300      	movcc	r3, #0
 800a088:	4423      	add	r3, r4
 800a08a:	e015      	b.n	800a0b8 <rshift+0x68>
 800a08c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a090:	f1c1 0820 	rsb	r8, r1, #32
 800a094:	40cf      	lsrs	r7, r1
 800a096:	f105 0e04 	add.w	lr, r5, #4
 800a09a:	46a1      	mov	r9, r4
 800a09c:	4576      	cmp	r6, lr
 800a09e:	46f4      	mov	ip, lr
 800a0a0:	d815      	bhi.n	800a0ce <rshift+0x7e>
 800a0a2:	1a9a      	subs	r2, r3, r2
 800a0a4:	0092      	lsls	r2, r2, #2
 800a0a6:	3a04      	subs	r2, #4
 800a0a8:	3501      	adds	r5, #1
 800a0aa:	42ae      	cmp	r6, r5
 800a0ac:	bf38      	it	cc
 800a0ae:	2200      	movcc	r2, #0
 800a0b0:	18a3      	adds	r3, r4, r2
 800a0b2:	50a7      	str	r7, [r4, r2]
 800a0b4:	b107      	cbz	r7, 800a0b8 <rshift+0x68>
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	1b1a      	subs	r2, r3, r4
 800a0ba:	42a3      	cmp	r3, r4
 800a0bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0c0:	bf08      	it	eq
 800a0c2:	2300      	moveq	r3, #0
 800a0c4:	6102      	str	r2, [r0, #16]
 800a0c6:	bf08      	it	eq
 800a0c8:	6143      	streq	r3, [r0, #20]
 800a0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ce:	f8dc c000 	ldr.w	ip, [ip]
 800a0d2:	fa0c fc08 	lsl.w	ip, ip, r8
 800a0d6:	ea4c 0707 	orr.w	r7, ip, r7
 800a0da:	f849 7b04 	str.w	r7, [r9], #4
 800a0de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0e2:	40cf      	lsrs	r7, r1
 800a0e4:	e7da      	b.n	800a09c <rshift+0x4c>
 800a0e6:	f851 cb04 	ldr.w	ip, [r1], #4
 800a0ea:	f847 cf04 	str.w	ip, [r7, #4]!
 800a0ee:	e7c3      	b.n	800a078 <rshift+0x28>
 800a0f0:	4623      	mov	r3, r4
 800a0f2:	e7e1      	b.n	800a0b8 <rshift+0x68>

0800a0f4 <__hexdig_fun>:
 800a0f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a0f8:	2b09      	cmp	r3, #9
 800a0fa:	d802      	bhi.n	800a102 <__hexdig_fun+0xe>
 800a0fc:	3820      	subs	r0, #32
 800a0fe:	b2c0      	uxtb	r0, r0
 800a100:	4770      	bx	lr
 800a102:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a106:	2b05      	cmp	r3, #5
 800a108:	d801      	bhi.n	800a10e <__hexdig_fun+0x1a>
 800a10a:	3847      	subs	r0, #71	; 0x47
 800a10c:	e7f7      	b.n	800a0fe <__hexdig_fun+0xa>
 800a10e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a112:	2b05      	cmp	r3, #5
 800a114:	d801      	bhi.n	800a11a <__hexdig_fun+0x26>
 800a116:	3827      	subs	r0, #39	; 0x27
 800a118:	e7f1      	b.n	800a0fe <__hexdig_fun+0xa>
 800a11a:	2000      	movs	r0, #0
 800a11c:	4770      	bx	lr
	...

0800a120 <__gethex>:
 800a120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a124:	4617      	mov	r7, r2
 800a126:	680a      	ldr	r2, [r1, #0]
 800a128:	b085      	sub	sp, #20
 800a12a:	f102 0b02 	add.w	fp, r2, #2
 800a12e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a132:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a136:	4681      	mov	r9, r0
 800a138:	468a      	mov	sl, r1
 800a13a:	9302      	str	r3, [sp, #8]
 800a13c:	32fe      	adds	r2, #254	; 0xfe
 800a13e:	eb02 030b 	add.w	r3, r2, fp
 800a142:	46d8      	mov	r8, fp
 800a144:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	2830      	cmp	r0, #48	; 0x30
 800a14c:	d0f7      	beq.n	800a13e <__gethex+0x1e>
 800a14e:	f7ff ffd1 	bl	800a0f4 <__hexdig_fun>
 800a152:	4604      	mov	r4, r0
 800a154:	2800      	cmp	r0, #0
 800a156:	d138      	bne.n	800a1ca <__gethex+0xaa>
 800a158:	49a7      	ldr	r1, [pc, #668]	; (800a3f8 <__gethex+0x2d8>)
 800a15a:	2201      	movs	r2, #1
 800a15c:	4640      	mov	r0, r8
 800a15e:	f7fc fe16 	bl	8006d8e <strncmp>
 800a162:	4606      	mov	r6, r0
 800a164:	2800      	cmp	r0, #0
 800a166:	d169      	bne.n	800a23c <__gethex+0x11c>
 800a168:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a16c:	465d      	mov	r5, fp
 800a16e:	f7ff ffc1 	bl	800a0f4 <__hexdig_fun>
 800a172:	2800      	cmp	r0, #0
 800a174:	d064      	beq.n	800a240 <__gethex+0x120>
 800a176:	465a      	mov	r2, fp
 800a178:	7810      	ldrb	r0, [r2, #0]
 800a17a:	2830      	cmp	r0, #48	; 0x30
 800a17c:	4690      	mov	r8, r2
 800a17e:	f102 0201 	add.w	r2, r2, #1
 800a182:	d0f9      	beq.n	800a178 <__gethex+0x58>
 800a184:	f7ff ffb6 	bl	800a0f4 <__hexdig_fun>
 800a188:	2301      	movs	r3, #1
 800a18a:	fab0 f480 	clz	r4, r0
 800a18e:	0964      	lsrs	r4, r4, #5
 800a190:	465e      	mov	r6, fp
 800a192:	9301      	str	r3, [sp, #4]
 800a194:	4642      	mov	r2, r8
 800a196:	4615      	mov	r5, r2
 800a198:	3201      	adds	r2, #1
 800a19a:	7828      	ldrb	r0, [r5, #0]
 800a19c:	f7ff ffaa 	bl	800a0f4 <__hexdig_fun>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d1f8      	bne.n	800a196 <__gethex+0x76>
 800a1a4:	4994      	ldr	r1, [pc, #592]	; (800a3f8 <__gethex+0x2d8>)
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f7fc fdf0 	bl	8006d8e <strncmp>
 800a1ae:	b978      	cbnz	r0, 800a1d0 <__gethex+0xb0>
 800a1b0:	b946      	cbnz	r6, 800a1c4 <__gethex+0xa4>
 800a1b2:	1c6e      	adds	r6, r5, #1
 800a1b4:	4632      	mov	r2, r6
 800a1b6:	4615      	mov	r5, r2
 800a1b8:	3201      	adds	r2, #1
 800a1ba:	7828      	ldrb	r0, [r5, #0]
 800a1bc:	f7ff ff9a 	bl	800a0f4 <__hexdig_fun>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d1f8      	bne.n	800a1b6 <__gethex+0x96>
 800a1c4:	1b73      	subs	r3, r6, r5
 800a1c6:	009e      	lsls	r6, r3, #2
 800a1c8:	e004      	b.n	800a1d4 <__gethex+0xb4>
 800a1ca:	2400      	movs	r4, #0
 800a1cc:	4626      	mov	r6, r4
 800a1ce:	e7e1      	b.n	800a194 <__gethex+0x74>
 800a1d0:	2e00      	cmp	r6, #0
 800a1d2:	d1f7      	bne.n	800a1c4 <__gethex+0xa4>
 800a1d4:	782b      	ldrb	r3, [r5, #0]
 800a1d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a1da:	2b50      	cmp	r3, #80	; 0x50
 800a1dc:	d13d      	bne.n	800a25a <__gethex+0x13a>
 800a1de:	786b      	ldrb	r3, [r5, #1]
 800a1e0:	2b2b      	cmp	r3, #43	; 0x2b
 800a1e2:	d02f      	beq.n	800a244 <__gethex+0x124>
 800a1e4:	2b2d      	cmp	r3, #45	; 0x2d
 800a1e6:	d031      	beq.n	800a24c <__gethex+0x12c>
 800a1e8:	1c69      	adds	r1, r5, #1
 800a1ea:	f04f 0b00 	mov.w	fp, #0
 800a1ee:	7808      	ldrb	r0, [r1, #0]
 800a1f0:	f7ff ff80 	bl	800a0f4 <__hexdig_fun>
 800a1f4:	1e42      	subs	r2, r0, #1
 800a1f6:	b2d2      	uxtb	r2, r2
 800a1f8:	2a18      	cmp	r2, #24
 800a1fa:	d82e      	bhi.n	800a25a <__gethex+0x13a>
 800a1fc:	f1a0 0210 	sub.w	r2, r0, #16
 800a200:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a204:	f7ff ff76 	bl	800a0f4 <__hexdig_fun>
 800a208:	f100 3cff 	add.w	ip, r0, #4294967295
 800a20c:	fa5f fc8c 	uxtb.w	ip, ip
 800a210:	f1bc 0f18 	cmp.w	ip, #24
 800a214:	d91d      	bls.n	800a252 <__gethex+0x132>
 800a216:	f1bb 0f00 	cmp.w	fp, #0
 800a21a:	d000      	beq.n	800a21e <__gethex+0xfe>
 800a21c:	4252      	negs	r2, r2
 800a21e:	4416      	add	r6, r2
 800a220:	f8ca 1000 	str.w	r1, [sl]
 800a224:	b1dc      	cbz	r4, 800a25e <__gethex+0x13e>
 800a226:	9b01      	ldr	r3, [sp, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	bf14      	ite	ne
 800a22c:	f04f 0800 	movne.w	r8, #0
 800a230:	f04f 0806 	moveq.w	r8, #6
 800a234:	4640      	mov	r0, r8
 800a236:	b005      	add	sp, #20
 800a238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23c:	4645      	mov	r5, r8
 800a23e:	4626      	mov	r6, r4
 800a240:	2401      	movs	r4, #1
 800a242:	e7c7      	b.n	800a1d4 <__gethex+0xb4>
 800a244:	f04f 0b00 	mov.w	fp, #0
 800a248:	1ca9      	adds	r1, r5, #2
 800a24a:	e7d0      	b.n	800a1ee <__gethex+0xce>
 800a24c:	f04f 0b01 	mov.w	fp, #1
 800a250:	e7fa      	b.n	800a248 <__gethex+0x128>
 800a252:	230a      	movs	r3, #10
 800a254:	fb03 0002 	mla	r0, r3, r2, r0
 800a258:	e7d0      	b.n	800a1fc <__gethex+0xdc>
 800a25a:	4629      	mov	r1, r5
 800a25c:	e7e0      	b.n	800a220 <__gethex+0x100>
 800a25e:	eba5 0308 	sub.w	r3, r5, r8
 800a262:	3b01      	subs	r3, #1
 800a264:	4621      	mov	r1, r4
 800a266:	2b07      	cmp	r3, #7
 800a268:	dc0a      	bgt.n	800a280 <__gethex+0x160>
 800a26a:	4648      	mov	r0, r9
 800a26c:	f7fd fdaa 	bl	8007dc4 <_Balloc>
 800a270:	4604      	mov	r4, r0
 800a272:	b940      	cbnz	r0, 800a286 <__gethex+0x166>
 800a274:	4b61      	ldr	r3, [pc, #388]	; (800a3fc <__gethex+0x2dc>)
 800a276:	4602      	mov	r2, r0
 800a278:	21e4      	movs	r1, #228	; 0xe4
 800a27a:	4861      	ldr	r0, [pc, #388]	; (800a400 <__gethex+0x2e0>)
 800a27c:	f7ff feb4 	bl	8009fe8 <__assert_func>
 800a280:	3101      	adds	r1, #1
 800a282:	105b      	asrs	r3, r3, #1
 800a284:	e7ef      	b.n	800a266 <__gethex+0x146>
 800a286:	f100 0a14 	add.w	sl, r0, #20
 800a28a:	2300      	movs	r3, #0
 800a28c:	495a      	ldr	r1, [pc, #360]	; (800a3f8 <__gethex+0x2d8>)
 800a28e:	f8cd a004 	str.w	sl, [sp, #4]
 800a292:	469b      	mov	fp, r3
 800a294:	45a8      	cmp	r8, r5
 800a296:	d342      	bcc.n	800a31e <__gethex+0x1fe>
 800a298:	9801      	ldr	r0, [sp, #4]
 800a29a:	f840 bb04 	str.w	fp, [r0], #4
 800a29e:	eba0 000a 	sub.w	r0, r0, sl
 800a2a2:	1080      	asrs	r0, r0, #2
 800a2a4:	6120      	str	r0, [r4, #16]
 800a2a6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a2aa:	4658      	mov	r0, fp
 800a2ac:	f7fd fe7c 	bl	8007fa8 <__hi0bits>
 800a2b0:	683d      	ldr	r5, [r7, #0]
 800a2b2:	eba8 0000 	sub.w	r0, r8, r0
 800a2b6:	42a8      	cmp	r0, r5
 800a2b8:	dd59      	ble.n	800a36e <__gethex+0x24e>
 800a2ba:	eba0 0805 	sub.w	r8, r0, r5
 800a2be:	4641      	mov	r1, r8
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f7fe fa0b 	bl	80086dc <__any_on>
 800a2c6:	4683      	mov	fp, r0
 800a2c8:	b1b8      	cbz	r0, 800a2fa <__gethex+0x1da>
 800a2ca:	f108 33ff 	add.w	r3, r8, #4294967295
 800a2ce:	1159      	asrs	r1, r3, #5
 800a2d0:	f003 021f 	and.w	r2, r3, #31
 800a2d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a2d8:	f04f 0b01 	mov.w	fp, #1
 800a2dc:	fa0b f202 	lsl.w	r2, fp, r2
 800a2e0:	420a      	tst	r2, r1
 800a2e2:	d00a      	beq.n	800a2fa <__gethex+0x1da>
 800a2e4:	455b      	cmp	r3, fp
 800a2e6:	dd06      	ble.n	800a2f6 <__gethex+0x1d6>
 800a2e8:	f1a8 0102 	sub.w	r1, r8, #2
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f7fe f9f5 	bl	80086dc <__any_on>
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d138      	bne.n	800a368 <__gethex+0x248>
 800a2f6:	f04f 0b02 	mov.w	fp, #2
 800a2fa:	4641      	mov	r1, r8
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f7ff fea7 	bl	800a050 <rshift>
 800a302:	4446      	add	r6, r8
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	42b3      	cmp	r3, r6
 800a308:	da41      	bge.n	800a38e <__gethex+0x26e>
 800a30a:	4621      	mov	r1, r4
 800a30c:	4648      	mov	r0, r9
 800a30e:	f7fd fd99 	bl	8007e44 <_Bfree>
 800a312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a314:	2300      	movs	r3, #0
 800a316:	6013      	str	r3, [r2, #0]
 800a318:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a31c:	e78a      	b.n	800a234 <__gethex+0x114>
 800a31e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a322:	2a2e      	cmp	r2, #46	; 0x2e
 800a324:	d014      	beq.n	800a350 <__gethex+0x230>
 800a326:	2b20      	cmp	r3, #32
 800a328:	d106      	bne.n	800a338 <__gethex+0x218>
 800a32a:	9b01      	ldr	r3, [sp, #4]
 800a32c:	f843 bb04 	str.w	fp, [r3], #4
 800a330:	f04f 0b00 	mov.w	fp, #0
 800a334:	9301      	str	r3, [sp, #4]
 800a336:	465b      	mov	r3, fp
 800a338:	7828      	ldrb	r0, [r5, #0]
 800a33a:	9303      	str	r3, [sp, #12]
 800a33c:	f7ff feda 	bl	800a0f4 <__hexdig_fun>
 800a340:	9b03      	ldr	r3, [sp, #12]
 800a342:	f000 000f 	and.w	r0, r0, #15
 800a346:	4098      	lsls	r0, r3
 800a348:	ea4b 0b00 	orr.w	fp, fp, r0
 800a34c:	3304      	adds	r3, #4
 800a34e:	e7a1      	b.n	800a294 <__gethex+0x174>
 800a350:	45a8      	cmp	r8, r5
 800a352:	d8e8      	bhi.n	800a326 <__gethex+0x206>
 800a354:	2201      	movs	r2, #1
 800a356:	4628      	mov	r0, r5
 800a358:	9303      	str	r3, [sp, #12]
 800a35a:	f7fc fd18 	bl	8006d8e <strncmp>
 800a35e:	4926      	ldr	r1, [pc, #152]	; (800a3f8 <__gethex+0x2d8>)
 800a360:	9b03      	ldr	r3, [sp, #12]
 800a362:	2800      	cmp	r0, #0
 800a364:	d1df      	bne.n	800a326 <__gethex+0x206>
 800a366:	e795      	b.n	800a294 <__gethex+0x174>
 800a368:	f04f 0b03 	mov.w	fp, #3
 800a36c:	e7c5      	b.n	800a2fa <__gethex+0x1da>
 800a36e:	da0b      	bge.n	800a388 <__gethex+0x268>
 800a370:	eba5 0800 	sub.w	r8, r5, r0
 800a374:	4621      	mov	r1, r4
 800a376:	4642      	mov	r2, r8
 800a378:	4648      	mov	r0, r9
 800a37a:	f7fd ff7d 	bl	8008278 <__lshift>
 800a37e:	eba6 0608 	sub.w	r6, r6, r8
 800a382:	4604      	mov	r4, r0
 800a384:	f100 0a14 	add.w	sl, r0, #20
 800a388:	f04f 0b00 	mov.w	fp, #0
 800a38c:	e7ba      	b.n	800a304 <__gethex+0x1e4>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	42b3      	cmp	r3, r6
 800a392:	dd73      	ble.n	800a47c <__gethex+0x35c>
 800a394:	1b9e      	subs	r6, r3, r6
 800a396:	42b5      	cmp	r5, r6
 800a398:	dc34      	bgt.n	800a404 <__gethex+0x2e4>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d023      	beq.n	800a3e8 <__gethex+0x2c8>
 800a3a0:	2b03      	cmp	r3, #3
 800a3a2:	d025      	beq.n	800a3f0 <__gethex+0x2d0>
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d115      	bne.n	800a3d4 <__gethex+0x2b4>
 800a3a8:	42b5      	cmp	r5, r6
 800a3aa:	d113      	bne.n	800a3d4 <__gethex+0x2b4>
 800a3ac:	2d01      	cmp	r5, #1
 800a3ae:	d10b      	bne.n	800a3c8 <__gethex+0x2a8>
 800a3b0:	9a02      	ldr	r2, [sp, #8]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6013      	str	r3, [r2, #0]
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	6123      	str	r3, [r4, #16]
 800a3ba:	f8ca 3000 	str.w	r3, [sl]
 800a3be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3c0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a3c4:	601c      	str	r4, [r3, #0]
 800a3c6:	e735      	b.n	800a234 <__gethex+0x114>
 800a3c8:	1e69      	subs	r1, r5, #1
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f7fe f986 	bl	80086dc <__any_on>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d1ed      	bne.n	800a3b0 <__gethex+0x290>
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	4648      	mov	r0, r9
 800a3d8:	f7fd fd34 	bl	8007e44 <_Bfree>
 800a3dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3de:	2300      	movs	r3, #0
 800a3e0:	6013      	str	r3, [r2, #0]
 800a3e2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a3e6:	e725      	b.n	800a234 <__gethex+0x114>
 800a3e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1f2      	bne.n	800a3d4 <__gethex+0x2b4>
 800a3ee:	e7df      	b.n	800a3b0 <__gethex+0x290>
 800a3f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1dc      	bne.n	800a3b0 <__gethex+0x290>
 800a3f6:	e7ed      	b.n	800a3d4 <__gethex+0x2b4>
 800a3f8:	0800b1cc 	.word	0x0800b1cc
 800a3fc:	0800b05f 	.word	0x0800b05f
 800a400:	0800b391 	.word	0x0800b391
 800a404:	f106 38ff 	add.w	r8, r6, #4294967295
 800a408:	f1bb 0f00 	cmp.w	fp, #0
 800a40c:	d133      	bne.n	800a476 <__gethex+0x356>
 800a40e:	f1b8 0f00 	cmp.w	r8, #0
 800a412:	d004      	beq.n	800a41e <__gethex+0x2fe>
 800a414:	4641      	mov	r1, r8
 800a416:	4620      	mov	r0, r4
 800a418:	f7fe f960 	bl	80086dc <__any_on>
 800a41c:	4683      	mov	fp, r0
 800a41e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a422:	2301      	movs	r3, #1
 800a424:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a428:	f008 081f 	and.w	r8, r8, #31
 800a42c:	fa03 f308 	lsl.w	r3, r3, r8
 800a430:	4213      	tst	r3, r2
 800a432:	4631      	mov	r1, r6
 800a434:	4620      	mov	r0, r4
 800a436:	bf18      	it	ne
 800a438:	f04b 0b02 	orrne.w	fp, fp, #2
 800a43c:	1bad      	subs	r5, r5, r6
 800a43e:	f7ff fe07 	bl	800a050 <rshift>
 800a442:	687e      	ldr	r6, [r7, #4]
 800a444:	f04f 0802 	mov.w	r8, #2
 800a448:	f1bb 0f00 	cmp.w	fp, #0
 800a44c:	d04a      	beq.n	800a4e4 <__gethex+0x3c4>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2b02      	cmp	r3, #2
 800a452:	d016      	beq.n	800a482 <__gethex+0x362>
 800a454:	2b03      	cmp	r3, #3
 800a456:	d018      	beq.n	800a48a <__gethex+0x36a>
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d109      	bne.n	800a470 <__gethex+0x350>
 800a45c:	f01b 0f02 	tst.w	fp, #2
 800a460:	d006      	beq.n	800a470 <__gethex+0x350>
 800a462:	f8da 3000 	ldr.w	r3, [sl]
 800a466:	ea4b 0b03 	orr.w	fp, fp, r3
 800a46a:	f01b 0f01 	tst.w	fp, #1
 800a46e:	d10f      	bne.n	800a490 <__gethex+0x370>
 800a470:	f048 0810 	orr.w	r8, r8, #16
 800a474:	e036      	b.n	800a4e4 <__gethex+0x3c4>
 800a476:	f04f 0b01 	mov.w	fp, #1
 800a47a:	e7d0      	b.n	800a41e <__gethex+0x2fe>
 800a47c:	f04f 0801 	mov.w	r8, #1
 800a480:	e7e2      	b.n	800a448 <__gethex+0x328>
 800a482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a484:	f1c3 0301 	rsb	r3, r3, #1
 800a488:	930f      	str	r3, [sp, #60]	; 0x3c
 800a48a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d0ef      	beq.n	800a470 <__gethex+0x350>
 800a490:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a494:	f104 0214 	add.w	r2, r4, #20
 800a498:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a49c:	9301      	str	r3, [sp, #4]
 800a49e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	4694      	mov	ip, r2
 800a4a6:	f852 1b04 	ldr.w	r1, [r2], #4
 800a4aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a4ae:	d01e      	beq.n	800a4ee <__gethex+0x3ce>
 800a4b0:	3101      	adds	r1, #1
 800a4b2:	f8cc 1000 	str.w	r1, [ip]
 800a4b6:	f1b8 0f02 	cmp.w	r8, #2
 800a4ba:	f104 0214 	add.w	r2, r4, #20
 800a4be:	d13d      	bne.n	800a53c <__gethex+0x41c>
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	42ab      	cmp	r3, r5
 800a4c6:	d10b      	bne.n	800a4e0 <__gethex+0x3c0>
 800a4c8:	1169      	asrs	r1, r5, #5
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	f005 051f 	and.w	r5, r5, #31
 800a4d0:	fa03 f505 	lsl.w	r5, r3, r5
 800a4d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4d8:	421d      	tst	r5, r3
 800a4da:	bf18      	it	ne
 800a4dc:	f04f 0801 	movne.w	r8, #1
 800a4e0:	f048 0820 	orr.w	r8, r8, #32
 800a4e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4e6:	601c      	str	r4, [r3, #0]
 800a4e8:	9b02      	ldr	r3, [sp, #8]
 800a4ea:	601e      	str	r6, [r3, #0]
 800a4ec:	e6a2      	b.n	800a234 <__gethex+0x114>
 800a4ee:	4290      	cmp	r0, r2
 800a4f0:	f842 3c04 	str.w	r3, [r2, #-4]
 800a4f4:	d8d6      	bhi.n	800a4a4 <__gethex+0x384>
 800a4f6:	68a2      	ldr	r2, [r4, #8]
 800a4f8:	4593      	cmp	fp, r2
 800a4fa:	db17      	blt.n	800a52c <__gethex+0x40c>
 800a4fc:	6861      	ldr	r1, [r4, #4]
 800a4fe:	4648      	mov	r0, r9
 800a500:	3101      	adds	r1, #1
 800a502:	f7fd fc5f 	bl	8007dc4 <_Balloc>
 800a506:	4682      	mov	sl, r0
 800a508:	b918      	cbnz	r0, 800a512 <__gethex+0x3f2>
 800a50a:	4b1b      	ldr	r3, [pc, #108]	; (800a578 <__gethex+0x458>)
 800a50c:	4602      	mov	r2, r0
 800a50e:	2184      	movs	r1, #132	; 0x84
 800a510:	e6b3      	b.n	800a27a <__gethex+0x15a>
 800a512:	6922      	ldr	r2, [r4, #16]
 800a514:	3202      	adds	r2, #2
 800a516:	f104 010c 	add.w	r1, r4, #12
 800a51a:	0092      	lsls	r2, r2, #2
 800a51c:	300c      	adds	r0, #12
 800a51e:	f7fc fcc0 	bl	8006ea2 <memcpy>
 800a522:	4621      	mov	r1, r4
 800a524:	4648      	mov	r0, r9
 800a526:	f7fd fc8d 	bl	8007e44 <_Bfree>
 800a52a:	4654      	mov	r4, sl
 800a52c:	6922      	ldr	r2, [r4, #16]
 800a52e:	1c51      	adds	r1, r2, #1
 800a530:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a534:	6121      	str	r1, [r4, #16]
 800a536:	2101      	movs	r1, #1
 800a538:	6151      	str	r1, [r2, #20]
 800a53a:	e7bc      	b.n	800a4b6 <__gethex+0x396>
 800a53c:	6921      	ldr	r1, [r4, #16]
 800a53e:	4559      	cmp	r1, fp
 800a540:	dd0b      	ble.n	800a55a <__gethex+0x43a>
 800a542:	2101      	movs	r1, #1
 800a544:	4620      	mov	r0, r4
 800a546:	f7ff fd83 	bl	800a050 <rshift>
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	3601      	adds	r6, #1
 800a54e:	42b3      	cmp	r3, r6
 800a550:	f6ff aedb 	blt.w	800a30a <__gethex+0x1ea>
 800a554:	f04f 0801 	mov.w	r8, #1
 800a558:	e7c2      	b.n	800a4e0 <__gethex+0x3c0>
 800a55a:	f015 051f 	ands.w	r5, r5, #31
 800a55e:	d0f9      	beq.n	800a554 <__gethex+0x434>
 800a560:	9b01      	ldr	r3, [sp, #4]
 800a562:	441a      	add	r2, r3
 800a564:	f1c5 0520 	rsb	r5, r5, #32
 800a568:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a56c:	f7fd fd1c 	bl	8007fa8 <__hi0bits>
 800a570:	42a8      	cmp	r0, r5
 800a572:	dbe6      	blt.n	800a542 <__gethex+0x422>
 800a574:	e7ee      	b.n	800a554 <__gethex+0x434>
 800a576:	bf00      	nop
 800a578:	0800b05f 	.word	0x0800b05f

0800a57c <L_shift>:
 800a57c:	f1c2 0208 	rsb	r2, r2, #8
 800a580:	0092      	lsls	r2, r2, #2
 800a582:	b570      	push	{r4, r5, r6, lr}
 800a584:	f1c2 0620 	rsb	r6, r2, #32
 800a588:	6843      	ldr	r3, [r0, #4]
 800a58a:	6804      	ldr	r4, [r0, #0]
 800a58c:	fa03 f506 	lsl.w	r5, r3, r6
 800a590:	432c      	orrs	r4, r5
 800a592:	40d3      	lsrs	r3, r2
 800a594:	6004      	str	r4, [r0, #0]
 800a596:	f840 3f04 	str.w	r3, [r0, #4]!
 800a59a:	4288      	cmp	r0, r1
 800a59c:	d3f4      	bcc.n	800a588 <L_shift+0xc>
 800a59e:	bd70      	pop	{r4, r5, r6, pc}

0800a5a0 <__match>:
 800a5a0:	b530      	push	{r4, r5, lr}
 800a5a2:	6803      	ldr	r3, [r0, #0]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5aa:	b914      	cbnz	r4, 800a5b2 <__match+0x12>
 800a5ac:	6003      	str	r3, [r0, #0]
 800a5ae:	2001      	movs	r0, #1
 800a5b0:	bd30      	pop	{r4, r5, pc}
 800a5b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a5ba:	2d19      	cmp	r5, #25
 800a5bc:	bf98      	it	ls
 800a5be:	3220      	addls	r2, #32
 800a5c0:	42a2      	cmp	r2, r4
 800a5c2:	d0f0      	beq.n	800a5a6 <__match+0x6>
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	e7f3      	b.n	800a5b0 <__match+0x10>

0800a5c8 <__hexnan>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	680b      	ldr	r3, [r1, #0]
 800a5ce:	6801      	ldr	r1, [r0, #0]
 800a5d0:	115e      	asrs	r6, r3, #5
 800a5d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a5d6:	f013 031f 	ands.w	r3, r3, #31
 800a5da:	b087      	sub	sp, #28
 800a5dc:	bf18      	it	ne
 800a5de:	3604      	addne	r6, #4
 800a5e0:	2500      	movs	r5, #0
 800a5e2:	1f37      	subs	r7, r6, #4
 800a5e4:	4682      	mov	sl, r0
 800a5e6:	4690      	mov	r8, r2
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800a5ee:	46b9      	mov	r9, r7
 800a5f0:	463c      	mov	r4, r7
 800a5f2:	9502      	str	r5, [sp, #8]
 800a5f4:	46ab      	mov	fp, r5
 800a5f6:	784a      	ldrb	r2, [r1, #1]
 800a5f8:	1c4b      	adds	r3, r1, #1
 800a5fa:	9303      	str	r3, [sp, #12]
 800a5fc:	b342      	cbz	r2, 800a650 <__hexnan+0x88>
 800a5fe:	4610      	mov	r0, r2
 800a600:	9105      	str	r1, [sp, #20]
 800a602:	9204      	str	r2, [sp, #16]
 800a604:	f7ff fd76 	bl	800a0f4 <__hexdig_fun>
 800a608:	2800      	cmp	r0, #0
 800a60a:	d14f      	bne.n	800a6ac <__hexnan+0xe4>
 800a60c:	9a04      	ldr	r2, [sp, #16]
 800a60e:	9905      	ldr	r1, [sp, #20]
 800a610:	2a20      	cmp	r2, #32
 800a612:	d818      	bhi.n	800a646 <__hexnan+0x7e>
 800a614:	9b02      	ldr	r3, [sp, #8]
 800a616:	459b      	cmp	fp, r3
 800a618:	dd13      	ble.n	800a642 <__hexnan+0x7a>
 800a61a:	454c      	cmp	r4, r9
 800a61c:	d206      	bcs.n	800a62c <__hexnan+0x64>
 800a61e:	2d07      	cmp	r5, #7
 800a620:	dc04      	bgt.n	800a62c <__hexnan+0x64>
 800a622:	462a      	mov	r2, r5
 800a624:	4649      	mov	r1, r9
 800a626:	4620      	mov	r0, r4
 800a628:	f7ff ffa8 	bl	800a57c <L_shift>
 800a62c:	4544      	cmp	r4, r8
 800a62e:	d950      	bls.n	800a6d2 <__hexnan+0x10a>
 800a630:	2300      	movs	r3, #0
 800a632:	f1a4 0904 	sub.w	r9, r4, #4
 800a636:	f844 3c04 	str.w	r3, [r4, #-4]
 800a63a:	f8cd b008 	str.w	fp, [sp, #8]
 800a63e:	464c      	mov	r4, r9
 800a640:	461d      	mov	r5, r3
 800a642:	9903      	ldr	r1, [sp, #12]
 800a644:	e7d7      	b.n	800a5f6 <__hexnan+0x2e>
 800a646:	2a29      	cmp	r2, #41	; 0x29
 800a648:	d155      	bne.n	800a6f6 <__hexnan+0x12e>
 800a64a:	3102      	adds	r1, #2
 800a64c:	f8ca 1000 	str.w	r1, [sl]
 800a650:	f1bb 0f00 	cmp.w	fp, #0
 800a654:	d04f      	beq.n	800a6f6 <__hexnan+0x12e>
 800a656:	454c      	cmp	r4, r9
 800a658:	d206      	bcs.n	800a668 <__hexnan+0xa0>
 800a65a:	2d07      	cmp	r5, #7
 800a65c:	dc04      	bgt.n	800a668 <__hexnan+0xa0>
 800a65e:	462a      	mov	r2, r5
 800a660:	4649      	mov	r1, r9
 800a662:	4620      	mov	r0, r4
 800a664:	f7ff ff8a 	bl	800a57c <L_shift>
 800a668:	4544      	cmp	r4, r8
 800a66a:	d934      	bls.n	800a6d6 <__hexnan+0x10e>
 800a66c:	f1a8 0204 	sub.w	r2, r8, #4
 800a670:	4623      	mov	r3, r4
 800a672:	f853 1b04 	ldr.w	r1, [r3], #4
 800a676:	f842 1f04 	str.w	r1, [r2, #4]!
 800a67a:	429f      	cmp	r7, r3
 800a67c:	d2f9      	bcs.n	800a672 <__hexnan+0xaa>
 800a67e:	1b3b      	subs	r3, r7, r4
 800a680:	f023 0303 	bic.w	r3, r3, #3
 800a684:	3304      	adds	r3, #4
 800a686:	3e03      	subs	r6, #3
 800a688:	3401      	adds	r4, #1
 800a68a:	42a6      	cmp	r6, r4
 800a68c:	bf38      	it	cc
 800a68e:	2304      	movcc	r3, #4
 800a690:	4443      	add	r3, r8
 800a692:	2200      	movs	r2, #0
 800a694:	f843 2b04 	str.w	r2, [r3], #4
 800a698:	429f      	cmp	r7, r3
 800a69a:	d2fb      	bcs.n	800a694 <__hexnan+0xcc>
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	b91b      	cbnz	r3, 800a6a8 <__hexnan+0xe0>
 800a6a0:	4547      	cmp	r7, r8
 800a6a2:	d126      	bne.n	800a6f2 <__hexnan+0x12a>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	603b      	str	r3, [r7, #0]
 800a6a8:	2005      	movs	r0, #5
 800a6aa:	e025      	b.n	800a6f8 <__hexnan+0x130>
 800a6ac:	3501      	adds	r5, #1
 800a6ae:	2d08      	cmp	r5, #8
 800a6b0:	f10b 0b01 	add.w	fp, fp, #1
 800a6b4:	dd06      	ble.n	800a6c4 <__hexnan+0xfc>
 800a6b6:	4544      	cmp	r4, r8
 800a6b8:	d9c3      	bls.n	800a642 <__hexnan+0x7a>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6c0:	2501      	movs	r5, #1
 800a6c2:	3c04      	subs	r4, #4
 800a6c4:	6822      	ldr	r2, [r4, #0]
 800a6c6:	f000 000f 	and.w	r0, r0, #15
 800a6ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a6ce:	6020      	str	r0, [r4, #0]
 800a6d0:	e7b7      	b.n	800a642 <__hexnan+0x7a>
 800a6d2:	2508      	movs	r5, #8
 800a6d4:	e7b5      	b.n	800a642 <__hexnan+0x7a>
 800a6d6:	9b01      	ldr	r3, [sp, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d0df      	beq.n	800a69c <__hexnan+0xd4>
 800a6dc:	f1c3 0320 	rsb	r3, r3, #32
 800a6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e4:	40da      	lsrs	r2, r3
 800a6e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	f846 3c04 	str.w	r3, [r6, #-4]
 800a6f0:	e7d4      	b.n	800a69c <__hexnan+0xd4>
 800a6f2:	3f04      	subs	r7, #4
 800a6f4:	e7d2      	b.n	800a69c <__hexnan+0xd4>
 800a6f6:	2004      	movs	r0, #4
 800a6f8:	b007      	add	sp, #28
 800a6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6fe <__ascii_mbtowc>:
 800a6fe:	b082      	sub	sp, #8
 800a700:	b901      	cbnz	r1, 800a704 <__ascii_mbtowc+0x6>
 800a702:	a901      	add	r1, sp, #4
 800a704:	b142      	cbz	r2, 800a718 <__ascii_mbtowc+0x1a>
 800a706:	b14b      	cbz	r3, 800a71c <__ascii_mbtowc+0x1e>
 800a708:	7813      	ldrb	r3, [r2, #0]
 800a70a:	600b      	str	r3, [r1, #0]
 800a70c:	7812      	ldrb	r2, [r2, #0]
 800a70e:	1e10      	subs	r0, r2, #0
 800a710:	bf18      	it	ne
 800a712:	2001      	movne	r0, #1
 800a714:	b002      	add	sp, #8
 800a716:	4770      	bx	lr
 800a718:	4610      	mov	r0, r2
 800a71a:	e7fb      	b.n	800a714 <__ascii_mbtowc+0x16>
 800a71c:	f06f 0001 	mvn.w	r0, #1
 800a720:	e7f8      	b.n	800a714 <__ascii_mbtowc+0x16>

0800a722 <_realloc_r>:
 800a722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a726:	4680      	mov	r8, r0
 800a728:	4614      	mov	r4, r2
 800a72a:	460e      	mov	r6, r1
 800a72c:	b921      	cbnz	r1, 800a738 <_realloc_r+0x16>
 800a72e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a732:	4611      	mov	r1, r2
 800a734:	f7fd baba 	b.w	8007cac <_malloc_r>
 800a738:	b92a      	cbnz	r2, 800a746 <_realloc_r+0x24>
 800a73a:	f7fd fa43 	bl	8007bc4 <_free_r>
 800a73e:	4625      	mov	r5, r4
 800a740:	4628      	mov	r0, r5
 800a742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a746:	f000 f8b6 	bl	800a8b6 <_malloc_usable_size_r>
 800a74a:	4284      	cmp	r4, r0
 800a74c:	4607      	mov	r7, r0
 800a74e:	d802      	bhi.n	800a756 <_realloc_r+0x34>
 800a750:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a754:	d812      	bhi.n	800a77c <_realloc_r+0x5a>
 800a756:	4621      	mov	r1, r4
 800a758:	4640      	mov	r0, r8
 800a75a:	f7fd faa7 	bl	8007cac <_malloc_r>
 800a75e:	4605      	mov	r5, r0
 800a760:	2800      	cmp	r0, #0
 800a762:	d0ed      	beq.n	800a740 <_realloc_r+0x1e>
 800a764:	42bc      	cmp	r4, r7
 800a766:	4622      	mov	r2, r4
 800a768:	4631      	mov	r1, r6
 800a76a:	bf28      	it	cs
 800a76c:	463a      	movcs	r2, r7
 800a76e:	f7fc fb98 	bl	8006ea2 <memcpy>
 800a772:	4631      	mov	r1, r6
 800a774:	4640      	mov	r0, r8
 800a776:	f7fd fa25 	bl	8007bc4 <_free_r>
 800a77a:	e7e1      	b.n	800a740 <_realloc_r+0x1e>
 800a77c:	4635      	mov	r5, r6
 800a77e:	e7df      	b.n	800a740 <_realloc_r+0x1e>

0800a780 <_strtoul_l.constprop.0>:
 800a780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a784:	4f36      	ldr	r7, [pc, #216]	; (800a860 <_strtoul_l.constprop.0+0xe0>)
 800a786:	4686      	mov	lr, r0
 800a788:	460d      	mov	r5, r1
 800a78a:	4628      	mov	r0, r5
 800a78c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a790:	5d3e      	ldrb	r6, [r7, r4]
 800a792:	f016 0608 	ands.w	r6, r6, #8
 800a796:	d1f8      	bne.n	800a78a <_strtoul_l.constprop.0+0xa>
 800a798:	2c2d      	cmp	r4, #45	; 0x2d
 800a79a:	d130      	bne.n	800a7fe <_strtoul_l.constprop.0+0x7e>
 800a79c:	782c      	ldrb	r4, [r5, #0]
 800a79e:	2601      	movs	r6, #1
 800a7a0:	1c85      	adds	r5, r0, #2
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d057      	beq.n	800a856 <_strtoul_l.constprop.0+0xd6>
 800a7a6:	2b10      	cmp	r3, #16
 800a7a8:	d109      	bne.n	800a7be <_strtoul_l.constprop.0+0x3e>
 800a7aa:	2c30      	cmp	r4, #48	; 0x30
 800a7ac:	d107      	bne.n	800a7be <_strtoul_l.constprop.0+0x3e>
 800a7ae:	7828      	ldrb	r0, [r5, #0]
 800a7b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a7b4:	2858      	cmp	r0, #88	; 0x58
 800a7b6:	d149      	bne.n	800a84c <_strtoul_l.constprop.0+0xcc>
 800a7b8:	786c      	ldrb	r4, [r5, #1]
 800a7ba:	2310      	movs	r3, #16
 800a7bc:	3502      	adds	r5, #2
 800a7be:	f04f 38ff 	mov.w	r8, #4294967295
 800a7c2:	2700      	movs	r7, #0
 800a7c4:	fbb8 f8f3 	udiv	r8, r8, r3
 800a7c8:	fb03 f908 	mul.w	r9, r3, r8
 800a7cc:	ea6f 0909 	mvn.w	r9, r9
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a7d6:	f1bc 0f09 	cmp.w	ip, #9
 800a7da:	d815      	bhi.n	800a808 <_strtoul_l.constprop.0+0x88>
 800a7dc:	4664      	mov	r4, ip
 800a7de:	42a3      	cmp	r3, r4
 800a7e0:	dd23      	ble.n	800a82a <_strtoul_l.constprop.0+0xaa>
 800a7e2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a7e6:	d007      	beq.n	800a7f8 <_strtoul_l.constprop.0+0x78>
 800a7e8:	4580      	cmp	r8, r0
 800a7ea:	d31b      	bcc.n	800a824 <_strtoul_l.constprop.0+0xa4>
 800a7ec:	d101      	bne.n	800a7f2 <_strtoul_l.constprop.0+0x72>
 800a7ee:	45a1      	cmp	r9, r4
 800a7f0:	db18      	blt.n	800a824 <_strtoul_l.constprop.0+0xa4>
 800a7f2:	fb00 4003 	mla	r0, r0, r3, r4
 800a7f6:	2701      	movs	r7, #1
 800a7f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7fc:	e7e9      	b.n	800a7d2 <_strtoul_l.constprop.0+0x52>
 800a7fe:	2c2b      	cmp	r4, #43	; 0x2b
 800a800:	bf04      	itt	eq
 800a802:	782c      	ldrbeq	r4, [r5, #0]
 800a804:	1c85      	addeq	r5, r0, #2
 800a806:	e7cc      	b.n	800a7a2 <_strtoul_l.constprop.0+0x22>
 800a808:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a80c:	f1bc 0f19 	cmp.w	ip, #25
 800a810:	d801      	bhi.n	800a816 <_strtoul_l.constprop.0+0x96>
 800a812:	3c37      	subs	r4, #55	; 0x37
 800a814:	e7e3      	b.n	800a7de <_strtoul_l.constprop.0+0x5e>
 800a816:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a81a:	f1bc 0f19 	cmp.w	ip, #25
 800a81e:	d804      	bhi.n	800a82a <_strtoul_l.constprop.0+0xaa>
 800a820:	3c57      	subs	r4, #87	; 0x57
 800a822:	e7dc      	b.n	800a7de <_strtoul_l.constprop.0+0x5e>
 800a824:	f04f 37ff 	mov.w	r7, #4294967295
 800a828:	e7e6      	b.n	800a7f8 <_strtoul_l.constprop.0+0x78>
 800a82a:	1c7b      	adds	r3, r7, #1
 800a82c:	d106      	bne.n	800a83c <_strtoul_l.constprop.0+0xbc>
 800a82e:	2322      	movs	r3, #34	; 0x22
 800a830:	f8ce 3000 	str.w	r3, [lr]
 800a834:	4638      	mov	r0, r7
 800a836:	b932      	cbnz	r2, 800a846 <_strtoul_l.constprop.0+0xc6>
 800a838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a83c:	b106      	cbz	r6, 800a840 <_strtoul_l.constprop.0+0xc0>
 800a83e:	4240      	negs	r0, r0
 800a840:	2a00      	cmp	r2, #0
 800a842:	d0f9      	beq.n	800a838 <_strtoul_l.constprop.0+0xb8>
 800a844:	b107      	cbz	r7, 800a848 <_strtoul_l.constprop.0+0xc8>
 800a846:	1e69      	subs	r1, r5, #1
 800a848:	6011      	str	r1, [r2, #0]
 800a84a:	e7f5      	b.n	800a838 <_strtoul_l.constprop.0+0xb8>
 800a84c:	2430      	movs	r4, #48	; 0x30
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1b5      	bne.n	800a7be <_strtoul_l.constprop.0+0x3e>
 800a852:	2308      	movs	r3, #8
 800a854:	e7b3      	b.n	800a7be <_strtoul_l.constprop.0+0x3e>
 800a856:	2c30      	cmp	r4, #48	; 0x30
 800a858:	d0a9      	beq.n	800a7ae <_strtoul_l.constprop.0+0x2e>
 800a85a:	230a      	movs	r3, #10
 800a85c:	e7af      	b.n	800a7be <_strtoul_l.constprop.0+0x3e>
 800a85e:	bf00      	nop
 800a860:	0800b221 	.word	0x0800b221

0800a864 <_strtoul_r>:
 800a864:	f7ff bf8c 	b.w	800a780 <_strtoul_l.constprop.0>

0800a868 <__ascii_wctomb>:
 800a868:	b149      	cbz	r1, 800a87e <__ascii_wctomb+0x16>
 800a86a:	2aff      	cmp	r2, #255	; 0xff
 800a86c:	bf85      	ittet	hi
 800a86e:	238a      	movhi	r3, #138	; 0x8a
 800a870:	6003      	strhi	r3, [r0, #0]
 800a872:	700a      	strbls	r2, [r1, #0]
 800a874:	f04f 30ff 	movhi.w	r0, #4294967295
 800a878:	bf98      	it	ls
 800a87a:	2001      	movls	r0, #1
 800a87c:	4770      	bx	lr
 800a87e:	4608      	mov	r0, r1
 800a880:	4770      	bx	lr
	...

0800a884 <fiprintf>:
 800a884:	b40e      	push	{r1, r2, r3}
 800a886:	b503      	push	{r0, r1, lr}
 800a888:	4601      	mov	r1, r0
 800a88a:	ab03      	add	r3, sp, #12
 800a88c:	4805      	ldr	r0, [pc, #20]	; (800a8a4 <fiprintf+0x20>)
 800a88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a892:	6800      	ldr	r0, [r0, #0]
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	f000 f83f 	bl	800a918 <_vfiprintf_r>
 800a89a:	b002      	add	sp, #8
 800a89c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8a0:	b003      	add	sp, #12
 800a8a2:	4770      	bx	lr
 800a8a4:	2000006c 	.word	0x2000006c

0800a8a8 <abort>:
 800a8a8:	b508      	push	{r3, lr}
 800a8aa:	2006      	movs	r0, #6
 800a8ac:	f000 fa0c 	bl	800acc8 <raise>
 800a8b0:	2001      	movs	r0, #1
 800a8b2:	f7f6 ff3b 	bl	800172c <_exit>

0800a8b6 <_malloc_usable_size_r>:
 800a8b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8ba:	1f18      	subs	r0, r3, #4
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	bfbc      	itt	lt
 800a8c0:	580b      	ldrlt	r3, [r1, r0]
 800a8c2:	18c0      	addlt	r0, r0, r3
 800a8c4:	4770      	bx	lr

0800a8c6 <__sfputc_r>:
 800a8c6:	6893      	ldr	r3, [r2, #8]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	b410      	push	{r4}
 800a8ce:	6093      	str	r3, [r2, #8]
 800a8d0:	da08      	bge.n	800a8e4 <__sfputc_r+0x1e>
 800a8d2:	6994      	ldr	r4, [r2, #24]
 800a8d4:	42a3      	cmp	r3, r4
 800a8d6:	db01      	blt.n	800a8dc <__sfputc_r+0x16>
 800a8d8:	290a      	cmp	r1, #10
 800a8da:	d103      	bne.n	800a8e4 <__sfputc_r+0x1e>
 800a8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8e0:	f000 b934 	b.w	800ab4c <__swbuf_r>
 800a8e4:	6813      	ldr	r3, [r2, #0]
 800a8e6:	1c58      	adds	r0, r3, #1
 800a8e8:	6010      	str	r0, [r2, #0]
 800a8ea:	7019      	strb	r1, [r3, #0]
 800a8ec:	4608      	mov	r0, r1
 800a8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <__sfputs_r>:
 800a8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	460f      	mov	r7, r1
 800a8fa:	4614      	mov	r4, r2
 800a8fc:	18d5      	adds	r5, r2, r3
 800a8fe:	42ac      	cmp	r4, r5
 800a900:	d101      	bne.n	800a906 <__sfputs_r+0x12>
 800a902:	2000      	movs	r0, #0
 800a904:	e007      	b.n	800a916 <__sfputs_r+0x22>
 800a906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a90a:	463a      	mov	r2, r7
 800a90c:	4630      	mov	r0, r6
 800a90e:	f7ff ffda 	bl	800a8c6 <__sfputc_r>
 800a912:	1c43      	adds	r3, r0, #1
 800a914:	d1f3      	bne.n	800a8fe <__sfputs_r+0xa>
 800a916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a918 <_vfiprintf_r>:
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	460d      	mov	r5, r1
 800a91e:	b09d      	sub	sp, #116	; 0x74
 800a920:	4614      	mov	r4, r2
 800a922:	4698      	mov	r8, r3
 800a924:	4606      	mov	r6, r0
 800a926:	b118      	cbz	r0, 800a930 <_vfiprintf_r+0x18>
 800a928:	6a03      	ldr	r3, [r0, #32]
 800a92a:	b90b      	cbnz	r3, 800a930 <_vfiprintf_r+0x18>
 800a92c:	f7fc f960 	bl	8006bf0 <__sinit>
 800a930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a932:	07d9      	lsls	r1, r3, #31
 800a934:	d405      	bmi.n	800a942 <_vfiprintf_r+0x2a>
 800a936:	89ab      	ldrh	r3, [r5, #12]
 800a938:	059a      	lsls	r2, r3, #22
 800a93a:	d402      	bmi.n	800a942 <_vfiprintf_r+0x2a>
 800a93c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a93e:	f7fc faae 	bl	8006e9e <__retarget_lock_acquire_recursive>
 800a942:	89ab      	ldrh	r3, [r5, #12]
 800a944:	071b      	lsls	r3, r3, #28
 800a946:	d501      	bpl.n	800a94c <_vfiprintf_r+0x34>
 800a948:	692b      	ldr	r3, [r5, #16]
 800a94a:	b99b      	cbnz	r3, 800a974 <_vfiprintf_r+0x5c>
 800a94c:	4629      	mov	r1, r5
 800a94e:	4630      	mov	r0, r6
 800a950:	f000 f93a 	bl	800abc8 <__swsetup_r>
 800a954:	b170      	cbz	r0, 800a974 <_vfiprintf_r+0x5c>
 800a956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a958:	07dc      	lsls	r4, r3, #31
 800a95a:	d504      	bpl.n	800a966 <_vfiprintf_r+0x4e>
 800a95c:	f04f 30ff 	mov.w	r0, #4294967295
 800a960:	b01d      	add	sp, #116	; 0x74
 800a962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a966:	89ab      	ldrh	r3, [r5, #12]
 800a968:	0598      	lsls	r0, r3, #22
 800a96a:	d4f7      	bmi.n	800a95c <_vfiprintf_r+0x44>
 800a96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a96e:	f7fc fa97 	bl	8006ea0 <__retarget_lock_release_recursive>
 800a972:	e7f3      	b.n	800a95c <_vfiprintf_r+0x44>
 800a974:	2300      	movs	r3, #0
 800a976:	9309      	str	r3, [sp, #36]	; 0x24
 800a978:	2320      	movs	r3, #32
 800a97a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a97e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a982:	2330      	movs	r3, #48	; 0x30
 800a984:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ab38 <_vfiprintf_r+0x220>
 800a988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a98c:	f04f 0901 	mov.w	r9, #1
 800a990:	4623      	mov	r3, r4
 800a992:	469a      	mov	sl, r3
 800a994:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a998:	b10a      	cbz	r2, 800a99e <_vfiprintf_r+0x86>
 800a99a:	2a25      	cmp	r2, #37	; 0x25
 800a99c:	d1f9      	bne.n	800a992 <_vfiprintf_r+0x7a>
 800a99e:	ebba 0b04 	subs.w	fp, sl, r4
 800a9a2:	d00b      	beq.n	800a9bc <_vfiprintf_r+0xa4>
 800a9a4:	465b      	mov	r3, fp
 800a9a6:	4622      	mov	r2, r4
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f7ff ffa2 	bl	800a8f4 <__sfputs_r>
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	f000 80a9 	beq.w	800ab08 <_vfiprintf_r+0x1f0>
 800a9b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9b8:	445a      	add	r2, fp
 800a9ba:	9209      	str	r2, [sp, #36]	; 0x24
 800a9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 80a1 	beq.w	800ab08 <_vfiprintf_r+0x1f0>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9d0:	f10a 0a01 	add.w	sl, sl, #1
 800a9d4:	9304      	str	r3, [sp, #16]
 800a9d6:	9307      	str	r3, [sp, #28]
 800a9d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9dc:	931a      	str	r3, [sp, #104]	; 0x68
 800a9de:	4654      	mov	r4, sl
 800a9e0:	2205      	movs	r2, #5
 800a9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e6:	4854      	ldr	r0, [pc, #336]	; (800ab38 <_vfiprintf_r+0x220>)
 800a9e8:	f7f5 fbfa 	bl	80001e0 <memchr>
 800a9ec:	9a04      	ldr	r2, [sp, #16]
 800a9ee:	b9d8      	cbnz	r0, 800aa28 <_vfiprintf_r+0x110>
 800a9f0:	06d1      	lsls	r1, r2, #27
 800a9f2:	bf44      	itt	mi
 800a9f4:	2320      	movmi	r3, #32
 800a9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9fa:	0713      	lsls	r3, r2, #28
 800a9fc:	bf44      	itt	mi
 800a9fe:	232b      	movmi	r3, #43	; 0x2b
 800aa00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa04:	f89a 3000 	ldrb.w	r3, [sl]
 800aa08:	2b2a      	cmp	r3, #42	; 0x2a
 800aa0a:	d015      	beq.n	800aa38 <_vfiprintf_r+0x120>
 800aa0c:	9a07      	ldr	r2, [sp, #28]
 800aa0e:	4654      	mov	r4, sl
 800aa10:	2000      	movs	r0, #0
 800aa12:	f04f 0c0a 	mov.w	ip, #10
 800aa16:	4621      	mov	r1, r4
 800aa18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa1c:	3b30      	subs	r3, #48	; 0x30
 800aa1e:	2b09      	cmp	r3, #9
 800aa20:	d94d      	bls.n	800aabe <_vfiprintf_r+0x1a6>
 800aa22:	b1b0      	cbz	r0, 800aa52 <_vfiprintf_r+0x13a>
 800aa24:	9207      	str	r2, [sp, #28]
 800aa26:	e014      	b.n	800aa52 <_vfiprintf_r+0x13a>
 800aa28:	eba0 0308 	sub.w	r3, r0, r8
 800aa2c:	fa09 f303 	lsl.w	r3, r9, r3
 800aa30:	4313      	orrs	r3, r2
 800aa32:	9304      	str	r3, [sp, #16]
 800aa34:	46a2      	mov	sl, r4
 800aa36:	e7d2      	b.n	800a9de <_vfiprintf_r+0xc6>
 800aa38:	9b03      	ldr	r3, [sp, #12]
 800aa3a:	1d19      	adds	r1, r3, #4
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	9103      	str	r1, [sp, #12]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	bfbb      	ittet	lt
 800aa44:	425b      	neglt	r3, r3
 800aa46:	f042 0202 	orrlt.w	r2, r2, #2
 800aa4a:	9307      	strge	r3, [sp, #28]
 800aa4c:	9307      	strlt	r3, [sp, #28]
 800aa4e:	bfb8      	it	lt
 800aa50:	9204      	strlt	r2, [sp, #16]
 800aa52:	7823      	ldrb	r3, [r4, #0]
 800aa54:	2b2e      	cmp	r3, #46	; 0x2e
 800aa56:	d10c      	bne.n	800aa72 <_vfiprintf_r+0x15a>
 800aa58:	7863      	ldrb	r3, [r4, #1]
 800aa5a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa5c:	d134      	bne.n	800aac8 <_vfiprintf_r+0x1b0>
 800aa5e:	9b03      	ldr	r3, [sp, #12]
 800aa60:	1d1a      	adds	r2, r3, #4
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	9203      	str	r2, [sp, #12]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bfb8      	it	lt
 800aa6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa6e:	3402      	adds	r4, #2
 800aa70:	9305      	str	r3, [sp, #20]
 800aa72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ab48 <_vfiprintf_r+0x230>
 800aa76:	7821      	ldrb	r1, [r4, #0]
 800aa78:	2203      	movs	r2, #3
 800aa7a:	4650      	mov	r0, sl
 800aa7c:	f7f5 fbb0 	bl	80001e0 <memchr>
 800aa80:	b138      	cbz	r0, 800aa92 <_vfiprintf_r+0x17a>
 800aa82:	9b04      	ldr	r3, [sp, #16]
 800aa84:	eba0 000a 	sub.w	r0, r0, sl
 800aa88:	2240      	movs	r2, #64	; 0x40
 800aa8a:	4082      	lsls	r2, r0
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	3401      	adds	r4, #1
 800aa90:	9304      	str	r3, [sp, #16]
 800aa92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa96:	4829      	ldr	r0, [pc, #164]	; (800ab3c <_vfiprintf_r+0x224>)
 800aa98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa9c:	2206      	movs	r2, #6
 800aa9e:	f7f5 fb9f 	bl	80001e0 <memchr>
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	d03f      	beq.n	800ab26 <_vfiprintf_r+0x20e>
 800aaa6:	4b26      	ldr	r3, [pc, #152]	; (800ab40 <_vfiprintf_r+0x228>)
 800aaa8:	bb1b      	cbnz	r3, 800aaf2 <_vfiprintf_r+0x1da>
 800aaaa:	9b03      	ldr	r3, [sp, #12]
 800aaac:	3307      	adds	r3, #7
 800aaae:	f023 0307 	bic.w	r3, r3, #7
 800aab2:	3308      	adds	r3, #8
 800aab4:	9303      	str	r3, [sp, #12]
 800aab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab8:	443b      	add	r3, r7
 800aaba:	9309      	str	r3, [sp, #36]	; 0x24
 800aabc:	e768      	b.n	800a990 <_vfiprintf_r+0x78>
 800aabe:	fb0c 3202 	mla	r2, ip, r2, r3
 800aac2:	460c      	mov	r4, r1
 800aac4:	2001      	movs	r0, #1
 800aac6:	e7a6      	b.n	800aa16 <_vfiprintf_r+0xfe>
 800aac8:	2300      	movs	r3, #0
 800aaca:	3401      	adds	r4, #1
 800aacc:	9305      	str	r3, [sp, #20]
 800aace:	4619      	mov	r1, r3
 800aad0:	f04f 0c0a 	mov.w	ip, #10
 800aad4:	4620      	mov	r0, r4
 800aad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aada:	3a30      	subs	r2, #48	; 0x30
 800aadc:	2a09      	cmp	r2, #9
 800aade:	d903      	bls.n	800aae8 <_vfiprintf_r+0x1d0>
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d0c6      	beq.n	800aa72 <_vfiprintf_r+0x15a>
 800aae4:	9105      	str	r1, [sp, #20]
 800aae6:	e7c4      	b.n	800aa72 <_vfiprintf_r+0x15a>
 800aae8:	fb0c 2101 	mla	r1, ip, r1, r2
 800aaec:	4604      	mov	r4, r0
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e7f0      	b.n	800aad4 <_vfiprintf_r+0x1bc>
 800aaf2:	ab03      	add	r3, sp, #12
 800aaf4:	9300      	str	r3, [sp, #0]
 800aaf6:	462a      	mov	r2, r5
 800aaf8:	4b12      	ldr	r3, [pc, #72]	; (800ab44 <_vfiprintf_r+0x22c>)
 800aafa:	a904      	add	r1, sp, #16
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7fb fa15 	bl	8005f2c <_printf_float>
 800ab02:	4607      	mov	r7, r0
 800ab04:	1c78      	adds	r0, r7, #1
 800ab06:	d1d6      	bne.n	800aab6 <_vfiprintf_r+0x19e>
 800ab08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab0a:	07d9      	lsls	r1, r3, #31
 800ab0c:	d405      	bmi.n	800ab1a <_vfiprintf_r+0x202>
 800ab0e:	89ab      	ldrh	r3, [r5, #12]
 800ab10:	059a      	lsls	r2, r3, #22
 800ab12:	d402      	bmi.n	800ab1a <_vfiprintf_r+0x202>
 800ab14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab16:	f7fc f9c3 	bl	8006ea0 <__retarget_lock_release_recursive>
 800ab1a:	89ab      	ldrh	r3, [r5, #12]
 800ab1c:	065b      	lsls	r3, r3, #25
 800ab1e:	f53f af1d 	bmi.w	800a95c <_vfiprintf_r+0x44>
 800ab22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab24:	e71c      	b.n	800a960 <_vfiprintf_r+0x48>
 800ab26:	ab03      	add	r3, sp, #12
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	462a      	mov	r2, r5
 800ab2c:	4b05      	ldr	r3, [pc, #20]	; (800ab44 <_vfiprintf_r+0x22c>)
 800ab2e:	a904      	add	r1, sp, #16
 800ab30:	4630      	mov	r0, r6
 800ab32:	f7fb fc9f 	bl	8006474 <_printf_i>
 800ab36:	e7e4      	b.n	800ab02 <_vfiprintf_r+0x1ea>
 800ab38:	0800b321 	.word	0x0800b321
 800ab3c:	0800b32b 	.word	0x0800b32b
 800ab40:	08005f2d 	.word	0x08005f2d
 800ab44:	0800a8f5 	.word	0x0800a8f5
 800ab48:	0800b327 	.word	0x0800b327

0800ab4c <__swbuf_r>:
 800ab4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4e:	460e      	mov	r6, r1
 800ab50:	4614      	mov	r4, r2
 800ab52:	4605      	mov	r5, r0
 800ab54:	b118      	cbz	r0, 800ab5e <__swbuf_r+0x12>
 800ab56:	6a03      	ldr	r3, [r0, #32]
 800ab58:	b90b      	cbnz	r3, 800ab5e <__swbuf_r+0x12>
 800ab5a:	f7fc f849 	bl	8006bf0 <__sinit>
 800ab5e:	69a3      	ldr	r3, [r4, #24]
 800ab60:	60a3      	str	r3, [r4, #8]
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	071a      	lsls	r2, r3, #28
 800ab66:	d525      	bpl.n	800abb4 <__swbuf_r+0x68>
 800ab68:	6923      	ldr	r3, [r4, #16]
 800ab6a:	b31b      	cbz	r3, 800abb4 <__swbuf_r+0x68>
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	6922      	ldr	r2, [r4, #16]
 800ab70:	1a98      	subs	r0, r3, r2
 800ab72:	6963      	ldr	r3, [r4, #20]
 800ab74:	b2f6      	uxtb	r6, r6
 800ab76:	4283      	cmp	r3, r0
 800ab78:	4637      	mov	r7, r6
 800ab7a:	dc04      	bgt.n	800ab86 <__swbuf_r+0x3a>
 800ab7c:	4621      	mov	r1, r4
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f7ff f962 	bl	8009e48 <_fflush_r>
 800ab84:	b9e0      	cbnz	r0, 800abc0 <__swbuf_r+0x74>
 800ab86:	68a3      	ldr	r3, [r4, #8]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	60a3      	str	r3, [r4, #8]
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	1c5a      	adds	r2, r3, #1
 800ab90:	6022      	str	r2, [r4, #0]
 800ab92:	701e      	strb	r6, [r3, #0]
 800ab94:	6962      	ldr	r2, [r4, #20]
 800ab96:	1c43      	adds	r3, r0, #1
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d004      	beq.n	800aba6 <__swbuf_r+0x5a>
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	07db      	lsls	r3, r3, #31
 800aba0:	d506      	bpl.n	800abb0 <__swbuf_r+0x64>
 800aba2:	2e0a      	cmp	r6, #10
 800aba4:	d104      	bne.n	800abb0 <__swbuf_r+0x64>
 800aba6:	4621      	mov	r1, r4
 800aba8:	4628      	mov	r0, r5
 800abaa:	f7ff f94d 	bl	8009e48 <_fflush_r>
 800abae:	b938      	cbnz	r0, 800abc0 <__swbuf_r+0x74>
 800abb0:	4638      	mov	r0, r7
 800abb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abb4:	4621      	mov	r1, r4
 800abb6:	4628      	mov	r0, r5
 800abb8:	f000 f806 	bl	800abc8 <__swsetup_r>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d0d5      	beq.n	800ab6c <__swbuf_r+0x20>
 800abc0:	f04f 37ff 	mov.w	r7, #4294967295
 800abc4:	e7f4      	b.n	800abb0 <__swbuf_r+0x64>
	...

0800abc8 <__swsetup_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4b2a      	ldr	r3, [pc, #168]	; (800ac74 <__swsetup_r+0xac>)
 800abcc:	4605      	mov	r5, r0
 800abce:	6818      	ldr	r0, [r3, #0]
 800abd0:	460c      	mov	r4, r1
 800abd2:	b118      	cbz	r0, 800abdc <__swsetup_r+0x14>
 800abd4:	6a03      	ldr	r3, [r0, #32]
 800abd6:	b90b      	cbnz	r3, 800abdc <__swsetup_r+0x14>
 800abd8:	f7fc f80a 	bl	8006bf0 <__sinit>
 800abdc:	89a3      	ldrh	r3, [r4, #12]
 800abde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abe2:	0718      	lsls	r0, r3, #28
 800abe4:	d422      	bmi.n	800ac2c <__swsetup_r+0x64>
 800abe6:	06d9      	lsls	r1, r3, #27
 800abe8:	d407      	bmi.n	800abfa <__swsetup_r+0x32>
 800abea:	2309      	movs	r3, #9
 800abec:	602b      	str	r3, [r5, #0]
 800abee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abf2:	81a3      	strh	r3, [r4, #12]
 800abf4:	f04f 30ff 	mov.w	r0, #4294967295
 800abf8:	e034      	b.n	800ac64 <__swsetup_r+0x9c>
 800abfa:	0758      	lsls	r0, r3, #29
 800abfc:	d512      	bpl.n	800ac24 <__swsetup_r+0x5c>
 800abfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac00:	b141      	cbz	r1, 800ac14 <__swsetup_r+0x4c>
 800ac02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac06:	4299      	cmp	r1, r3
 800ac08:	d002      	beq.n	800ac10 <__swsetup_r+0x48>
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	f7fc ffda 	bl	8007bc4 <_free_r>
 800ac10:	2300      	movs	r3, #0
 800ac12:	6363      	str	r3, [r4, #52]	; 0x34
 800ac14:	89a3      	ldrh	r3, [r4, #12]
 800ac16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac1a:	81a3      	strh	r3, [r4, #12]
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	6063      	str	r3, [r4, #4]
 800ac20:	6923      	ldr	r3, [r4, #16]
 800ac22:	6023      	str	r3, [r4, #0]
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	f043 0308 	orr.w	r3, r3, #8
 800ac2a:	81a3      	strh	r3, [r4, #12]
 800ac2c:	6923      	ldr	r3, [r4, #16]
 800ac2e:	b94b      	cbnz	r3, 800ac44 <__swsetup_r+0x7c>
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac3a:	d003      	beq.n	800ac44 <__swsetup_r+0x7c>
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	4628      	mov	r0, r5
 800ac40:	f000 f884 	bl	800ad4c <__smakebuf_r>
 800ac44:	89a0      	ldrh	r0, [r4, #12]
 800ac46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac4a:	f010 0301 	ands.w	r3, r0, #1
 800ac4e:	d00a      	beq.n	800ac66 <__swsetup_r+0x9e>
 800ac50:	2300      	movs	r3, #0
 800ac52:	60a3      	str	r3, [r4, #8]
 800ac54:	6963      	ldr	r3, [r4, #20]
 800ac56:	425b      	negs	r3, r3
 800ac58:	61a3      	str	r3, [r4, #24]
 800ac5a:	6923      	ldr	r3, [r4, #16]
 800ac5c:	b943      	cbnz	r3, 800ac70 <__swsetup_r+0xa8>
 800ac5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac62:	d1c4      	bne.n	800abee <__swsetup_r+0x26>
 800ac64:	bd38      	pop	{r3, r4, r5, pc}
 800ac66:	0781      	lsls	r1, r0, #30
 800ac68:	bf58      	it	pl
 800ac6a:	6963      	ldrpl	r3, [r4, #20]
 800ac6c:	60a3      	str	r3, [r4, #8]
 800ac6e:	e7f4      	b.n	800ac5a <__swsetup_r+0x92>
 800ac70:	2000      	movs	r0, #0
 800ac72:	e7f7      	b.n	800ac64 <__swsetup_r+0x9c>
 800ac74:	2000006c 	.word	0x2000006c

0800ac78 <_raise_r>:
 800ac78:	291f      	cmp	r1, #31
 800ac7a:	b538      	push	{r3, r4, r5, lr}
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	460d      	mov	r5, r1
 800ac80:	d904      	bls.n	800ac8c <_raise_r+0x14>
 800ac82:	2316      	movs	r3, #22
 800ac84:	6003      	str	r3, [r0, #0]
 800ac86:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8a:	bd38      	pop	{r3, r4, r5, pc}
 800ac8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ac8e:	b112      	cbz	r2, 800ac96 <_raise_r+0x1e>
 800ac90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac94:	b94b      	cbnz	r3, 800acaa <_raise_r+0x32>
 800ac96:	4620      	mov	r0, r4
 800ac98:	f000 f830 	bl	800acfc <_getpid_r>
 800ac9c:	462a      	mov	r2, r5
 800ac9e:	4601      	mov	r1, r0
 800aca0:	4620      	mov	r0, r4
 800aca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aca6:	f000 b817 	b.w	800acd8 <_kill_r>
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d00a      	beq.n	800acc4 <_raise_r+0x4c>
 800acae:	1c59      	adds	r1, r3, #1
 800acb0:	d103      	bne.n	800acba <_raise_r+0x42>
 800acb2:	2316      	movs	r3, #22
 800acb4:	6003      	str	r3, [r0, #0]
 800acb6:	2001      	movs	r0, #1
 800acb8:	e7e7      	b.n	800ac8a <_raise_r+0x12>
 800acba:	2400      	movs	r4, #0
 800acbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800acc0:	4628      	mov	r0, r5
 800acc2:	4798      	blx	r3
 800acc4:	2000      	movs	r0, #0
 800acc6:	e7e0      	b.n	800ac8a <_raise_r+0x12>

0800acc8 <raise>:
 800acc8:	4b02      	ldr	r3, [pc, #8]	; (800acd4 <raise+0xc>)
 800acca:	4601      	mov	r1, r0
 800accc:	6818      	ldr	r0, [r3, #0]
 800acce:	f7ff bfd3 	b.w	800ac78 <_raise_r>
 800acd2:	bf00      	nop
 800acd4:	2000006c 	.word	0x2000006c

0800acd8 <_kill_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4d07      	ldr	r5, [pc, #28]	; (800acf8 <_kill_r+0x20>)
 800acdc:	2300      	movs	r3, #0
 800acde:	4604      	mov	r4, r0
 800ace0:	4608      	mov	r0, r1
 800ace2:	4611      	mov	r1, r2
 800ace4:	602b      	str	r3, [r5, #0]
 800ace6:	f7f6 fd11 	bl	800170c <_kill>
 800acea:	1c43      	adds	r3, r0, #1
 800acec:	d102      	bne.n	800acf4 <_kill_r+0x1c>
 800acee:	682b      	ldr	r3, [r5, #0]
 800acf0:	b103      	cbz	r3, 800acf4 <_kill_r+0x1c>
 800acf2:	6023      	str	r3, [r4, #0]
 800acf4:	bd38      	pop	{r3, r4, r5, pc}
 800acf6:	bf00      	nop
 800acf8:	200050c0 	.word	0x200050c0

0800acfc <_getpid_r>:
 800acfc:	f7f6 bcfe 	b.w	80016fc <_getpid>

0800ad00 <__swhatbuf_r>:
 800ad00:	b570      	push	{r4, r5, r6, lr}
 800ad02:	460c      	mov	r4, r1
 800ad04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad08:	2900      	cmp	r1, #0
 800ad0a:	b096      	sub	sp, #88	; 0x58
 800ad0c:	4615      	mov	r5, r2
 800ad0e:	461e      	mov	r6, r3
 800ad10:	da0d      	bge.n	800ad2e <__swhatbuf_r+0x2e>
 800ad12:	89a3      	ldrh	r3, [r4, #12]
 800ad14:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ad18:	f04f 0100 	mov.w	r1, #0
 800ad1c:	bf0c      	ite	eq
 800ad1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ad22:	2340      	movne	r3, #64	; 0x40
 800ad24:	2000      	movs	r0, #0
 800ad26:	6031      	str	r1, [r6, #0]
 800ad28:	602b      	str	r3, [r5, #0]
 800ad2a:	b016      	add	sp, #88	; 0x58
 800ad2c:	bd70      	pop	{r4, r5, r6, pc}
 800ad2e:	466a      	mov	r2, sp
 800ad30:	f000 f848 	bl	800adc4 <_fstat_r>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	dbec      	blt.n	800ad12 <__swhatbuf_r+0x12>
 800ad38:	9901      	ldr	r1, [sp, #4]
 800ad3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ad3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ad42:	4259      	negs	r1, r3
 800ad44:	4159      	adcs	r1, r3
 800ad46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad4a:	e7eb      	b.n	800ad24 <__swhatbuf_r+0x24>

0800ad4c <__smakebuf_r>:
 800ad4c:	898b      	ldrh	r3, [r1, #12]
 800ad4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad50:	079d      	lsls	r5, r3, #30
 800ad52:	4606      	mov	r6, r0
 800ad54:	460c      	mov	r4, r1
 800ad56:	d507      	bpl.n	800ad68 <__smakebuf_r+0x1c>
 800ad58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	6123      	str	r3, [r4, #16]
 800ad60:	2301      	movs	r3, #1
 800ad62:	6163      	str	r3, [r4, #20]
 800ad64:	b002      	add	sp, #8
 800ad66:	bd70      	pop	{r4, r5, r6, pc}
 800ad68:	ab01      	add	r3, sp, #4
 800ad6a:	466a      	mov	r2, sp
 800ad6c:	f7ff ffc8 	bl	800ad00 <__swhatbuf_r>
 800ad70:	9900      	ldr	r1, [sp, #0]
 800ad72:	4605      	mov	r5, r0
 800ad74:	4630      	mov	r0, r6
 800ad76:	f7fc ff99 	bl	8007cac <_malloc_r>
 800ad7a:	b948      	cbnz	r0, 800ad90 <__smakebuf_r+0x44>
 800ad7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad80:	059a      	lsls	r2, r3, #22
 800ad82:	d4ef      	bmi.n	800ad64 <__smakebuf_r+0x18>
 800ad84:	f023 0303 	bic.w	r3, r3, #3
 800ad88:	f043 0302 	orr.w	r3, r3, #2
 800ad8c:	81a3      	strh	r3, [r4, #12]
 800ad8e:	e7e3      	b.n	800ad58 <__smakebuf_r+0xc>
 800ad90:	89a3      	ldrh	r3, [r4, #12]
 800ad92:	6020      	str	r0, [r4, #0]
 800ad94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad98:	81a3      	strh	r3, [r4, #12]
 800ad9a:	9b00      	ldr	r3, [sp, #0]
 800ad9c:	6163      	str	r3, [r4, #20]
 800ad9e:	9b01      	ldr	r3, [sp, #4]
 800ada0:	6120      	str	r0, [r4, #16]
 800ada2:	b15b      	cbz	r3, 800adbc <__smakebuf_r+0x70>
 800ada4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ada8:	4630      	mov	r0, r6
 800adaa:	f000 f81d 	bl	800ade8 <_isatty_r>
 800adae:	b128      	cbz	r0, 800adbc <__smakebuf_r+0x70>
 800adb0:	89a3      	ldrh	r3, [r4, #12]
 800adb2:	f023 0303 	bic.w	r3, r3, #3
 800adb6:	f043 0301 	orr.w	r3, r3, #1
 800adba:	81a3      	strh	r3, [r4, #12]
 800adbc:	89a3      	ldrh	r3, [r4, #12]
 800adbe:	431d      	orrs	r5, r3
 800adc0:	81a5      	strh	r5, [r4, #12]
 800adc2:	e7cf      	b.n	800ad64 <__smakebuf_r+0x18>

0800adc4 <_fstat_r>:
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	4d07      	ldr	r5, [pc, #28]	; (800ade4 <_fstat_r+0x20>)
 800adc8:	2300      	movs	r3, #0
 800adca:	4604      	mov	r4, r0
 800adcc:	4608      	mov	r0, r1
 800adce:	4611      	mov	r1, r2
 800add0:	602b      	str	r3, [r5, #0]
 800add2:	f7f6 fcfa 	bl	80017ca <_fstat>
 800add6:	1c43      	adds	r3, r0, #1
 800add8:	d102      	bne.n	800ade0 <_fstat_r+0x1c>
 800adda:	682b      	ldr	r3, [r5, #0]
 800addc:	b103      	cbz	r3, 800ade0 <_fstat_r+0x1c>
 800adde:	6023      	str	r3, [r4, #0]
 800ade0:	bd38      	pop	{r3, r4, r5, pc}
 800ade2:	bf00      	nop
 800ade4:	200050c0 	.word	0x200050c0

0800ade8 <_isatty_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4d06      	ldr	r5, [pc, #24]	; (800ae04 <_isatty_r+0x1c>)
 800adec:	2300      	movs	r3, #0
 800adee:	4604      	mov	r4, r0
 800adf0:	4608      	mov	r0, r1
 800adf2:	602b      	str	r3, [r5, #0]
 800adf4:	f7f6 fcf9 	bl	80017ea <_isatty>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d102      	bne.n	800ae02 <_isatty_r+0x1a>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	b103      	cbz	r3, 800ae02 <_isatty_r+0x1a>
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	200050c0 	.word	0x200050c0

0800ae08 <_init>:
 800ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0a:	bf00      	nop
 800ae0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae0e:	bc08      	pop	{r3}
 800ae10:	469e      	mov	lr, r3
 800ae12:	4770      	bx	lr

0800ae14 <_fini>:
 800ae14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae16:	bf00      	nop
 800ae18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae1a:	bc08      	pop	{r3}
 800ae1c:	469e      	mov	lr, r3
 800ae1e:	4770      	bx	lr
