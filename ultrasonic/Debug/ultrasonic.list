
ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007118  08007118  00017118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071b8  080071b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080071b8  080071b8  000171b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071c0  080071c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071c0  080071c0  000171c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071c4  080071c4  000171c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080071c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004164  20000010  080071d8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004174  080071d8  00024174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a7c  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032b9  00000000  00000000  00034aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  00037db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9b  00000000  00000000  00039088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a96  00000000  00000000  00039f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a08  00000000  00000000  000519b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009624b  00000000  00000000  000673c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f00  00000000  00000000  000fd60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0010250c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007100 	.word	0x08007100

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08007100 	.word	0x08007100

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b970 	b.w	8000cb4 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9e08      	ldr	r6, [sp, #32]
 80009f2:	460d      	mov	r5, r1
 80009f4:	4604      	mov	r4, r0
 80009f6:	460f      	mov	r7, r1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d14a      	bne.n	8000a92 <__udivmoddi4+0xa6>
 80009fc:	428a      	cmp	r2, r1
 80009fe:	4694      	mov	ip, r2
 8000a00:	d965      	bls.n	8000ace <__udivmoddi4+0xe2>
 8000a02:	fab2 f382 	clz	r3, r2
 8000a06:	b143      	cbz	r3, 8000a1a <__udivmoddi4+0x2e>
 8000a08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a0c:	f1c3 0220 	rsb	r2, r3, #32
 8000a10:	409f      	lsls	r7, r3
 8000a12:	fa20 f202 	lsr.w	r2, r0, r2
 8000a16:	4317      	orrs	r7, r2
 8000a18:	409c      	lsls	r4, r3
 8000a1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a1e:	fa1f f58c 	uxth.w	r5, ip
 8000a22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a26:	0c22      	lsrs	r2, r4, #16
 8000a28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a30:	fb01 f005 	mul.w	r0, r1, r5
 8000a34:	4290      	cmp	r0, r2
 8000a36:	d90a      	bls.n	8000a4e <__udivmoddi4+0x62>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a40:	f080 811c 	bcs.w	8000c7c <__udivmoddi4+0x290>
 8000a44:	4290      	cmp	r0, r2
 8000a46:	f240 8119 	bls.w	8000c7c <__udivmoddi4+0x290>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4462      	add	r2, ip
 8000a4e:	1a12      	subs	r2, r2, r0
 8000a50:	b2a4      	uxth	r4, r4
 8000a52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a5e:	fb00 f505 	mul.w	r5, r0, r5
 8000a62:	42a5      	cmp	r5, r4
 8000a64:	d90a      	bls.n	8000a7c <__udivmoddi4+0x90>
 8000a66:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a6e:	f080 8107 	bcs.w	8000c80 <__udivmoddi4+0x294>
 8000a72:	42a5      	cmp	r5, r4
 8000a74:	f240 8104 	bls.w	8000c80 <__udivmoddi4+0x294>
 8000a78:	4464      	add	r4, ip
 8000a7a:	3802      	subs	r0, #2
 8000a7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a80:	1b64      	subs	r4, r4, r5
 8000a82:	2100      	movs	r1, #0
 8000a84:	b11e      	cbz	r6, 8000a8e <__udivmoddi4+0xa2>
 8000a86:	40dc      	lsrs	r4, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	428b      	cmp	r3, r1
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0xbc>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	f000 80ed 	beq.w	8000c76 <__udivmoddi4+0x28a>
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa8:	fab3 f183 	clz	r1, r3
 8000aac:	2900      	cmp	r1, #0
 8000aae:	d149      	bne.n	8000b44 <__udivmoddi4+0x158>
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	d302      	bcc.n	8000aba <__udivmoddi4+0xce>
 8000ab4:	4282      	cmp	r2, r0
 8000ab6:	f200 80f8 	bhi.w	8000caa <__udivmoddi4+0x2be>
 8000aba:	1a84      	subs	r4, r0, r2
 8000abc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d0e2      	beq.n	8000a8e <__udivmoddi4+0xa2>
 8000ac8:	e9c6 4700 	strd	r4, r7, [r6]
 8000acc:	e7df      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000ace:	b902      	cbnz	r2, 8000ad2 <__udivmoddi4+0xe6>
 8000ad0:	deff      	udf	#255	; 0xff
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8090 	bne.w	8000bfc <__udivmoddi4+0x210>
 8000adc:	1a8a      	subs	r2, r1, r2
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000aec:	fb07 2015 	mls	r0, r7, r5, r2
 8000af0:	0c22      	lsrs	r2, r4, #16
 8000af2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000af6:	fb0e f005 	mul.w	r0, lr, r5
 8000afa:	4290      	cmp	r0, r2
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x124>
 8000afe:	eb1c 0202 	adds.w	r2, ip, r2
 8000b02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x122>
 8000b08:	4290      	cmp	r0, r2
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2b8>
 8000b0e:	4645      	mov	r5, r8
 8000b10:	1a12      	subs	r2, r2, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b18:	fb07 2210 	mls	r2, r7, r0, r2
 8000b1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x14e>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x14c>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2c2>
 8000b38:	4610      	mov	r0, r2
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b42:	e79f      	b.n	8000a84 <__udivmoddi4+0x98>
 8000b44:	f1c1 0720 	rsb	r7, r1, #32
 8000b48:	408b      	lsls	r3, r1
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa05 f401 	lsl.w	r4, r5, r1
 8000b56:	fa20 f307 	lsr.w	r3, r0, r7
 8000b5a:	40fd      	lsrs	r5, r7
 8000b5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b60:	4323      	orrs	r3, r4
 8000b62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b66:	fa1f fe8c 	uxth.w	lr, ip
 8000b6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b6e:	0c1c      	lsrs	r4, r3, #16
 8000b70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b74:	fb08 f50e 	mul.w	r5, r8, lr
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b0>
 8000b84:	eb1c 0404 	adds.w	r4, ip, r4
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b90:	42a5      	cmp	r5, r4
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4464      	add	r4, ip
 8000b9c:	1b64      	subs	r4, r4, r5
 8000b9e:	b29d      	uxth	r5, r3
 8000ba0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ba4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1da>
 8000bb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2ac>
 8000bbe:	45a6      	cmp	lr, r4
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2ac>
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	4464      	add	r4, ip
 8000bc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bca:	fba3 9502 	umull	r9, r5, r3, r2
 8000bce:	eba4 040e 	sub.w	r4, r4, lr
 8000bd2:	42ac      	cmp	r4, r5
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46ae      	mov	lr, r5
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x29c>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x298>
 8000bdc:	b156      	cbz	r6, 8000bf4 <__udivmoddi4+0x208>
 8000bde:	ebb0 0208 	subs.w	r2, r0, r8
 8000be2:	eb64 040e 	sbc.w	r4, r4, lr
 8000be6:	fa04 f707 	lsl.w	r7, r4, r7
 8000bea:	40ca      	lsrs	r2, r1
 8000bec:	40cc      	lsrs	r4, r1
 8000bee:	4317      	orrs	r7, r2
 8000bf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfc:	f1c3 0120 	rsb	r1, r3, #32
 8000c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c04:	fa20 f201 	lsr.w	r2, r0, r1
 8000c08:	fa25 f101 	lsr.w	r1, r5, r1
 8000c0c:	409d      	lsls	r5, r3
 8000c0e:	432a      	orrs	r2, r5
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c20:	0c11      	lsrs	r1, r2, #16
 8000c22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c26:	fb00 f50e 	mul.w	r5, r0, lr
 8000c2a:	428d      	cmp	r5, r1
 8000c2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x258>
 8000c32:	eb1c 0101 	adds.w	r1, ip, r1
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c3c:	428d      	cmp	r5, r1
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1b49      	subs	r1, r1, r5
 8000c46:	b292      	uxth	r2, r2
 8000c48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c54:	fb05 f10e 	mul.w	r1, r5, lr
 8000c58:	4291      	cmp	r1, r2
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x282>
 8000c5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2a8>
 8000c66:	4291      	cmp	r1, r2
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2a8>
 8000c6a:	3d02      	subs	r5, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a52      	subs	r2, r2, r1
 8000c70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0xfc>
 8000c76:	4631      	mov	r1, r6
 8000c78:	4630      	mov	r0, r6
 8000c7a:	e708      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e6e6      	b.n	8000a4e <__udivmoddi4+0x62>
 8000c80:	4610      	mov	r0, r2
 8000c82:	e6fb      	b.n	8000a7c <__udivmoddi4+0x90>
 8000c84:	4548      	cmp	r0, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f0>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c90:	3b01      	subs	r3, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f0>
 8000c94:	4645      	mov	r5, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x282>
 8000c98:	462b      	mov	r3, r5
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1da>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x258>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b0>
 8000ca4:	3d02      	subs	r5, #2
 8000ca6:	4462      	add	r2, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x124>
 8000caa:	4608      	mov	r0, r1
 8000cac:	e70a      	b.n	8000ac4 <__udivmoddi4+0xd8>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x14e>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <LCD_Init>:

// Helper functions for sending commands/data
void LCD_Enable(void);
void LCD_Write8Bits(uint8_t value);

void LCD_Init(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
    LCD_SemaphoreWait();
 8000cbc:	f000 f912 	bl	8000ee4 <LCD_SemaphoreWait>

    // Initialize the LCD to 8-bit mode
    osDelay(40); // Wait for more than 40ms after VDD rises to 2.7V
 8000cc0:	2028      	movs	r0, #40	; 0x28
 8000cc2:	f003 fe98 	bl	80049f6 <osDelay>
    LCD_Send_Command(0b00111000);
 8000cc6:	2038      	movs	r0, #56	; 0x38
 8000cc8:	f000 f80a 	bl	8000ce0 <LCD_Send_Command>
    LCD_Send_Command(0b00001111);
 8000ccc:	200f      	movs	r0, #15
 8000cce:	f000 f807 	bl	8000ce0 <LCD_Send_Command>

    LCD_Send_Command(1);
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f000 f804 	bl	8000ce0 <LCD_Send_Command>

   LCD_SemaphoreRelease();
 8000cd8:	f000 f912 	bl	8000f00 <LCD_SemaphoreRelease>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <LCD_Send_Command>:

void LCD_Send_Command(uint8_t cmd) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]

    LCD_Send(cmd, 0);
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f812 	bl	8000d18 <LCD_Send>

}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <LCD_Send_Data>:

void LCD_Send_Data(uint8_t data) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]

    LCD_Send(data, 1);
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f804 	bl	8000d18 <LCD_Send>

}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <LCD_Send>:

void LCD_Send(uint8_t value, uint8_t mode) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	460a      	mov	r2, r1
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	4613      	mov	r3, r2
 8000d26:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, mode);
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4808      	ldr	r0, [pc, #32]	; (8000d50 <LCD_Send+0x38>)
 8000d30:	f001 fb4c 	bl	80023cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2102      	movs	r1, #2
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <LCD_Send+0x38>)
 8000d3a:	f001 fb47 	bl	80023cc <HAL_GPIO_WritePin>
    LCD_Write8Bits(value);
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 f807 	bl	8000d54 <LCD_Write8Bits>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40020400 	.word	0x40020400

08000d54 <LCD_Write8Bits>:

void LCD_Write8Bits(uint8_t value) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, (value >> 0) & 0x01);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	482b      	ldr	r0, [pc, #172]	; (8000e18 <LCD_Write8Bits+0xc4>)
 8000d6c:	f001 fb2e 	bl	80023cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, (value >> 1) & 0x01);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	085b      	lsrs	r3, r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4826      	ldr	r0, [pc, #152]	; (8000e1c <LCD_Write8Bits+0xc8>)
 8000d82:	f001 fb23 	bl	80023cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, (value >> 2) & 0x01);
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	089b      	lsrs	r3, r3, #2
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	2120      	movs	r1, #32
 8000d96:	4821      	ldr	r0, [pc, #132]	; (8000e1c <LCD_Write8Bits+0xc8>)
 8000d98:	f001 fb18 	bl	80023cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, (value >> 3) & 0x01);
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	08db      	lsrs	r3, r3, #3
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	2140      	movs	r1, #64	; 0x40
 8000dac:	481b      	ldr	r0, [pc, #108]	; (8000e1c <LCD_Write8Bits+0xc8>)
 8000dae:	f001 fb0d 	bl	80023cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (value >> 4) & 0x01);
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	091b      	lsrs	r3, r3, #4
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	4816      	ldr	r0, [pc, #88]	; (8000e1c <LCD_Write8Bits+0xc8>)
 8000dc4:	f001 fb02 	bl	80023cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (value >> 5) & 0x01);
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dda:	4810      	ldr	r0, [pc, #64]	; (8000e1c <LCD_Write8Bits+0xc8>)
 8000ddc:	f001 faf6 	bl	80023cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (value >> 6) & 0x01);
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	099b      	lsrs	r3, r3, #6
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	461a      	mov	r2, r3
 8000dee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df2:	480a      	ldr	r0, [pc, #40]	; (8000e1c <LCD_Write8Bits+0xc8>)
 8000df4:	f001 faea 	bl	80023cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (value >> 7) & 0x01);
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	09db      	lsrs	r3, r3, #7
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	461a      	mov	r2, r3
 8000e00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <LCD_Write8Bits+0xc8>)
 8000e06:	f001 fae1 	bl	80023cc <HAL_GPIO_WritePin>
    LCD_Enable();
 8000e0a:	f000 f809 	bl	8000e20 <LCD_Enable>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020400 	.word	0x40020400

08000e20 <LCD_Enable>:

void LCD_Enable(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2104      	movs	r1, #4
 8000e28:	4806      	ldr	r0, [pc, #24]	; (8000e44 <LCD_Enable+0x24>)
 8000e2a:	f001 facf 	bl	80023cc <HAL_GPIO_WritePin>
    osDelay(2); // Enable pulse must be >450ns
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f003 fde1 	bl	80049f6 <osDelay>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2104      	movs	r1, #4
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <LCD_Enable+0x24>)
 8000e3a:	f001 fac7 	bl	80023cc <HAL_GPIO_WritePin>

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40020400 	.word	0x40020400

08000e48 <LCD_Clear>:

void LCD_Clear(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
    LCD_SemaphoreWait();
 8000e4c:	f000 f84a 	bl	8000ee4 <LCD_SemaphoreWait>
    LCD_Send_Command(0x01); // Clear display
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff ff45 	bl	8000ce0 <LCD_Send_Command>
    osDelay(2); // Clearing the display takes 1.53ms
 8000e56:	2002      	movs	r0, #2
 8000e58:	f003 fdcd 	bl	80049f6 <osDelay>
    LCD_SemaphoreRelease();
 8000e5c:	f000 f850 	bl	8000f00 <LCD_SemaphoreRelease>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <LCD_Set_Cursor>:

void LCD_Set_Cursor(uint8_t row, uint8_t col) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	4613      	mov	r3, r2
 8000e72:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch(row) {
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d002      	beq.n	8000e80 <LCD_Set_Cursor+0x1c>
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d003      	beq.n	8000e86 <LCD_Set_Cursor+0x22>
 8000e7e:	e006      	b.n	8000e8e <LCD_Set_Cursor+0x2a>
        case 0: address = 0x00 + col; break;
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e006      	b.n	8000e94 <LCD_Set_Cursor+0x30>
        case 1: address = 0x40 + col; break;
 8000e86:	79bb      	ldrb	r3, [r7, #6]
 8000e88:	3340      	adds	r3, #64	; 0x40
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e002      	b.n	8000e94 <LCD_Set_Cursor+0x30>
        default: address = 0x00 + col; break;
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	73fb      	strb	r3, [r7, #15]
 8000e92:	bf00      	nop
    }
    LCD_SemaphoreWait();
 8000e94:	f000 f826 	bl	8000ee4 <LCD_SemaphoreWait>
    LCD_Send_Command(0x80 | address);
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff1d 	bl	8000ce0 <LCD_Send_Command>
    LCD_SemaphoreRelease();
 8000ea6:	f000 f82b 	bl	8000f00 <LCD_SemaphoreRelease>
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <LCD_Write_String>:

void LCD_Write_String(char* str) {
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   LCD_SemaphoreWait();
 8000eba:	f000 f813 	bl	8000ee4 <LCD_SemaphoreWait>
    while(*str) {
 8000ebe:	e006      	b.n	8000ece <LCD_Write_String+0x1c>
        LCD_Send_Data(*str++);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff17 	bl	8000cfc <LCD_Send_Data>
    while(*str) {
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f4      	bne.n	8000ec0 <LCD_Write_String+0xe>
    }
  LCD_SemaphoreRelease();
 8000ed6:	f000 f813 	bl	8000f00 <LCD_SemaphoreRelease>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <LCD_SemaphoreWait>:

void LCD_SemaphoreWait(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	osMutexWait(LcdHandle, osWaitForever);
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <LCD_SemaphoreWait+0x18>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f003 fdad 	bl	8004a50 <osMutexWait>

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000360 	.word	0x20000360

08000f00 <LCD_SemaphoreRelease>:

void LCD_SemaphoreRelease(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	osMutexRelease(LcdHandle);
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <LCD_SemaphoreRelease+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 fdef 	bl	8004aec <osMutexRelease>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000360 	.word	0x20000360

08000f18 <HCSR04_Read>:
#include "main.h"
#include "Ultrasonic.h"


void HCSR04_Read (GPIO_TypeDef* Port, uint16_t Pin,TIM_HandleTypeDef* htim, uint8_t Channel)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	461a      	mov	r2, r3
 8000f24:	460b      	mov	r3, r1
 8000f26:	817b      	strh	r3, [r7, #10]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	727b      	strb	r3, [r7, #9]
	HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f2c:	897b      	ldrh	r3, [r7, #10]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4619      	mov	r1, r3
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f001 fa4a 	bl	80023cc <HAL_GPIO_WritePin>
	osDelay(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f003 fd5c 	bl	80049f6 <osDelay>
	HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f3e:	897b      	ldrh	r3, [r7, #10]
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f001 fa41 	bl	80023cc <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(htim, Channel);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68d9      	ldr	r1, [r3, #12]
 8000f50:	7a7a      	ldrb	r2, [r7, #9]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	60da      	str	r2, [r3, #12]
//	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
//	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
//	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <vApplicationGetIdleTaskMemory+0x30>)
 8000f7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2280      	movs	r2, #128	; 0x80
 8000f80:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	2000002c 	.word	0x2000002c
 8000f94:	20000080 	.word	0x20000080

08000f98 <Stop>:
uint8_t received_command[1];
uint8_t Forward_stop=0;
uint8_t Backward_stop=0;

void Stop(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <Stop+0x30>)
 8000fa2:	f001 fa13 	bl	80023cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2102      	movs	r1, #2
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <Stop+0x30>)
 8000fac:	f001 fa0e 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <Stop+0x30>)
 8000fb6:	f001 fa09 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2140      	movs	r1, #64	; 0x40
 8000fbe:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <Stop+0x30>)
 8000fc0:	f001 fa04 	bl	80023cc <HAL_GPIO_WritePin>
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
					__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
				}
			}*/
	//}

	    if (htim->Instance == TIM1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a90      	ldr	r2, [pc, #576]	; (8001220 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	f040 8088 	bne.w	80010f4 <HAL_TIM_IC_CaptureCallback+0x124>
	    {

	        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel 1
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7f1b      	ldrb	r3, [r3, #28]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	f040 8083 	bne.w	80010f4 <HAL_TIM_IC_CaptureCallback+0x124>
	        {
	            if (Is_First_Captured_Front == 0) // if the first value is not captured
 8000fee:	4b8d      	ldr	r3, [pc, #564]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d11a      	bne.n	800102c <HAL_TIM_IC_CaptureCallback+0x5c>
	            {
	                IC_Front_Val1 = HAL_TIM_ReadCapturedValue(htim, FRONT_CHANNEL); // read the first value
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f002 fa57 	bl	80034ac <HAL_TIM_ReadCapturedValue>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a89      	ldr	r2, [pc, #548]	; (8001228 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001002:	6013      	str	r3, [r2, #0]
	                Is_First_Captured_Front = 1;  // set the first captured as true
 8001004:	4b87      	ldr	r3, [pc, #540]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
	                // Now change the polarity to falling edge
	                __HAL_TIM_SET_CAPTUREPOLARITY(htim, FRONT_CHANNEL, TIM_INPUTCHANNELPOLARITY_FALLING);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6a1a      	ldr	r2, [r3, #32]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 020a 	bic.w	r2, r2, #10
 8001018:	621a      	str	r2, [r3, #32]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6a1a      	ldr	r2, [r3, #32]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f042 0202 	orr.w	r2, r2, #2
 8001028:	621a      	str	r2, [r3, #32]
 800102a:	e063      	b.n	80010f4 <HAL_TIM_IC_CaptureCallback+0x124>
	            }
	            else if (Is_First_Captured_Front == 1)   // if the first is already captured
 800102c:	4b7d      	ldr	r3, [pc, #500]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x254>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d15f      	bne.n	80010f4 <HAL_TIM_IC_CaptureCallback+0x124>
	            {
	                IC_Front_Val2 = HAL_TIM_ReadCapturedValue(htim, FRONT_CHANNEL);  // read second value
 8001034:	2100      	movs	r1, #0
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f002 fa38 	bl	80034ac <HAL_TIM_ReadCapturedValue>
 800103c:	4603      	mov	r3, r0
 800103e:	4a7b      	ldr	r2, [pc, #492]	; (800122c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001040:	6013      	str	r3, [r2, #0]
	                __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	; 0x24

	                if (IC_Front_Val2 > IC_Front_Val1)
 800104a:	4b78      	ldr	r3, [pc, #480]	; (800122c <HAL_TIM_IC_CaptureCallback+0x25c>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4b76      	ldr	r3, [pc, #472]	; (8001228 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d907      	bls.n	8001066 <HAL_TIM_IC_CaptureCallback+0x96>
	                {
	                    Front_Difference = IC_Front_Val2 - IC_Front_Val1;
 8001056:	4b75      	ldr	r3, [pc, #468]	; (800122c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b73      	ldr	r3, [pc, #460]	; (8001228 <HAL_TIM_IC_CaptureCallback+0x258>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	4a73      	ldr	r2, [pc, #460]	; (8001230 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	e00f      	b.n	8001086 <HAL_TIM_IC_CaptureCallback+0xb6>
	                }
	                else if (IC_Front_Val1 > IC_Front_Val2)
 8001066:	4b70      	ldr	r3, [pc, #448]	; (8001228 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4b70      	ldr	r3, [pc, #448]	; (800122c <HAL_TIM_IC_CaptureCallback+0x25c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d909      	bls.n	8001086 <HAL_TIM_IC_CaptureCallback+0xb6>
	                {
	                    Front_Difference = (0xffff - IC_Front_Val1) + IC_Front_Val2;
 8001072:	4b6e      	ldr	r3, [pc, #440]	; (800122c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b6c      	ldr	r3, [pc, #432]	; (8001228 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001080:	33ff      	adds	r3, #255	; 0xff
 8001082:	4a6b      	ldr	r2, [pc, #428]	; (8001230 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001084:	6013      	str	r3, [r2, #0]
	                }

	                Front_Distance = Front_Difference * .034 / 2;
 8001086:	4b6a      	ldr	r3, [pc, #424]	; (8001230 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f9ea 	bl	8000464 <__aeabi_ui2d>
 8001090:	a361      	add	r3, pc, #388	; (adr r3, 8001218 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fa5f 	bl	8000558 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010aa:	f7ff fb7f 	bl	80007ac <__aeabi_ddiv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f7ff fc61 	bl	800097c <__aeabi_d2uiz>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b5d      	ldr	r3, [pc, #372]	; (8001234 <HAL_TIM_IC_CaptureCallback+0x264>)
 80010c0:	701a      	strb	r2, [r3, #0]
	                Is_First_Captured_Front = 0; // set it back to false
 80010c2:	4b58      	ldr	r3, [pc, #352]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x254>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]

	                // set polarity to rising edge
	                __HAL_TIM_SET_CAPTUREPOLARITY(htim, FRONT_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6a1a      	ldr	r2, [r3, #32]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 020a 	bic.w	r2, r2, #10
 80010d6:	621a      	str	r2, [r3, #32]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6a12      	ldr	r2, [r2, #32]
 80010e2:	621a      	str	r2, [r3, #32]
	                __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80010e4:	4b54      	ldr	r3, [pc, #336]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x268>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	4b53      	ldr	r3, [pc, #332]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x268>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0202 	bic.w	r2, r2, #2
 80010f2:	60da      	str	r2, [r3, #12]
	            }
	        }

	    }

	    if (htim->Instance == TIM2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010fc:	f040 8088 	bne.w	8001210 <HAL_TIM_IC_CaptureCallback+0x240>
	    {
	        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel 3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7f1b      	ldrb	r3, [r3, #28]
 8001104:	2b02      	cmp	r3, #2
 8001106:	f040 8083 	bne.w	8001210 <HAL_TIM_IC_CaptureCallback+0x240>
	        {
	            if (Is_First_Captured_Back == 0) // if the first value is not captured
 800110a:	4b4c      	ldr	r3, [pc, #304]	; (800123c <HAL_TIM_IC_CaptureCallback+0x26c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d11a      	bne.n	8001148 <HAL_TIM_IC_CaptureCallback+0x178>
	            {
	                IC_Back_Val1 = HAL_TIM_ReadCapturedValue(htim, BACK_CHANNEL); // read the first value
 8001112:	2104      	movs	r1, #4
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f002 f9c9 	bl	80034ac <HAL_TIM_ReadCapturedValue>
 800111a:	4603      	mov	r3, r0
 800111c:	4a48      	ldr	r2, [pc, #288]	; (8001240 <HAL_TIM_IC_CaptureCallback+0x270>)
 800111e:	6013      	str	r3, [r2, #0]
	                Is_First_Captured_Back = 1;  // set the first captured as true
 8001120:	4b46      	ldr	r3, [pc, #280]	; (800123c <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
	                // Now change the polarity to falling edge
	                __HAL_TIM_SET_CAPTUREPOLARITY(htim, BACK_CHANNEL, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a1a      	ldr	r2, [r3, #32]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001134:	621a      	str	r2, [r3, #32]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6a1a      	ldr	r2, [r3, #32]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f042 0220 	orr.w	r2, r2, #32
 8001144:	621a      	str	r2, [r3, #32]
	            }
	        }
	    }


}
 8001146:	e063      	b.n	8001210 <HAL_TIM_IC_CaptureCallback+0x240>
	            else if (Is_First_Captured_Back == 1)   // if the first is already captured
 8001148:	4b3c      	ldr	r3, [pc, #240]	; (800123c <HAL_TIM_IC_CaptureCallback+0x26c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d15f      	bne.n	8001210 <HAL_TIM_IC_CaptureCallback+0x240>
	                IC_Back_Val2 = HAL_TIM_ReadCapturedValue(htim, BACK_CHANNEL);  // read second value
 8001150:	2104      	movs	r1, #4
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f002 f9aa 	bl	80034ac <HAL_TIM_ReadCapturedValue>
 8001158:	4603      	mov	r3, r0
 800115a:	4a3a      	ldr	r2, [pc, #232]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x274>)
 800115c:	6013      	str	r3, [r2, #0]
	                __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
	                if (IC_Back_Val2 > IC_Back_Val1)
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b35      	ldr	r3, [pc, #212]	; (8001240 <HAL_TIM_IC_CaptureCallback+0x270>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d907      	bls.n	8001182 <HAL_TIM_IC_CaptureCallback+0x1b2>
	                    Back_Difference = IC_Back_Val2 - IC_Back_Val1;
 8001172:	4b34      	ldr	r3, [pc, #208]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	4a32      	ldr	r2, [pc, #200]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x278>)
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e00f      	b.n	80011a2 <HAL_TIM_IC_CaptureCallback+0x1d2>
	                else if (IC_Back_Val1 > IC_Back_Val2)
 8001182:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d909      	bls.n	80011a2 <HAL_TIM_IC_CaptureCallback+0x1d2>
	                    Back_Difference = (0xffff - IC_Back_Val1) + IC_Back_Val2;
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800119c:	33ff      	adds	r3, #255	; 0xff
 800119e:	4a2a      	ldr	r2, [pc, #168]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x278>)
 80011a0:	6013      	str	r3, [r2, #0]
	                Back_Distance = Back_Difference * .034 / 2;
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x278>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f95c 	bl	8000464 <__aeabi_ui2d>
 80011ac:	a31a      	add	r3, pc, #104	; (adr r3, 8001218 <HAL_TIM_IC_CaptureCallback+0x248>)
 80011ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b2:	f7ff f9d1 	bl	8000558 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c6:	f7ff faf1 	bl	80007ac <__aeabi_ddiv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fbd3 	bl	800097c <__aeabi_d2uiz>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <HAL_TIM_IC_CaptureCallback+0x27c>)
 80011dc:	701a      	strb	r2, [r3, #0]
	                Is_First_Captured_Back = 0; // set it back to false
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_TIM_IC_CaptureCallback+0x26c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
	                __HAL_TIM_SET_CAPTUREPOLARITY(htim, BACK_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6a1a      	ldr	r2, [r3, #32]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80011f2:	621a      	str	r2, [r3, #32]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6a12      	ldr	r2, [r2, #32]
 80011fe:	621a      	str	r2, [r3, #32]
	                __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0204 	bic.w	r2, r2, #4
 800120e:	60da      	str	r2, [r3, #12]
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	b020c49c 	.word	0xb020c49c
 800121c:	3fa16872 	.word	0x3fa16872
 8001220:	40010000 	.word	0x40010000
 8001224:	200003b8 	.word	0x200003b8
 8001228:	200003ac 	.word	0x200003ac
 800122c:	200003b0 	.word	0x200003b0
 8001230:	200003b4 	.word	0x200003b4
 8001234:	200003b9 	.word	0x200003b9
 8001238:	20000280 	.word	0x20000280
 800123c:	200003c8 	.word	0x200003c8
 8001240:	200003bc 	.word	0x200003bc
 8001244:	200003c0 	.word	0x200003c0
 8001248:	200003c4 	.word	0x200003c4
 800124c:	200003c9 	.word	0x200003c9
 8001250:	200002c8 	.word	0x200002c8

08001254 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

		if (huart->Instance == USART1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <HAL_UART_RxCpltCallback+0x40>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d111      	bne.n	800128a <HAL_UART_RxCpltCallback+0x36>
		{
		        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <HAL_UART_RxCpltCallback+0x44>)
 800126a:	f001 f8c8 	bl	80023fe <HAL_GPIO_TogglePin>
		        Car_direction=received_command[0];
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_UART_RxCpltCallback+0x48>)
 8001270:	781a      	ldrb	r2, [r3, #0]
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_UART_RxCpltCallback+0x4c>)
 8001274:	701a      	strb	r2, [r3, #0]
		        Motor_Control(received_command[0]);
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_UART_RxCpltCallback+0x48>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f814 	bl	80012a8 <Motor_Control>
		        HAL_UART_Receive_IT(&huart1, received_command, 1);
 8001280:	2201      	movs	r2, #1
 8001282:	4906      	ldr	r1, [pc, #24]	; (800129c <HAL_UART_RxCpltCallback+0x48>)
 8001284:	4807      	ldr	r0, [pc, #28]	; (80012a4 <HAL_UART_RxCpltCallback+0x50>)
 8001286:	f002 fc15 	bl	8003ab4 <HAL_UART_Receive_IT>
		}
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40011000 	.word	0x40011000
 8001298:	40020000 	.word	0x40020000
 800129c:	200003d0 	.word	0x200003d0
 80012a0:	200003cc 	.word	0x200003cc
 80012a4:	20000310 	.word	0x20000310

080012a8 <Motor_Control>:


// Motor control function
void Motor_Control(uint8_t command)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
    switch (command)
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	3b42      	subs	r3, #66	; 0x42
 80012b6:	2b10      	cmp	r3, #16
 80012b8:	f200 8082 	bhi.w	80013c0 <Motor_Control+0x118>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <Motor_Control+0x1c>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	0800133b 	.word	0x0800133b
 80012c8:	080013c1 	.word	0x080013c1
 80012cc:	080013c1 	.word	0x080013c1
 80012d0:	080013c1 	.word	0x080013c1
 80012d4:	08001309 	.word	0x08001309
 80012d8:	080013c1 	.word	0x080013c1
 80012dc:	080013c1 	.word	0x080013c1
 80012e0:	080013c1 	.word	0x080013c1
 80012e4:	080013c1 	.word	0x080013c1
 80012e8:	080013c1 	.word	0x080013c1
 80012ec:	0800136d 	.word	0x0800136d
 80012f0:	080013c1 	.word	0x080013c1
 80012f4:	080013c1 	.word	0x080013c1
 80012f8:	080013c1 	.word	0x080013c1
 80012fc:	080013c1 	.word	0x080013c1
 8001300:	080013c1 	.word	0x080013c1
 8001304:	08001397 	.word	0x08001397
    {
    case MOTOR_FORWARD:
            // Forward
    	if(Forward_stop==0)
 8001308:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <Motor_Control+0x12c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d15a      	bne.n	80013c6 <Motor_Control+0x11e>
    	{
            HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	2101      	movs	r1, #1
 8001314:	4830      	ldr	r0, [pc, #192]	; (80013d8 <Motor_Control+0x130>)
 8001316:	f001 f859 	bl	80023cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2102      	movs	r1, #2
 800131e:	482e      	ldr	r0, [pc, #184]	; (80013d8 <Motor_Control+0x130>)
 8001320:	f001 f854 	bl	80023cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	2120      	movs	r1, #32
 8001328:	482b      	ldr	r0, [pc, #172]	; (80013d8 <Motor_Control+0x130>)
 800132a:	f001 f84f 	bl	80023cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2140      	movs	r1, #64	; 0x40
 8001332:	4829      	ldr	r0, [pc, #164]	; (80013d8 <Motor_Control+0x130>)
 8001334:	f001 f84a 	bl	80023cc <HAL_GPIO_WritePin>
    	}
            break;
 8001338:	e045      	b.n	80013c6 <Motor_Control+0x11e>
          case MOTOR_BACKWARD:
            // Backward
        	  if(Backward_stop==0)
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <Motor_Control+0x134>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d143      	bne.n	80013ca <Motor_Control+0x122>
        	  {
                  HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2101      	movs	r1, #1
 8001346:	4824      	ldr	r0, [pc, #144]	; (80013d8 <Motor_Control+0x130>)
 8001348:	f001 f840 	bl	80023cc <HAL_GPIO_WritePin>
                  HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	2102      	movs	r1, #2
 8001350:	4821      	ldr	r0, [pc, #132]	; (80013d8 <Motor_Control+0x130>)
 8001352:	f001 f83b 	bl	80023cc <HAL_GPIO_WritePin>
                  HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2120      	movs	r1, #32
 800135a:	481f      	ldr	r0, [pc, #124]	; (80013d8 <Motor_Control+0x130>)
 800135c:	f001 f836 	bl	80023cc <HAL_GPIO_WritePin>
                  HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	2140      	movs	r1, #64	; 0x40
 8001364:	481c      	ldr	r0, [pc, #112]	; (80013d8 <Motor_Control+0x130>)
 8001366:	f001 f831 	bl	80023cc <HAL_GPIO_WritePin>
        	  }

            break;
 800136a:	e02e      	b.n	80013ca <Motor_Control+0x122>
          case MOTOR_LEFT:
            // Left
            HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2101      	movs	r1, #1
 8001370:	4819      	ldr	r0, [pc, #100]	; (80013d8 <Motor_Control+0x130>)
 8001372:	f001 f82b 	bl	80023cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2102      	movs	r1, #2
 800137a:	4817      	ldr	r0, [pc, #92]	; (80013d8 <Motor_Control+0x130>)
 800137c:	f001 f826 	bl	80023cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	2120      	movs	r1, #32
 8001384:	4814      	ldr	r0, [pc, #80]	; (80013d8 <Motor_Control+0x130>)
 8001386:	f001 f821 	bl	80023cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	4812      	ldr	r0, [pc, #72]	; (80013d8 <Motor_Control+0x130>)
 8001390:	f001 f81c 	bl	80023cc <HAL_GPIO_WritePin>
            break;
 8001394:	e01a      	b.n	80013cc <Motor_Control+0x124>
          case MOTOR_RIGHT:
            // Right
            HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);
 8001396:	2201      	movs	r2, #1
 8001398:	2101      	movs	r1, #1
 800139a:	480f      	ldr	r0, [pc, #60]	; (80013d8 <Motor_Control+0x130>)
 800139c:	f001 f816 	bl	80023cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2102      	movs	r1, #2
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <Motor_Control+0x130>)
 80013a6:	f001 f811 	bl	80023cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2120      	movs	r1, #32
 80013ae:	480a      	ldr	r0, [pc, #40]	; (80013d8 <Motor_Control+0x130>)
 80013b0:	f001 f80c 	bl	80023cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);
 80013b4:	2201      	movs	r2, #1
 80013b6:	2140      	movs	r1, #64	; 0x40
 80013b8:	4807      	ldr	r0, [pc, #28]	; (80013d8 <Motor_Control+0x130>)
 80013ba:	f001 f807 	bl	80023cc <HAL_GPIO_WritePin>
            break;
 80013be:	e005      	b.n	80013cc <Motor_Control+0x124>
          case MOTOR_STOP:
          default:
            // Stop

        	  Stop();
 80013c0:	f7ff fdea 	bl	8000f98 <Stop>
            break;
 80013c4:	e002      	b.n	80013cc <Motor_Control+0x124>
            break;
 80013c6:	bf00      	nop
 80013c8:	e000      	b.n	80013cc <Motor_Control+0x124>
            break;
 80013ca:	bf00      	nop
    }
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200003d1 	.word	0x200003d1
 80013d8:	40020000 	.word	0x40020000
 80013dc:	200003d2 	.word	0x200003d2

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b090      	sub	sp, #64	; 0x40
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e6:	f000 fcb7 	bl	8001d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ea:	f000 f85d 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ee:	f000 f98d 	bl	800170c <MX_GPIO_Init>
  MX_TIM1_Init();
 80013f2:	f000 f8b9 	bl	8001568 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013f6:	f000 f90d 	bl	8001614 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80013fa:	f000 f95d 	bl	80016b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);  // Start input capture in interrupt mode for TIM1
 80013fe:	2100      	movs	r1, #0
 8001400:	481f      	ldr	r0, [pc, #124]	; (8001480 <main+0xa0>)
 8001402:	f001 fdad 	bl	8002f60 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001406:	2104      	movs	r1, #4
 8001408:	481e      	ldr	r0, [pc, #120]	; (8001484 <main+0xa4>)
 800140a:	f001 fda9 	bl	8002f60 <HAL_TIM_IC_Start_IT>

  HAL_UART_Receive_IT(&huart1, received_command, 1);
 800140e:	2201      	movs	r2, #1
 8001410:	491d      	ldr	r1, [pc, #116]	; (8001488 <main+0xa8>)
 8001412:	481e      	ldr	r0, [pc, #120]	; (800148c <main+0xac>)
 8001414:	f002 fb4e 	bl	8003ab4 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of Lcd */
  osMutexStaticDef(Lcd, &LcdControlBlock);
 8001418:	2300      	movs	r3, #0
 800141a:	63bb      	str	r3, [r7, #56]	; 0x38
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <main+0xb0>)
 800141e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LcdHandle = osMutexCreate(osMutex(Lcd));
 8001420:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001424:	4618      	mov	r0, r3
 8001426:	f003 fafa 	bl	8004a1e <osMutexCreate>
 800142a:	4603      	mov	r3, r0
 800142c:	4a19      	ldr	r2, [pc, #100]	; (8001494 <main+0xb4>)
 800142e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <main+0xb8>)
 8001432:	f107 041c 	add.w	r4, r7, #28
 8001436:	461d      	mov	r5, r3
 8001438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001440:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fa87 	bl	800495e <osThreadCreate>
 8001450:	4603      	mov	r3, r0
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <main+0xbc>)
 8001454:	6013      	str	r3, [r2, #0]

  /* definition and creation of UltrasonicBack */
  osThreadDef(UltrasonicBack, UltrasonicBack_Task, osPriorityAboveNormal, 0, 128);
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <main+0xc0>)
 8001458:	463c      	mov	r4, r7
 800145a:	461d      	mov	r5, r3
 800145c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800145e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001460:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001464:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UltrasonicBackHandle = osThreadCreate(osThread(UltrasonicBack), NULL);
 8001468:	463b      	mov	r3, r7
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fa76 	bl	800495e <osThreadCreate>
 8001472:	4603      	mov	r3, r0
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <main+0xc4>)
 8001476:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001478:	f003 fa6a 	bl	8004950 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800147c:	e7fe      	b.n	800147c <main+0x9c>
 800147e:	bf00      	nop
 8001480:	20000280 	.word	0x20000280
 8001484:	200002c8 	.word	0x200002c8
 8001488:	200003d0 	.word	0x200003d0
 800148c:	20000310 	.word	0x20000310
 8001490:	20000364 	.word	0x20000364
 8001494:	20000360 	.word	0x20000360
 8001498:	08007124 	.word	0x08007124
 800149c:	20000358 	.word	0x20000358
 80014a0:	08007150 	.word	0x08007150
 80014a4:	2000035c 	.word	0x2000035c

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	; 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	2230      	movs	r2, #48	; 0x30
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f005 fde8 	bl	800708c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <SystemClock_Config+0xb8>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a22      	ldr	r2, [pc, #136]	; (8001560 <SystemClock_Config+0xb8>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b20      	ldr	r3, [pc, #128]	; (8001560 <SystemClock_Config+0xb8>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <SystemClock_Config+0xbc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014f4:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <SystemClock_Config+0xbc>)
 80014f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <SystemClock_Config+0xbc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001508:	2302      	movs	r3, #2
 800150a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150c:	2301      	movs	r3, #1
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001510:	2310      	movs	r3, #16
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001514:	2300      	movs	r3, #0
 8001516:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	4618      	mov	r0, r3
 800151e:	f000 ff89 	bl	8002434 <HAL_RCC_OscConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001528:	f000 fa12 	bl	8001950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152c:	230f      	movs	r3, #15
 800152e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f001 f9eb 	bl	8002924 <HAL_RCC_ClockConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001554:	f000 f9fc 	bl	8001950 <Error_Handler>
  }
}
 8001558:	bf00      	nop
 800155a:	3750      	adds	r7, #80	; 0x50
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800
 8001564:	40007000 	.word	0x40007000

08001568 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_TIM1_Init+0xa4>)
 8001586:	4a22      	ldr	r2, [pc, #136]	; (8001610 <MX_TIM1_Init+0xa8>)
 8001588:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <MX_TIM1_Init+0xa4>)
 800158c:	220f      	movs	r2, #15
 800158e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_TIM1_Init+0xa4>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_TIM1_Init+0xa4>)
 8001598:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800159c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <MX_TIM1_Init+0xa4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <MX_TIM1_Init+0xa4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <MX_TIM1_Init+0xa4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80015b0:	4816      	ldr	r0, [pc, #88]	; (800160c <MX_TIM1_Init+0xa4>)
 80015b2:	f001 fc85 	bl	8002ec0 <HAL_TIM_IC_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015bc:	f000 f9c8 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4619      	mov	r1, r3
 80015ce:	480f      	ldr	r0, [pc, #60]	; (800160c <MX_TIM1_Init+0xa4>)
 80015d0:	f002 f99e 	bl	8003910 <HAL_TIMEx_MasterConfigSynchronization>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80015da:	f000 f9b9 	bl	8001950 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015e2:	2301      	movs	r3, #1
 80015e4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	2200      	movs	r2, #0
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_TIM1_Init+0xa4>)
 80015f6:	f001 febd 	bl	8003374 <HAL_TIM_IC_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001600:	f000 f9a6 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000280 	.word	0x20000280
 8001610:	40010000 	.word	0x40010000

08001614 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001624:	463b      	mov	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <MX_TIM2_Init+0xa0>)
 8001632:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001636:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001638:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <MX_TIM2_Init+0xa0>)
 800163a:	220f      	movs	r2, #15
 800163c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163e:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <MX_TIM2_Init+0xa0>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <MX_TIM2_Init+0xa0>)
 8001646:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800164a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <MX_TIM2_Init+0xa0>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <MX_TIM2_Init+0xa0>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001658:	4816      	ldr	r0, [pc, #88]	; (80016b4 <MX_TIM2_Init+0xa0>)
 800165a:	f001 fc31 	bl	8002ec0 <HAL_TIM_IC_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001664:	f000 f974 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4619      	mov	r1, r3
 8001676:	480f      	ldr	r0, [pc, #60]	; (80016b4 <MX_TIM2_Init+0xa0>)
 8001678:	f002 f94a 	bl	8003910 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001682:	f000 f965 	bl	8001950 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800168a:	2301      	movs	r3, #1
 800168c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001696:	463b      	mov	r3, r7
 8001698:	2204      	movs	r2, #4
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_TIM2_Init+0xa0>)
 800169e:	f001 fe69 	bl	8003374 <HAL_TIM_IC_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80016a8:	f000 f952 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200002c8 	.word	0x200002c8

080016b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_USART1_UART_Init+0x50>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_USART1_UART_Init+0x4c>)
 80016f0:	f002 f990 	bl	8003a14 <HAL_UART_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016fa:	f000 f929 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000310 	.word	0x20000310
 8001708:	40011000 	.word	0x40011000

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a22      	ldr	r2, [pc, #136]	; (80017b4 <MX_GPIO_Init+0xa8>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a1b      	ldr	r2, [pc, #108]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <MX_GPIO_Init+0xa8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 800175a:	2200      	movs	r2, #0
 800175c:	21e3      	movs	r1, #227	; 0xe3
 800175e:	4816      	ldr	r0, [pc, #88]	; (80017b8 <MX_GPIO_Init+0xac>)
 8001760:	f000 fe34 	bl	80023cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001764:	2200      	movs	r2, #0
 8001766:	f249 71f7 	movw	r1, #38903	; 0x97f7
 800176a:	4814      	ldr	r0, [pc, #80]	; (80017bc <MX_GPIO_Init+0xb0>)
 800176c:	f000 fe2e 	bl	80023cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 8001770:	23e3      	movs	r3, #227	; 0xe3
 8001772:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	4619      	mov	r1, r3
 8001786:	480c      	ldr	r0, [pc, #48]	; (80017b8 <MX_GPIO_Init+0xac>)
 8001788:	f000 fc9c 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB15 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800178c:	f249 73f7 	movw	r3, #38903	; 0x97f7
 8001790:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_GPIO_Init+0xb0>)
 80017a6:	f000 fc8d 	bl	80020c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017aa:	bf00      	nop
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400

080017c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 80017c8:	e7fe      	b.n	80017c8 <StartDefaultTask+0x8>
	...

080017cc <UltrasonicBack_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UltrasonicBack_Task */
void UltrasonicBack_Task(void const * argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltrasonicBack_Task */
	LCD_Init();
 80017d4:	f7ff fa70 	bl	8000cb8 <LCD_Init>
	//LCD_Write_String("hello");
  /* Infinite loop */
  for(;;)
  {

	HCSR04_Read(TRIG_Front_PORT, TRIG_Front_PIN, &htim1,TIM_IT_CC1);
 80017d8:	2302      	movs	r3, #2
 80017da:	4a47      	ldr	r2, [pc, #284]	; (80018f8 <UltrasonicBack_Task+0x12c>)
 80017dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e0:	4846      	ldr	r0, [pc, #280]	; (80018fc <UltrasonicBack_Task+0x130>)
 80017e2:	f7ff fb99 	bl	8000f18 <HCSR04_Read>
//	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
	HCSR04_Read(TRIG_Back_PORT, TRIG_Back_PIN, &htim2,TIM_IT_CC2);
 80017e6:	2304      	movs	r3, #4
 80017e8:	4a45      	ldr	r2, [pc, #276]	; (8001900 <UltrasonicBack_Task+0x134>)
 80017ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ee:	4843      	ldr	r0, [pc, #268]	; (80018fc <UltrasonicBack_Task+0x130>)
 80017f0:	f7ff fb92 	bl	8000f18 <HCSR04_Read>
//	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);

	if(Back_Distance < 15 && Car_direction== MOTOR_BACKWARD )
 80017f4:	4b43      	ldr	r3, [pc, #268]	; (8001904 <UltrasonicBack_Task+0x138>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b0e      	cmp	r3, #14
 80017fa:	d812      	bhi.n	8001822 <UltrasonicBack_Task+0x56>
 80017fc:	4b42      	ldr	r3, [pc, #264]	; (8001908 <UltrasonicBack_Task+0x13c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b42      	cmp	r3, #66	; 0x42
 8001802:	d10e      	bne.n	8001822 <UltrasonicBack_Task+0x56>
	{
		Backward_stop=1;
 8001804:	4b41      	ldr	r3, [pc, #260]	; (800190c <UltrasonicBack_Task+0x140>)
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
		Stop();
 800180a:	f7ff fbc5 	bl	8000f98 <Stop>
		LCD_Clear();
 800180e:	f7ff fb1b 	bl	8000e48 <LCD_Clear>
		LCD_Set_Cursor(0, 0);
 8001812:	2100      	movs	r1, #0
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff fb25 	bl	8000e64 <LCD_Set_Cursor>
		LCD_Write_String("7aseeeeb");
 800181a:	483d      	ldr	r0, [pc, #244]	; (8001910 <UltrasonicBack_Task+0x144>)
 800181c:	f7ff fb49 	bl	8000eb2 <LCD_Write_String>
	{
 8001820:	e064      	b.n	80018ec <UltrasonicBack_Task+0x120>
	}

	else if( Front_Distance < 15 && Car_direction==MOTOR_FORWARD)
 8001822:	4b3c      	ldr	r3, [pc, #240]	; (8001914 <UltrasonicBack_Task+0x148>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b0e      	cmp	r3, #14
 8001828:	d812      	bhi.n	8001850 <UltrasonicBack_Task+0x84>
 800182a:	4b37      	ldr	r3, [pc, #220]	; (8001908 <UltrasonicBack_Task+0x13c>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b46      	cmp	r3, #70	; 0x46
 8001830:	d10e      	bne.n	8001850 <UltrasonicBack_Task+0x84>
	{
		Forward_stop=1;
 8001832:	4b39      	ldr	r3, [pc, #228]	; (8001918 <UltrasonicBack_Task+0x14c>)
 8001834:	2201      	movs	r2, #1
 8001836:	701a      	strb	r2, [r3, #0]
		Stop();
 8001838:	f7ff fbae 	bl	8000f98 <Stop>
		LCD_Clear();
 800183c:	f7ff fb04 	bl	8000e48 <LCD_Clear>
		LCD_Set_Cursor(0, 0);
 8001840:	2100      	movs	r1, #0
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff fb0e 	bl	8000e64 <LCD_Set_Cursor>
		LCD_Write_String("7aseeeeb");
 8001848:	4831      	ldr	r0, [pc, #196]	; (8001910 <UltrasonicBack_Task+0x144>)
 800184a:	f7ff fb32 	bl	8000eb2 <LCD_Write_String>
	{
 800184e:	e04d      	b.n	80018ec <UltrasonicBack_Task+0x120>
	}
	else if(Back_Distance < 30 && Car_direction== MOTOR_BACKWARD)
 8001850:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <UltrasonicBack_Task+0x138>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b1d      	cmp	r3, #29
 8001856:	d817      	bhi.n	8001888 <UltrasonicBack_Task+0xbc>
 8001858:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <UltrasonicBack_Task+0x13c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b42      	cmp	r3, #66	; 0x42
 800185e:	d113      	bne.n	8001888 <UltrasonicBack_Task+0xbc>
			 {


		Backward_stop=0;
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <UltrasonicBack_Task+0x140>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
				Back_Flag=1;
 8001866:	4b2d      	ldr	r3, [pc, #180]	; (800191c <UltrasonicBack_Task+0x150>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
			   	if(Front_Flag == 1)
 800186c:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <UltrasonicBack_Task+0x154>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <UltrasonicBack_Task+0xac>
			    {
			    	LCD_Clear();
 8001874:	f7ff fae8 	bl	8000e48 <LCD_Clear>
			    }
			    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
				//LCD_Clear();
			   	LCD_Set_Cursor(0, 0);
 8001878:	2100      	movs	r1, #0
 800187a:	2000      	movs	r0, #0
 800187c:	f7ff faf2 	bl	8000e64 <LCD_Set_Cursor>
			    LCD_Write_String("WARNING: BACK");
 8001880:	4828      	ldr	r0, [pc, #160]	; (8001924 <UltrasonicBack_Task+0x158>)
 8001882:	f7ff fb16 	bl	8000eb2 <LCD_Write_String>
			 {
 8001886:	e031      	b.n	80018ec <UltrasonicBack_Task+0x120>
			 //  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
			  }


	 else if(Front_Distance < 30 && Car_direction==MOTOR_FORWARD)
 8001888:	4b22      	ldr	r3, [pc, #136]	; (8001914 <UltrasonicBack_Task+0x148>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b1d      	cmp	r3, #29
 800188e:	d817      	bhi.n	80018c0 <UltrasonicBack_Task+0xf4>
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <UltrasonicBack_Task+0x13c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b46      	cmp	r3, #70	; 0x46
 8001896:	d113      	bne.n	80018c0 <UltrasonicBack_Task+0xf4>
	    {
	    	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);

		 Forward_stop=0;
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <UltrasonicBack_Task+0x14c>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
	    	Front_Flag=1;
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <UltrasonicBack_Task+0x154>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
	    	if(Back_Flag == 1)
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <UltrasonicBack_Task+0x150>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <UltrasonicBack_Task+0xe4>
	    	{
	    		LCD_Clear();
 80018ac:	f7ff facc 	bl	8000e48 <LCD_Clear>
	    	}

	    	LCD_Set_Cursor(0, 0);
 80018b0:	2100      	movs	r1, #0
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff fad6 	bl	8000e64 <LCD_Set_Cursor>
	    	LCD_Write_String("WARNING: FRONT");
 80018b8:	481b      	ldr	r0, [pc, #108]	; (8001928 <UltrasonicBack_Task+0x15c>)
 80018ba:	f7ff fafa 	bl	8000eb2 <LCD_Write_String>
	    {
 80018be:	e015      	b.n	80018ec <UltrasonicBack_Task+0x120>
	    //	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	    }
	    else
	    {

	    	Forward_stop=0;
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <UltrasonicBack_Task+0x14c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
	    	Backward_stop=0;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <UltrasonicBack_Task+0x140>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
	    	Back_Flag=0;
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <UltrasonicBack_Task+0x150>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
	    	Front_Flag=0;
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <UltrasonicBack_Task+0x154>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
	    	///or lidar flag
	    	if(Back_Flag == 1 || Front_Flag==1)
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <UltrasonicBack_Task+0x150>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d005      	beq.n	80018ec <UltrasonicBack_Task+0x120>
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <UltrasonicBack_Task+0x154>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d001      	beq.n	80018ec <UltrasonicBack_Task+0x120>
	    	{

	    	}
	    	else
	    	{
	    		LCD_Clear();
 80018e8:	f7ff faae 	bl	8000e48 <LCD_Clear>
	    	}
	    }
//	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
    osDelay(300);
 80018ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018f0:	f003 f881 	bl	80049f6 <osDelay>
  {
 80018f4:	e770      	b.n	80017d8 <UltrasonicBack_Task+0xc>
 80018f6:	bf00      	nop
 80018f8:	20000280 	.word	0x20000280
 80018fc:	40020400 	.word	0x40020400
 8001900:	200002c8 	.word	0x200002c8
 8001904:	200003c9 	.word	0x200003c9
 8001908:	200003cc 	.word	0x200003cc
 800190c:	200003d2 	.word	0x200003d2
 8001910:	0800716c 	.word	0x0800716c
 8001914:	200003b9 	.word	0x200003b9
 8001918:	200003d1 	.word	0x200003d1
 800191c:	200003cb 	.word	0x200003cb
 8001920:	200003ca 	.word	0x200003ca
 8001924:	08007178 	.word	0x08007178
 8001928:	08007188 	.word	0x08007188

0800192c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800193e:	f000 fa2d 	bl	8001d9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40000400 	.word	0x40000400

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001958:	e7fe      	b.n	8001958 <Error_Handler+0x8>
	...

0800195c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_MspInit+0x54>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <HAL_MspInit+0x54>)
 800196c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001970:	6453      	str	r3, [r2, #68]	; 0x44
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_MspInit+0x54>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_MspInit+0x54>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <HAL_MspInit+0x54>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <HAL_MspInit+0x54>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	210f      	movs	r1, #15
 800199e:	f06f 0001 	mvn.w	r0, #1
 80019a2:	f000 fad3 	bl	8001f4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800

080019b4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08c      	sub	sp, #48	; 0x30
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a3a      	ldr	r2, [pc, #232]	; (8001abc <HAL_TIM_IC_MspInit+0x108>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d135      	bne.n	8001a42 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <HAL_TIM_IC_MspInit+0x10c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a38      	ldr	r2, [pc, #224]	; (8001ac0 <HAL_TIM_IC_MspInit+0x10c>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <HAL_TIM_IC_MspInit+0x10c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	4b32      	ldr	r3, [pc, #200]	; (8001ac0 <HAL_TIM_IC_MspInit+0x10c>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a31      	ldr	r2, [pc, #196]	; (8001ac0 <HAL_TIM_IC_MspInit+0x10c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <HAL_TIM_IC_MspInit+0x10c>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a20:	2301      	movs	r3, #1
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4826      	ldr	r0, [pc, #152]	; (8001ac4 <HAL_TIM_IC_MspInit+0x110>)
 8001a2c:	f000 fb4a 	bl	80020c4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2105      	movs	r1, #5
 8001a34:	201b      	movs	r0, #27
 8001a36:	f000 fa89 	bl	8001f4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a3a:	201b      	movs	r0, #27
 8001a3c:	f000 faa2 	bl	8001f84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a40:	e038      	b.n	8001ab4 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM2)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a4a:	d133      	bne.n	8001ab4 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <HAL_TIM_IC_MspInit+0x10c>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	4a1a      	ldr	r2, [pc, #104]	; (8001ac0 <HAL_TIM_IC_MspInit+0x10c>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_TIM_IC_MspInit+0x10c>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <HAL_TIM_IC_MspInit+0x10c>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a13      	ldr	r2, [pc, #76]	; (8001ac0 <HAL_TIM_IC_MspInit+0x10c>)
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_TIM_IC_MspInit+0x10c>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a84:	2308      	movs	r3, #8
 8001a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a94:	2301      	movs	r3, #1
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480a      	ldr	r0, [pc, #40]	; (8001ac8 <HAL_TIM_IC_MspInit+0x114>)
 8001aa0:	f000 fb10 	bl	80020c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2105      	movs	r1, #5
 8001aa8:	201c      	movs	r0, #28
 8001aaa:	f000 fa4f 	bl	8001f4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001aae:	201c      	movs	r0, #28
 8001ab0:	f000 fa68 	bl	8001f84 <HAL_NVIC_EnableIRQ>
}
 8001ab4:	bf00      	nop
 8001ab6:	3730      	adds	r7, #48	; 0x30
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400

08001acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_UART_MspInit+0x94>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d134      	bne.n	8001b58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001af8:	f043 0310 	orr.w	r3, r3, #16
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	4809      	ldr	r0, [pc, #36]	; (8001b68 <HAL_UART_MspInit+0x9c>)
 8001b44:	f000 fabe 	bl	80020c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2105      	movs	r1, #5
 8001b4c:	2025      	movs	r0, #37	; 0x25
 8001b4e:	f000 f9fd 	bl	8001f4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b52:	2025      	movs	r0, #37	; 0x25
 8001b54:	f000 fa16 	bl	8001f84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b58:	bf00      	nop
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40011000 	.word	0x40011000
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020000 	.word	0x40020000

08001b6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08e      	sub	sp, #56	; 0x38
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <HAL_InitTick+0xe4>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	4a32      	ldr	r2, [pc, #200]	; (8001c50 <HAL_InitTick+0xe4>)
 8001b86:	f043 0302 	orr.w	r3, r3, #2
 8001b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8c:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <HAL_InitTick+0xe4>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b98:	f107 0210 	add.w	r2, r7, #16
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 f89e 	bl	8002ce4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d103      	bne.n	8001bba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bb2:	f001 f86f 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
 8001bb6:	6378      	str	r0, [r7, #52]	; 0x34
 8001bb8:	e004      	b.n	8001bc4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001bba:	f001 f86b 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc6:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_InitTick+0xe8>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	0c9b      	lsrs	r3, r3, #18
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_InitTick+0xec>)
 8001bd4:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <HAL_InitTick+0xf0>)
 8001bd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <HAL_InitTick+0xec>)
 8001bda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bde:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001be0:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <HAL_InitTick+0xec>)
 8001be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <HAL_InitTick+0xec>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_InitTick+0xec>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_InitTick+0xec>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001bf8:	4817      	ldr	r0, [pc, #92]	; (8001c58 <HAL_InitTick+0xec>)
 8001bfa:	f001 f8a5 	bl	8002d48 <HAL_TIM_Base_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d11b      	bne.n	8001c44 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001c0c:	4812      	ldr	r0, [pc, #72]	; (8001c58 <HAL_InitTick+0xec>)
 8001c0e:	f001 f8f5 	bl	8002dfc <HAL_TIM_Base_Start_IT>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d111      	bne.n	8001c44 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c20:	201d      	movs	r0, #29
 8001c22:	f000 f9af 	bl	8001f84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d808      	bhi.n	8001c3e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	201d      	movs	r0, #29
 8001c32:	f000 f98b 	bl	8001f4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_InitTick+0xf4>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e002      	b.n	8001c44 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3738      	adds	r7, #56	; 0x38
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	431bde83 	.word	0x431bde83
 8001c58:	200003d4 	.word	0x200003d4
 8001c5c:	40000400 	.word	0x40000400
 8001c60:	20000004 	.word	0x20000004

08001c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c68:	e7fe      	b.n	8001c68 <NMI_Handler+0x4>

08001c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <HardFault_Handler+0x4>

08001c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <MemManage_Handler+0x4>

08001c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <BusFault_Handler+0x4>

08001c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <UsageFault_Handler+0x4>

08001c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <TIM1_CC_IRQHandler+0x10>)
 8001c96:	f001 fa7d 	bl	8003194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000280 	.word	0x20000280

08001ca4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <TIM2_IRQHandler+0x10>)
 8001caa:	f001 fa73 	bl	8003194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200002c8 	.word	0x200002c8

08001cb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <TIM3_IRQHandler+0x10>)
 8001cbe:	f001 fa69 	bl	8003194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200003d4 	.word	0x200003d4

08001ccc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <USART1_IRQHandler+0x10>)
 8001cd2:	f001 ff15 	bl	8003b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000310 	.word	0x20000310

08001ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d08:	f7ff ffea 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d0c:	480c      	ldr	r0, [pc, #48]	; (8001d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d0e:	490d      	ldr	r1, [pc, #52]	; (8001d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d24:	4c0a      	ldr	r4, [pc, #40]	; (8001d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d32:	f005 f9b3 	bl	800709c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d36:	f7ff fb53 	bl	80013e0 <main>
  bx  lr    
 8001d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d44:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d48:	080071c8 	.word	0x080071c8
  ldr r2, =_sbss
 8001d4c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d50:	20004174 	.word	0x20004174

08001d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC_IRQHandler>
	...

08001d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <HAL_Init+0x40>)
 8001d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <HAL_Init+0x40>)
 8001d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <HAL_Init+0x40>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d80:	2003      	movs	r0, #3
 8001d82:	f000 f8d8 	bl	8001f36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d86:	200f      	movs	r0, #15
 8001d88:	f7ff fef0 	bl	8001b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d8c:	f7ff fde6 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023c00 	.word	0x40023c00

08001d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_IncTick+0x20>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_IncTick+0x24>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <HAL_IncTick+0x24>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	2000041c 	.word	0x2000041c

08001dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_GetTick+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	2000041c 	.word	0x2000041c

08001ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0e:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	60d3      	str	r3, [r2, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <__NVIC_GetPriorityGrouping+0x18>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 0307 	and.w	r3, r3, #7
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	db0b      	blt.n	8001e6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	4907      	ldr	r1, [pc, #28]	; (8001e78 <__NVIC_EnableIRQ+0x38>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	2001      	movs	r0, #1
 8001e62:	fa00 f202 	lsl.w	r2, r0, r2
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000e100 	.word	0xe000e100

08001e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db0a      	blt.n	8001ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	490c      	ldr	r1, [pc, #48]	; (8001ec8 <__NVIC_SetPriority+0x4c>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea4:	e00a      	b.n	8001ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <__NVIC_SetPriority+0x50>)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	761a      	strb	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f1c3 0307 	rsb	r3, r3, #7
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	bf28      	it	cs
 8001eee:	2304      	movcs	r3, #4
 8001ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d902      	bls.n	8001f00 <NVIC_EncodePriority+0x30>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3b03      	subs	r3, #3
 8001efe:	e000      	b.n	8001f02 <NVIC_EncodePriority+0x32>
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43d9      	mvns	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	4313      	orrs	r3, r2
         );
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ff4c 	bl	8001ddc <__NVIC_SetPriorityGrouping>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5e:	f7ff ff61 	bl	8001e24 <__NVIC_GetPriorityGrouping>
 8001f62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	68b9      	ldr	r1, [r7, #8]
 8001f68:	6978      	ldr	r0, [r7, #20]
 8001f6a:	f7ff ffb1 	bl	8001ed0 <NVIC_EncodePriority>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff80 	bl	8001e7c <__NVIC_SetPriority>
}
 8001f7c:	bf00      	nop
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff54 	bl	8001e40 <__NVIC_EnableIRQ>
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fae:	f7ff ff09 	bl	8001dc4 <HAL_GetTick>
 8001fb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d008      	beq.n	8001fd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2280      	movs	r2, #128	; 0x80
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e052      	b.n	8002078 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0216 	bic.w	r2, r2, #22
 8001fe0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ff0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d103      	bne.n	8002002 <HAL_DMA_Abort+0x62>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0208 	bic.w	r2, r2, #8
 8002010:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002022:	e013      	b.n	800204c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002024:	f7ff fece 	bl	8001dc4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b05      	cmp	r3, #5
 8002030:	d90c      	bls.n	800204c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2203      	movs	r2, #3
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e015      	b.n	8002078 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1e4      	bne.n	8002024 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	223f      	movs	r2, #63	; 0x3f
 8002060:	409a      	lsls	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d004      	beq.n	800209e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e00c      	b.n	80020b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2205      	movs	r2, #5
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0201 	bic.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	e159      	b.n	8002394 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f040 8148 	bne.w	800238e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d005      	beq.n	8002116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002112:	2b02      	cmp	r3, #2
 8002114:	d130      	bne.n	8002178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800214c:	2201      	movs	r2, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 0201 	and.w	r2, r3, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b03      	cmp	r3, #3
 8002182:	d017      	beq.n	80021b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d123      	bne.n	8002208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80a2 	beq.w	800238e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b57      	ldr	r3, [pc, #348]	; (80023ac <HAL_GPIO_Init+0x2e8>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a56      	ldr	r2, [pc, #344]	; (80023ac <HAL_GPIO_Init+0x2e8>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b54      	ldr	r3, [pc, #336]	; (80023ac <HAL_GPIO_Init+0x2e8>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002266:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_GPIO_Init+0x2ec>)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a49      	ldr	r2, [pc, #292]	; (80023b4 <HAL_GPIO_Init+0x2f0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d019      	beq.n	80022c6 <HAL_GPIO_Init+0x202>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a48      	ldr	r2, [pc, #288]	; (80023b8 <HAL_GPIO_Init+0x2f4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_GPIO_Init+0x1fe>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a47      	ldr	r2, [pc, #284]	; (80023bc <HAL_GPIO_Init+0x2f8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00d      	beq.n	80022be <HAL_GPIO_Init+0x1fa>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a46      	ldr	r2, [pc, #280]	; (80023c0 <HAL_GPIO_Init+0x2fc>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d007      	beq.n	80022ba <HAL_GPIO_Init+0x1f6>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a45      	ldr	r2, [pc, #276]	; (80023c4 <HAL_GPIO_Init+0x300>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d101      	bne.n	80022b6 <HAL_GPIO_Init+0x1f2>
 80022b2:	2304      	movs	r3, #4
 80022b4:	e008      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022b6:	2307      	movs	r3, #7
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022ba:	2303      	movs	r3, #3
 80022bc:	e004      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022be:	2302      	movs	r3, #2
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x204>
 80022c6:	2300      	movs	r3, #0
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	f002 0203 	and.w	r2, r2, #3
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	4093      	lsls	r3, r2
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d8:	4935      	ldr	r1, [pc, #212]	; (80023b0 <HAL_GPIO_Init+0x2ec>)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022e6:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <HAL_GPIO_Init+0x304>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800230a:	4a2f      	ldr	r2, [pc, #188]	; (80023c8 <HAL_GPIO_Init+0x304>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_GPIO_Init+0x304>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002334:	4a24      	ldr	r2, [pc, #144]	; (80023c8 <HAL_GPIO_Init+0x304>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800233a:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <HAL_GPIO_Init+0x304>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800235e:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <HAL_GPIO_Init+0x304>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_GPIO_Init+0x304>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002388:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <HAL_GPIO_Init+0x304>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3301      	adds	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2b0f      	cmp	r3, #15
 8002398:	f67f aea2 	bls.w	80020e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40013800 	.word	0x40013800
 80023b4:	40020000 	.word	0x40020000
 80023b8:	40020400 	.word	0x40020400
 80023bc:	40020800 	.word	0x40020800
 80023c0:	40020c00 	.word	0x40020c00
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40013c00 	.word	0x40013c00

080023cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
 80023d8:	4613      	mov	r3, r2
 80023da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e8:	e003      	b.n	80023f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	041a      	lsls	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	619a      	str	r2, [r3, #24]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023fe:	b480      	push	{r7}
 8002400:	b085      	sub	sp, #20
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002410:	887a      	ldrh	r2, [r7, #2]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4013      	ands	r3, r2
 8002416:	041a      	lsls	r2, r3, #16
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	43d9      	mvns	r1, r3
 800241c:	887b      	ldrh	r3, [r7, #2]
 800241e:	400b      	ands	r3, r1
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	619a      	str	r2, [r3, #24]
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e267      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d075      	beq.n	800253e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002452:	4b88      	ldr	r3, [pc, #544]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b04      	cmp	r3, #4
 800245c:	d00c      	beq.n	8002478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245e:	4b85      	ldr	r3, [pc, #532]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002466:	2b08      	cmp	r3, #8
 8002468:	d112      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246a:	4b82      	ldr	r3, [pc, #520]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002476:	d10b      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	4b7e      	ldr	r3, [pc, #504]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d05b      	beq.n	800253c <HAL_RCC_OscConfig+0x108>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d157      	bne.n	800253c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e242      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d106      	bne.n	80024a8 <HAL_RCC_OscConfig+0x74>
 800249a:	4b76      	ldr	r3, [pc, #472]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a75      	ldr	r2, [pc, #468]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e01d      	b.n	80024e4 <HAL_RCC_OscConfig+0xb0>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x98>
 80024b2:	4b70      	ldr	r3, [pc, #448]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a6f      	ldr	r2, [pc, #444]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b6d      	ldr	r3, [pc, #436]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6c      	ldr	r2, [pc, #432]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0xb0>
 80024cc:	4b69      	ldr	r3, [pc, #420]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a68      	ldr	r2, [pc, #416]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b66      	ldr	r3, [pc, #408]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a65      	ldr	r2, [pc, #404]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff fc6a 	bl	8001dc4 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7ff fc66 	bl	8001dc4 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e207      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b5b      	ldr	r3, [pc, #364]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0xc0>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7ff fc56 	bl	8001dc4 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251c:	f7ff fc52 	bl	8001dc4 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1f3      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	4b51      	ldr	r3, [pc, #324]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0xe8>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d063      	beq.n	8002612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254a:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255e:	2b08      	cmp	r3, #8
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b44      	ldr	r3, [pc, #272]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x152>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1c7      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4937      	ldr	r1, [pc, #220]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b34      	ldr	r3, [pc, #208]	; (8002678 <HAL_RCC_OscConfig+0x244>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7ff fc0b 	bl	8001dc4 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b2:	f7ff fc07 	bl	8001dc4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1a8      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b28      	ldr	r3, [pc, #160]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4925      	ldr	r1, [pc, #148]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RCC_OscConfig+0x244>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff fbea 	bl	8001dc4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f4:	f7ff fbe6 	bl	8001dc4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e187      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d036      	beq.n	800268c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_RCC_OscConfig+0x248>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7ff fbca 	bl	8001dc4 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002634:	f7ff fbc6 	bl	8001dc4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e167      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_OscConfig+0x240>)
 8002648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x200>
 8002652:	e01b      	b.n	800268c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_RCC_OscConfig+0x248>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265a:	f7ff fbb3 	bl	8001dc4 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	e00e      	b.n	8002680 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002662:	f7ff fbaf 	bl	8001dc4 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d907      	bls.n	8002680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e150      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
 8002674:	40023800 	.word	0x40023800
 8002678:	42470000 	.word	0x42470000
 800267c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002680:	4b88      	ldr	r3, [pc, #544]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ea      	bne.n	8002662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8097 	beq.w	80027c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269e:	4b81      	ldr	r3, [pc, #516]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10f      	bne.n	80026ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	4b7d      	ldr	r3, [pc, #500]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a7c      	ldr	r2, [pc, #496]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b7a      	ldr	r3, [pc, #488]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c6:	2301      	movs	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ca:	4b77      	ldr	r3, [pc, #476]	; (80028a8 <HAL_RCC_OscConfig+0x474>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d118      	bne.n	8002708 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d6:	4b74      	ldr	r3, [pc, #464]	; (80028a8 <HAL_RCC_OscConfig+0x474>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a73      	ldr	r2, [pc, #460]	; (80028a8 <HAL_RCC_OscConfig+0x474>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e2:	f7ff fb6f 	bl	8001dc4 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ea:	f7ff fb6b 	bl	8001dc4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e10c      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	4b6a      	ldr	r3, [pc, #424]	; (80028a8 <HAL_RCC_OscConfig+0x474>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x2ea>
 8002710:	4b64      	ldr	r3, [pc, #400]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	4a63      	ldr	r2, [pc, #396]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
 800271c:	e01c      	b.n	8002758 <HAL_RCC_OscConfig+0x324>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b05      	cmp	r3, #5
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x30c>
 8002726:	4b5f      	ldr	r3, [pc, #380]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a5e      	ldr	r2, [pc, #376]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	4b5c      	ldr	r3, [pc, #368]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a5b      	ldr	r2, [pc, #364]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0x324>
 8002740:	4b58      	ldr	r3, [pc, #352]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4a57      	ldr	r2, [pc, #348]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
 800274c:	4b55      	ldr	r3, [pc, #340]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a54      	ldr	r2, [pc, #336]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002752:	f023 0304 	bic.w	r3, r3, #4
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d015      	beq.n	800278c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7ff fb30 	bl	8001dc4 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	e00a      	b.n	800277e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7ff fb2c 	bl	8001dc4 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0cb      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277e:	4b49      	ldr	r3, [pc, #292]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ee      	beq.n	8002768 <HAL_RCC_OscConfig+0x334>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278c:	f7ff fb1a 	bl	8001dc4 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7ff fb16 	bl	8001dc4 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0b5      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027aa:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1ee      	bne.n	8002794 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027bc:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	4a38      	ldr	r2, [pc, #224]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 80027c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a1 	beq.w	8002914 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027d2:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d05c      	beq.n	8002898 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d141      	bne.n	800286a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b31      	ldr	r3, [pc, #196]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7ff faea 	bl	8001dc4 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f4:	f7ff fae6 	bl	8001dc4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e087      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	019b      	lsls	r3, r3, #6
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	3b01      	subs	r3, #1
 800282c:	041b      	lsls	r3, r3, #16
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	491b      	ldr	r1, [pc, #108]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002842:	f7ff fabf 	bl	8001dc4 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284a:	f7ff fabb 	bl	8001dc4 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e05c      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x416>
 8002868:	e054      	b.n	8002914 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_RCC_OscConfig+0x478>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7ff faa8 	bl	8001dc4 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002878:	f7ff faa4 	bl	8001dc4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e045      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_RCC_OscConfig+0x470>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x444>
 8002896:	e03d      	b.n	8002914 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d107      	bne.n	80028b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e038      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40007000 	.word	0x40007000
 80028ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_RCC_OscConfig+0x4ec>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d028      	beq.n	8002910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d121      	bne.n	8002910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d11a      	bne.n	8002910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028e0:	4013      	ands	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d111      	bne.n	8002910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	085b      	lsrs	r3, r3, #1
 80028f8:	3b01      	subs	r3, #1
 80028fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800

08002924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0cc      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002938:	4b68      	ldr	r3, [pc, #416]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d90c      	bls.n	8002960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b65      	ldr	r3, [pc, #404]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0b8      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002978:	4b59      	ldr	r3, [pc, #356]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a58      	ldr	r2, [pc, #352]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002982:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002990:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800299a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	494d      	ldr	r1, [pc, #308]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d044      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d119      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e07f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	4b3f      	ldr	r3, [pc, #252]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e06f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f2:	4b3b      	ldr	r3, [pc, #236]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e067      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a02:	4b37      	ldr	r3, [pc, #220]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f023 0203 	bic.w	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4934      	ldr	r1, [pc, #208]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a14:	f7ff f9d6 	bl	8001dc4 <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1c:	f7ff f9d2 	bl	8001dc4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e04f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 020c 	and.w	r2, r3, #12
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d1eb      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a44:	4b25      	ldr	r3, [pc, #148]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d20c      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e032      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4916      	ldr	r1, [pc, #88]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aaa:	f000 f821 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	490a      	ldr	r1, [pc, #40]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	5ccb      	ldrb	r3, [r1, r3]
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff f84e 	bl	8001b6c <HAL_InitTick>

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023c00 	.word	0x40023c00
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	080071a0 	.word	0x080071a0
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	20000004 	.word	0x20000004

08002af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af4:	b090      	sub	sp, #64	; 0x40
 8002af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	637b      	str	r3, [r7, #52]	; 0x34
 8002afc:	2300      	movs	r3, #0
 8002afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b00:	2300      	movs	r3, #0
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b08:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d00d      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x40>
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	f200 80a1 	bhi.w	8002c5c <HAL_RCC_GetSysClockFreq+0x16c>
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x34>
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d003      	beq.n	8002b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b22:	e09b      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b24:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b26:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b28:	e09b      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b2a:	4b53      	ldr	r3, [pc, #332]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b2e:	e098      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b30:	4b4f      	ldr	r3, [pc, #316]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b38:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b3a:	4b4d      	ldr	r3, [pc, #308]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d028      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b46:	4b4a      	ldr	r3, [pc, #296]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	099b      	lsrs	r3, r3, #6
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	623b      	str	r3, [r7, #32]
 8002b50:	627a      	str	r2, [r7, #36]	; 0x24
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b5c:	fb03 f201 	mul.w	r2, r3, r1
 8002b60:	2300      	movs	r3, #0
 8002b62:	fb00 f303 	mul.w	r3, r0, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	4a43      	ldr	r2, [pc, #268]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b6a:	fba0 1202 	umull	r1, r2, r0, r2
 8002b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b70:	460a      	mov	r2, r1
 8002b72:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b76:	4413      	add	r3, r2
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	61fa      	str	r2, [r7, #28]
 8002b82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b8a:	f7fd ff17 	bl	80009bc <__aeabi_uldivmod>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4613      	mov	r3, r2
 8002b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b96:	e053      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b98:	4b35      	ldr	r3, [pc, #212]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	099b      	lsrs	r3, r3, #6
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	617a      	str	r2, [r7, #20]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002baa:	f04f 0b00 	mov.w	fp, #0
 8002bae:	4652      	mov	r2, sl
 8002bb0:	465b      	mov	r3, fp
 8002bb2:	f04f 0000 	mov.w	r0, #0
 8002bb6:	f04f 0100 	mov.w	r1, #0
 8002bba:	0159      	lsls	r1, r3, #5
 8002bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc0:	0150      	lsls	r0, r2, #5
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	ebb2 080a 	subs.w	r8, r2, sl
 8002bca:	eb63 090b 	sbc.w	r9, r3, fp
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002be2:	ebb2 0408 	subs.w	r4, r2, r8
 8002be6:	eb63 0509 	sbc.w	r5, r3, r9
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	00eb      	lsls	r3, r5, #3
 8002bf4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bf8:	00e2      	lsls	r2, r4, #3
 8002bfa:	4614      	mov	r4, r2
 8002bfc:	461d      	mov	r5, r3
 8002bfe:	eb14 030a 	adds.w	r3, r4, sl
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	eb45 030b 	adc.w	r3, r5, fp
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c16:	4629      	mov	r1, r5
 8002c18:	028b      	lsls	r3, r1, #10
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c20:	4621      	mov	r1, r4
 8002c22:	028a      	lsls	r2, r1, #10
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	60fa      	str	r2, [r7, #12]
 8002c30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c34:	f7fd fec2 	bl	80009bc <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c5a:	e002      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3740      	adds	r7, #64	; 0x40
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	00f42400 	.word	0x00f42400
 8002c78:	017d7840 	.word	0x017d7840

08002c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	20000000 	.word	0x20000000

08002c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c98:	f7ff fff0 	bl	8002c7c <HAL_RCC_GetHCLKFreq>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	0a9b      	lsrs	r3, r3, #10
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	4903      	ldr	r1, [pc, #12]	; (8002cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002caa:	5ccb      	ldrb	r3, [r1, r3]
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	080071b0 	.word	0x080071b0

08002cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cc0:	f7ff ffdc 	bl	8002c7c <HAL_RCC_GetHCLKFreq>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	0b5b      	lsrs	r3, r3, #13
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	4903      	ldr	r1, [pc, #12]	; (8002ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cd2:	5ccb      	ldrb	r3, [r1, r3]
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	080071b0 	.word	0x080071b0

08002ce4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	220f      	movs	r2, #15
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_RCC_GetClockConfig+0x5c>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0203 	and.w	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_RCC_GetClockConfig+0x5c>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <HAL_RCC_GetClockConfig+0x5c>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_RCC_GetClockConfig+0x5c>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	08db      	lsrs	r3, r3, #3
 8002d1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <HAL_RCC_GetClockConfig+0x60>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0207 	and.w	r2, r3, #7
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	601a      	str	r2, [r3, #0]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40023c00 	.word	0x40023c00

08002d48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e041      	b.n	8002dde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f839 	bl	8002de6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3304      	adds	r3, #4
 8002d84:	4619      	mov	r1, r3
 8002d86:	4610      	mov	r0, r2
 8002d88:	f000 fbf2 	bl	8003570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d001      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e044      	b.n	8002e9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <HAL_TIM_Base_Start_IT+0xb0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d018      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x6c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3e:	d013      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x6c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00e      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x6c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d009      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x6c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x6c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_TIM_Base_Start_IT+0xc0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d111      	bne.n	8002e8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d010      	beq.n	8002e9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0201 	orr.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8a:	e007      	b.n	8002e9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40000800 	.word	0x40000800
 8002eb8:	40000c00 	.word	0x40000c00
 8002ebc:	40014000 	.word	0x40014000

08002ec0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e041      	b.n	8002f56 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe fd64 	bl	80019b4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f000 fb36 	bl	8003570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d104      	bne.n	8002f7e <HAL_TIM_IC_Start_IT+0x1e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	e013      	b.n	8002fa6 <HAL_TIM_IC_Start_IT+0x46>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d104      	bne.n	8002f8e <HAL_TIM_IC_Start_IT+0x2e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	e00b      	b.n	8002fa6 <HAL_TIM_IC_Start_IT+0x46>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d104      	bne.n	8002f9e <HAL_TIM_IC_Start_IT+0x3e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	e003      	b.n	8002fa6 <HAL_TIM_IC_Start_IT+0x46>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <HAL_TIM_IC_Start_IT+0x58>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e013      	b.n	8002fe0 <HAL_TIM_IC_Start_IT+0x80>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d104      	bne.n	8002fc8 <HAL_TIM_IC_Start_IT+0x68>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	e00b      	b.n	8002fe0 <HAL_TIM_IC_Start_IT+0x80>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d104      	bne.n	8002fd8 <HAL_TIM_IC_Start_IT+0x78>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e003      	b.n	8002fe0 <HAL_TIM_IC_Start_IT+0x80>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fe2:	7bbb      	ldrb	r3, [r7, #14]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d102      	bne.n	8002fee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fe8:	7b7b      	ldrb	r3, [r7, #13]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d001      	beq.n	8002ff2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0c2      	b.n	8003178 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <HAL_TIM_IC_Start_IT+0xa2>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003000:	e013      	b.n	800302a <HAL_TIM_IC_Start_IT+0xca>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d104      	bne.n	8003012 <HAL_TIM_IC_Start_IT+0xb2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003010:	e00b      	b.n	800302a <HAL_TIM_IC_Start_IT+0xca>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d104      	bne.n	8003022 <HAL_TIM_IC_Start_IT+0xc2>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003020:	e003      	b.n	800302a <HAL_TIM_IC_Start_IT+0xca>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2202      	movs	r2, #2
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d104      	bne.n	800303a <HAL_TIM_IC_Start_IT+0xda>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003038:	e013      	b.n	8003062 <HAL_TIM_IC_Start_IT+0x102>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d104      	bne.n	800304a <HAL_TIM_IC_Start_IT+0xea>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003048:	e00b      	b.n	8003062 <HAL_TIM_IC_Start_IT+0x102>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d104      	bne.n	800305a <HAL_TIM_IC_Start_IT+0xfa>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003058:	e003      	b.n	8003062 <HAL_TIM_IC_Start_IT+0x102>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b0c      	cmp	r3, #12
 8003066:	d841      	bhi.n	80030ec <HAL_TIM_IC_Start_IT+0x18c>
 8003068:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_TIM_IC_Start_IT+0x110>)
 800306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306e:	bf00      	nop
 8003070:	080030a5 	.word	0x080030a5
 8003074:	080030ed 	.word	0x080030ed
 8003078:	080030ed 	.word	0x080030ed
 800307c:	080030ed 	.word	0x080030ed
 8003080:	080030b7 	.word	0x080030b7
 8003084:	080030ed 	.word	0x080030ed
 8003088:	080030ed 	.word	0x080030ed
 800308c:	080030ed 	.word	0x080030ed
 8003090:	080030c9 	.word	0x080030c9
 8003094:	080030ed 	.word	0x080030ed
 8003098:	080030ed 	.word	0x080030ed
 800309c:	080030ed 	.word	0x080030ed
 80030a0:	080030db 	.word	0x080030db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0202 	orr.w	r2, r2, #2
 80030b2:	60da      	str	r2, [r3, #12]
      break;
 80030b4:	e01d      	b.n	80030f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0204 	orr.w	r2, r2, #4
 80030c4:	60da      	str	r2, [r3, #12]
      break;
 80030c6:	e014      	b.n	80030f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0208 	orr.w	r2, r2, #8
 80030d6:	60da      	str	r2, [r3, #12]
      break;
 80030d8:	e00b      	b.n	80030f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0210 	orr.w	r2, r2, #16
 80030e8:	60da      	str	r2, [r3, #12]
      break;
 80030ea:	e002      	b.n	80030f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      break;
 80030f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d13e      	bne.n	8003176 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2201      	movs	r2, #1
 80030fe:	6839      	ldr	r1, [r7, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fbdf 	bl	80038c4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_TIM_IC_Start_IT+0x220>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d018      	beq.n	8003142 <HAL_TIM_IC_Start_IT+0x1e2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003118:	d013      	beq.n	8003142 <HAL_TIM_IC_Start_IT+0x1e2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a19      	ldr	r2, [pc, #100]	; (8003184 <HAL_TIM_IC_Start_IT+0x224>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00e      	beq.n	8003142 <HAL_TIM_IC_Start_IT+0x1e2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a17      	ldr	r2, [pc, #92]	; (8003188 <HAL_TIM_IC_Start_IT+0x228>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d009      	beq.n	8003142 <HAL_TIM_IC_Start_IT+0x1e2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a16      	ldr	r2, [pc, #88]	; (800318c <HAL_TIM_IC_Start_IT+0x22c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d004      	beq.n	8003142 <HAL_TIM_IC_Start_IT+0x1e2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_TIM_IC_Start_IT+0x230>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d111      	bne.n	8003166 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b06      	cmp	r3, #6
 8003152:	d010      	beq.n	8003176 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003164:	e007      	b.n	8003176 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40010000 	.word	0x40010000
 8003184:	40000400 	.word	0x40000400
 8003188:	40000800 	.word	0x40000800
 800318c:	40000c00 	.word	0x40000c00
 8003190:	40014000 	.word	0x40014000

08003194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d020      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d01b      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0202 	mvn.w	r2, #2
 80031c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fef6 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 80031e4:	e005      	b.n	80031f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f9a4 	bl	8003534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f9ab 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d020      	beq.n	8003244 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d01b      	beq.n	8003244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0204 	mvn.w	r2, #4
 8003214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fd fed0 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 8003230:	e005      	b.n	800323e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f97e 	bl	8003534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f985 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d020      	beq.n	8003290 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01b      	beq.n	8003290 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0208 	mvn.w	r2, #8
 8003260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2204      	movs	r2, #4
 8003266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd feaa 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 800327c:	e005      	b.n	800328a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f958 	bl	8003534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f95f 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d020      	beq.n	80032dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01b      	beq.n	80032dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0210 	mvn.w	r2, #16
 80032ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2208      	movs	r2, #8
 80032b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd fe84 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 80032c8:	e005      	b.n	80032d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f932 	bl	8003534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f939 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00c      	beq.n	8003300 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0201 	mvn.w	r2, #1
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fe fb16 	bl	800192c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00c      	beq.n	8003324 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800331c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fb6e 	bl	8003a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00c      	beq.n	8003348 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f90a 	bl	800355c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00c      	beq.n	800336c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0220 	mvn.w	r2, #32
 8003364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fb40 	bl	80039ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_TIM_IC_ConfigChannel+0x1e>
 800338e:	2302      	movs	r3, #2
 8003390:	e088      	b.n	80034a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d11b      	bne.n	80033d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80033b0:	f000 f96a 	bl	8003688 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 020c 	bic.w	r2, r2, #12
 80033c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6999      	ldr	r1, [r3, #24]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	619a      	str	r2, [r3, #24]
 80033d6:	e060      	b.n	800349a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d11c      	bne.n	8003418 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80033ee:	f000 f9b3 	bl	8003758 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003400:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6999      	ldr	r1, [r3, #24]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	021a      	lsls	r2, r3, #8
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	619a      	str	r2, [r3, #24]
 8003416:	e040      	b.n	800349a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b08      	cmp	r3, #8
 800341c:	d11b      	bne.n	8003456 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800342e:	f000 f9d0 	bl	80037d2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 020c 	bic.w	r2, r2, #12
 8003440:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69d9      	ldr	r1, [r3, #28]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	61da      	str	r2, [r3, #28]
 8003454:	e021      	b.n	800349a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b0c      	cmp	r3, #12
 800345a:	d11c      	bne.n	8003496 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800346c:	f000 f9ed 	bl	800384a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69da      	ldr	r2, [r3, #28]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800347e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69d9      	ldr	r1, [r3, #28]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	021a      	lsls	r2, r3, #8
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	61da      	str	r2, [r3, #28]
 8003494:	e001      	b.n	800349a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b0c      	cmp	r3, #12
 80034be:	d831      	bhi.n	8003524 <HAL_TIM_ReadCapturedValue+0x78>
 80034c0:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	080034fd 	.word	0x080034fd
 80034cc:	08003525 	.word	0x08003525
 80034d0:	08003525 	.word	0x08003525
 80034d4:	08003525 	.word	0x08003525
 80034d8:	08003507 	.word	0x08003507
 80034dc:	08003525 	.word	0x08003525
 80034e0:	08003525 	.word	0x08003525
 80034e4:	08003525 	.word	0x08003525
 80034e8:	08003511 	.word	0x08003511
 80034ec:	08003525 	.word	0x08003525
 80034f0:	08003525 	.word	0x08003525
 80034f4:	08003525 	.word	0x08003525
 80034f8:	0800351b 	.word	0x0800351b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003502:	60fb      	str	r3, [r7, #12]

      break;
 8003504:	e00f      	b.n	8003526 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	60fb      	str	r3, [r7, #12]

      break;
 800350e:	e00a      	b.n	8003526 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	60fb      	str	r3, [r7, #12]

      break;
 8003518:	e005      	b.n	8003526 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	60fb      	str	r3, [r7, #12]

      break;
 8003522:	e000      	b.n	8003526 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003524:	bf00      	nop
  }

  return tmpreg;
 8003526:	68fb      	ldr	r3, [r7, #12]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a3a      	ldr	r2, [pc, #232]	; (800366c <TIM_Base_SetConfig+0xfc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00f      	beq.n	80035a8 <TIM_Base_SetConfig+0x38>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358e:	d00b      	beq.n	80035a8 <TIM_Base_SetConfig+0x38>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a37      	ldr	r2, [pc, #220]	; (8003670 <TIM_Base_SetConfig+0x100>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d007      	beq.n	80035a8 <TIM_Base_SetConfig+0x38>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a36      	ldr	r2, [pc, #216]	; (8003674 <TIM_Base_SetConfig+0x104>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d003      	beq.n	80035a8 <TIM_Base_SetConfig+0x38>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a35      	ldr	r2, [pc, #212]	; (8003678 <TIM_Base_SetConfig+0x108>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d108      	bne.n	80035ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a2b      	ldr	r2, [pc, #172]	; (800366c <TIM_Base_SetConfig+0xfc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01b      	beq.n	80035fa <TIM_Base_SetConfig+0x8a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c8:	d017      	beq.n	80035fa <TIM_Base_SetConfig+0x8a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a28      	ldr	r2, [pc, #160]	; (8003670 <TIM_Base_SetConfig+0x100>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d013      	beq.n	80035fa <TIM_Base_SetConfig+0x8a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a27      	ldr	r2, [pc, #156]	; (8003674 <TIM_Base_SetConfig+0x104>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00f      	beq.n	80035fa <TIM_Base_SetConfig+0x8a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a26      	ldr	r2, [pc, #152]	; (8003678 <TIM_Base_SetConfig+0x108>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00b      	beq.n	80035fa <TIM_Base_SetConfig+0x8a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a25      	ldr	r2, [pc, #148]	; (800367c <TIM_Base_SetConfig+0x10c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d007      	beq.n	80035fa <TIM_Base_SetConfig+0x8a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a24      	ldr	r2, [pc, #144]	; (8003680 <TIM_Base_SetConfig+0x110>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d003      	beq.n	80035fa <TIM_Base_SetConfig+0x8a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a23      	ldr	r2, [pc, #140]	; (8003684 <TIM_Base_SetConfig+0x114>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d108      	bne.n	800360c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a0e      	ldr	r2, [pc, #56]	; (800366c <TIM_Base_SetConfig+0xfc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d103      	bne.n	8003640 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d105      	bne.n	800365e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f023 0201 	bic.w	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	611a      	str	r2, [r3, #16]
  }
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40010000 	.word	0x40010000
 8003670:	40000400 	.word	0x40000400
 8003674:	40000800 	.word	0x40000800
 8003678:	40000c00 	.word	0x40000c00
 800367c:	40014000 	.word	0x40014000
 8003680:	40014400 	.word	0x40014400
 8003684:	40014800 	.word	0x40014800

08003688 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f023 0201 	bic.w	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a24      	ldr	r2, [pc, #144]	; (8003744 <TIM_TI1_SetConfig+0xbc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <TIM_TI1_SetConfig+0x56>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036bc:	d00f      	beq.n	80036de <TIM_TI1_SetConfig+0x56>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4a21      	ldr	r2, [pc, #132]	; (8003748 <TIM_TI1_SetConfig+0xc0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00b      	beq.n	80036de <TIM_TI1_SetConfig+0x56>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a20      	ldr	r2, [pc, #128]	; (800374c <TIM_TI1_SetConfig+0xc4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d007      	beq.n	80036de <TIM_TI1_SetConfig+0x56>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a1f      	ldr	r2, [pc, #124]	; (8003750 <TIM_TI1_SetConfig+0xc8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d003      	beq.n	80036de <TIM_TI1_SetConfig+0x56>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <TIM_TI1_SetConfig+0xcc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <TIM_TI1_SetConfig+0x5a>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <TIM_TI1_SetConfig+0x5c>
 80036e2:	2300      	movs	r3, #0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e003      	b.n	8003702 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003708:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	b2db      	uxtb	r3, r3
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f023 030a 	bic.w	r3, r3, #10
 800371c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f003 030a 	and.w	r3, r3, #10
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40010000 	.word	0x40010000
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800
 8003750:	40000c00 	.word	0x40000c00
 8003754:	40014000 	.word	0x40014000

08003758 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f023 0210 	bic.w	r2, r3, #16
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003784:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	031b      	lsls	r3, r3, #12
 800379c:	b29b      	uxth	r3, r3
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037aa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	621a      	str	r2, [r3, #32]
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b087      	sub	sp, #28
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	607a      	str	r2, [r7, #4]
 80037de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f023 0303 	bic.w	r3, r3, #3
 80037fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800380e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	b2db      	uxtb	r3, r3
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003822:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	621a      	str	r2, [r3, #32]
}
 800383e:	bf00      	nop
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800384a:	b480      	push	{r7}
 800384c:	b087      	sub	sp, #28
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	607a      	str	r2, [r7, #4]
 8003856:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003876:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	021b      	lsls	r3, r3, #8
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003888:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	031b      	lsls	r3, r3, #12
 800388e:	b29b      	uxth	r3, r3
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800389c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	031b      	lsls	r3, r3, #12
 80038a2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	621a      	str	r2, [r3, #32]
}
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	2201      	movs	r2, #1
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a1a      	ldr	r2, [r3, #32]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	401a      	ands	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a1a      	ldr	r2, [r3, #32]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	fa01 f303 	lsl.w	r3, r1, r3
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	621a      	str	r2, [r3, #32]
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003924:	2302      	movs	r3, #2
 8003926:	e050      	b.n	80039ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1c      	ldr	r2, [pc, #112]	; (80039d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d018      	beq.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003974:	d013      	beq.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a18      	ldr	r2, [pc, #96]	; (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00e      	beq.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d009      	beq.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a15      	ldr	r2, [pc, #84]	; (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d004      	beq.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a13      	ldr	r2, [pc, #76]	; (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d10c      	bne.n	80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40010000 	.word	0x40010000
 80039dc:	40000400 	.word	0x40000400
 80039e0:	40000800 	.word	0x40000800
 80039e4:	40000c00 	.word	0x40000c00
 80039e8:	40014000 	.word	0x40014000

080039ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e042      	b.n	8003aac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fe f846 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2224      	movs	r2, #36	; 0x24
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fcdb 	bl	8004414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d112      	bne.n	8003af4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <HAL_UART_Receive_IT+0x26>
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e00b      	b.n	8003af6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 faba 	bl	8004064 <UART_Start_Receive_IT>
 8003af0:	4603      	mov	r3, r0
 8003af2:	e000      	b.n	8003af6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
  }
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b0ba      	sub	sp, #232	; 0xe8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10f      	bne.n	8003b66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_UART_IRQHandler+0x66>
 8003b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fb99 	bl	8004296 <UART_Receive_IT>
      return;
 8003b64:	e25b      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80de 	beq.w	8003d2c <HAL_UART_IRQHandler+0x22c>
 8003b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80d1 	beq.w	8003d2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_UART_IRQHandler+0xae>
 8003b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f043 0201 	orr.w	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xd2>
 8003bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	f043 0202 	orr.w	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xf6>
 8003bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	f043 0204 	orr.w	r2, r3, #4
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d011      	beq.n	8003c26 <HAL_UART_IRQHandler+0x126>
 8003c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	f043 0208 	orr.w	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 81f2 	beq.w	8004014 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_UART_IRQHandler+0x14e>
 8003c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fb24 	bl	8004296 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c58:	2b40      	cmp	r3, #64	; 0x40
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <HAL_UART_IRQHandler+0x17a>
 8003c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d04f      	beq.n	8003d1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fa2c 	bl	80040d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d141      	bne.n	8003d12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3314      	adds	r3, #20
 8003c94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3314      	adds	r3, #20
 8003cb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1d9      	bne.n	8003c8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d013      	beq.n	8003d0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	4a7e      	ldr	r2, [pc, #504]	; (8003ee0 <HAL_UART_IRQHandler+0x3e0>)
 8003ce8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fe f9c6 	bl	8002080 <HAL_DMA_Abort_IT>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d016      	beq.n	8003d28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d04:	4610      	mov	r0, r2
 8003d06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d08:	e00e      	b.n	8003d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f994 	bl	8004038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	e00a      	b.n	8003d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f990 	bl	8004038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	e006      	b.n	8003d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f98c 	bl	8004038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003d26:	e175      	b.n	8004014 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	bf00      	nop
    return;
 8003d2a:	e173      	b.n	8004014 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	f040 814f 	bne.w	8003fd4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 8148 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8141 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	f040 80b6 	bne.w	8003ee4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8145 	beq.w	8004018 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d96:	429a      	cmp	r2, r3
 8003d98:	f080 813e 	bcs.w	8004018 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003da2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dae:	f000 8088 	beq.w	8003ec2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003dde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1d9      	bne.n	8003db2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3314      	adds	r3, #20
 8003e04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e1      	bne.n	8003dfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3314      	adds	r3, #20
 8003e5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e3      	bne.n	8003e3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e92:	f023 0310 	bic.w	r3, r3, #16
 8003e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ea4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ea6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003eaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e3      	bne.n	8003e80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe f86f 	bl	8001fa0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f8b7 	bl	800404c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ede:	e09b      	b.n	8004018 <HAL_UART_IRQHandler+0x518>
 8003ee0:	0800419f 	.word	0x0800419f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 808e 	beq.w	800401c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8089 	beq.w	800401c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f2e:	647a      	str	r2, [r7, #68]	; 0x44
 8003f30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1e3      	bne.n	8003f0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3314      	adds	r3, #20
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	e853 3f00 	ldrex	r3, [r3]
 8003f50:	623b      	str	r3, [r7, #32]
   return(result);
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3314      	adds	r3, #20
 8003f62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f66:	633a      	str	r2, [r7, #48]	; 0x30
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e3      	bne.n	8003f42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0310 	bic.w	r3, r3, #16
 8003f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003fac:	61fa      	str	r2, [r7, #28]
 8003fae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	69b9      	ldr	r1, [r7, #24]
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e3      	bne.n	8003f88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f83d 	bl	800404c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fd2:	e023      	b.n	800401c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d009      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x4f4>
 8003fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f8ea 	bl	80041c6 <UART_Transmit_IT>
    return;
 8003ff2:	e014      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00e      	beq.n	800401e <HAL_UART_IRQHandler+0x51e>
 8004000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f92a 	bl	8004266 <UART_EndTransmit_IT>
    return;
 8004012:	e004      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
    return;
 8004014:	bf00      	nop
 8004016:	e002      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
      return;
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
      return;
 800401c:	bf00      	nop
  }
}
 800401e:	37e8      	adds	r7, #232	; 0xe8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	4613      	mov	r3, r2
 8004070:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	88fa      	ldrh	r2, [r7, #6]
 800407c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	88fa      	ldrh	r2, [r7, #6]
 8004082:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2222      	movs	r2, #34	; 0x22
 800408e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0220 	orr.w	r2, r2, #32
 80040c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d8:	b480      	push	{r7}
 80040da:	b095      	sub	sp, #84	; 0x54
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	330c      	adds	r3, #12
 80040fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004100:	643a      	str	r2, [r7, #64]	; 0x40
 8004102:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004106:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e5      	bne.n	80040e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3314      	adds	r3, #20
 800411a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	61fb      	str	r3, [r7, #28]
   return(result);
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	64bb      	str	r3, [r7, #72]	; 0x48
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3314      	adds	r3, #20
 8004132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004134:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800413a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e5      	bne.n	8004114 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	2b01      	cmp	r3, #1
 800414e:	d119      	bne.n	8004184 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	330c      	adds	r3, #12
 8004156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f023 0310 	bic.w	r3, r3, #16
 8004166:	647b      	str	r3, [r7, #68]	; 0x44
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	330c      	adds	r3, #12
 800416e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004170:	61ba      	str	r2, [r7, #24]
 8004172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	6979      	ldr	r1, [r7, #20]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	613b      	str	r3, [r7, #16]
   return(result);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e5      	bne.n	8004150 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004192:	bf00      	nop
 8004194:	3754      	adds	r7, #84	; 0x54
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f7ff ff3d 	bl	8004038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b21      	cmp	r3, #33	; 0x21
 80041d8:	d13e      	bne.n	8004258 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e2:	d114      	bne.n	800420e <UART_Transmit_IT+0x48>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d110      	bne.n	800420e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004200:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	1c9a      	adds	r2, r3, #2
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	621a      	str	r2, [r3, #32]
 800420c:	e008      	b.n	8004220 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	1c59      	adds	r1, r3, #1
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6211      	str	r1, [r2, #32]
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29b      	uxth	r3, r3
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	4619      	mov	r1, r3
 800422e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10f      	bne.n	8004254 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004242:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004252:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	e000      	b.n	800425a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004258:	2302      	movs	r3, #2
  }
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800427c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff fecc 	bl	8004024 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b08c      	sub	sp, #48	; 0x30
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b22      	cmp	r3, #34	; 0x22
 80042a8:	f040 80ae 	bne.w	8004408 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b4:	d117      	bne.n	80042e6 <UART_Receive_IT+0x50>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d113      	bne.n	80042e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	1c9a      	adds	r2, r3, #2
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	629a      	str	r2, [r3, #40]	; 0x28
 80042e4:	e026      	b.n	8004334 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f8:	d007      	beq.n	800430a <UART_Receive_IT+0x74>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <UART_Receive_IT+0x82>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	e008      	b.n	800432a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004324:	b2da      	uxtb	r2, r3
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29b      	uxth	r3, r3
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	4619      	mov	r1, r3
 8004342:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004344:	2b00      	cmp	r3, #0
 8004346:	d15d      	bne.n	8004404 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0220 	bic.w	r2, r2, #32
 8004356:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004366:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	2b01      	cmp	r3, #1
 800438c:	d135      	bne.n	80043fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	e853 3f00 	ldrex	r3, [r3]
 80043a2:	613b      	str	r3, [r7, #16]
   return(result);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f023 0310 	bic.w	r3, r3, #16
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b4:	623a      	str	r2, [r7, #32]
 80043b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b8:	69f9      	ldr	r1, [r7, #28]
 80043ba:	6a3a      	ldr	r2, [r7, #32]
 80043bc:	e841 2300 	strex	r3, r2, [r1]
 80043c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e5      	bne.n	8004394 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d10a      	bne.n	80043ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fe2a 	bl	800404c <HAL_UARTEx_RxEventCallback>
 80043f8:	e002      	b.n	8004400 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fc ff2a 	bl	8001254 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	e002      	b.n	800440a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	3730      	adds	r7, #48	; 0x30
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004418:	b0c0      	sub	sp, #256	; 0x100
 800441a:	af00      	add	r7, sp, #0
 800441c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004430:	68d9      	ldr	r1, [r3, #12]
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	ea40 0301 	orr.w	r3, r0, r1
 800443c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	431a      	orrs	r2, r3
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	431a      	orrs	r2, r3
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800446c:	f021 010c 	bic.w	r1, r1, #12
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800447a:	430b      	orrs	r3, r1
 800447c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448e:	6999      	ldr	r1, [r3, #24]
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	ea40 0301 	orr.w	r3, r0, r1
 800449a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4b8f      	ldr	r3, [pc, #572]	; (80046e0 <UART_SetConfig+0x2cc>)
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d005      	beq.n	80044b4 <UART_SetConfig+0xa0>
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	4b8d      	ldr	r3, [pc, #564]	; (80046e4 <UART_SetConfig+0x2d0>)
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d104      	bne.n	80044be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044b4:	f7fe fc02 	bl	8002cbc <HAL_RCC_GetPCLK2Freq>
 80044b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044bc:	e003      	b.n	80044c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044be:	f7fe fbe9 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
 80044c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d0:	f040 810c 	bne.w	80046ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044d8:	2200      	movs	r2, #0
 80044da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044e6:	4622      	mov	r2, r4
 80044e8:	462b      	mov	r3, r5
 80044ea:	1891      	adds	r1, r2, r2
 80044ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80044ee:	415b      	adcs	r3, r3
 80044f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044f6:	4621      	mov	r1, r4
 80044f8:	eb12 0801 	adds.w	r8, r2, r1
 80044fc:	4629      	mov	r1, r5
 80044fe:	eb43 0901 	adc.w	r9, r3, r1
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800450e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004516:	4690      	mov	r8, r2
 8004518:	4699      	mov	r9, r3
 800451a:	4623      	mov	r3, r4
 800451c:	eb18 0303 	adds.w	r3, r8, r3
 8004520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004524:	462b      	mov	r3, r5
 8004526:	eb49 0303 	adc.w	r3, r9, r3
 800452a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800453a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800453e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004542:	460b      	mov	r3, r1
 8004544:	18db      	adds	r3, r3, r3
 8004546:	653b      	str	r3, [r7, #80]	; 0x50
 8004548:	4613      	mov	r3, r2
 800454a:	eb42 0303 	adc.w	r3, r2, r3
 800454e:	657b      	str	r3, [r7, #84]	; 0x54
 8004550:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004554:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004558:	f7fc fa30 	bl	80009bc <__aeabi_uldivmod>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4b61      	ldr	r3, [pc, #388]	; (80046e8 <UART_SetConfig+0x2d4>)
 8004562:	fba3 2302 	umull	r2, r3, r3, r2
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	011c      	lsls	r4, r3, #4
 800456a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004574:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004578:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800457c:	4642      	mov	r2, r8
 800457e:	464b      	mov	r3, r9
 8004580:	1891      	adds	r1, r2, r2
 8004582:	64b9      	str	r1, [r7, #72]	; 0x48
 8004584:	415b      	adcs	r3, r3
 8004586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004588:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800458c:	4641      	mov	r1, r8
 800458e:	eb12 0a01 	adds.w	sl, r2, r1
 8004592:	4649      	mov	r1, r9
 8004594:	eb43 0b01 	adc.w	fp, r3, r1
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ac:	4692      	mov	sl, r2
 80045ae:	469b      	mov	fp, r3
 80045b0:	4643      	mov	r3, r8
 80045b2:	eb1a 0303 	adds.w	r3, sl, r3
 80045b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045ba:	464b      	mov	r3, r9
 80045bc:	eb4b 0303 	adc.w	r3, fp, r3
 80045c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045d8:	460b      	mov	r3, r1
 80045da:	18db      	adds	r3, r3, r3
 80045dc:	643b      	str	r3, [r7, #64]	; 0x40
 80045de:	4613      	mov	r3, r2
 80045e0:	eb42 0303 	adc.w	r3, r2, r3
 80045e4:	647b      	str	r3, [r7, #68]	; 0x44
 80045e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045ee:	f7fc f9e5 	bl	80009bc <__aeabi_uldivmod>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	4b3b      	ldr	r3, [pc, #236]	; (80046e8 <UART_SetConfig+0x2d4>)
 80045fa:	fba3 2301 	umull	r2, r3, r3, r1
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	2264      	movs	r2, #100	; 0x64
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	1acb      	subs	r3, r1, r3
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800460e:	4b36      	ldr	r3, [pc, #216]	; (80046e8 <UART_SetConfig+0x2d4>)
 8004610:	fba3 2302 	umull	r2, r3, r3, r2
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800461c:	441c      	add	r4, r3
 800461e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004622:	2200      	movs	r2, #0
 8004624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004628:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800462c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	1891      	adds	r1, r2, r2
 8004636:	63b9      	str	r1, [r7, #56]	; 0x38
 8004638:	415b      	adcs	r3, r3
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800463c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004640:	4641      	mov	r1, r8
 8004642:	1851      	adds	r1, r2, r1
 8004644:	6339      	str	r1, [r7, #48]	; 0x30
 8004646:	4649      	mov	r1, r9
 8004648:	414b      	adcs	r3, r1
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004658:	4659      	mov	r1, fp
 800465a:	00cb      	lsls	r3, r1, #3
 800465c:	4651      	mov	r1, sl
 800465e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004662:	4651      	mov	r1, sl
 8004664:	00ca      	lsls	r2, r1, #3
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	4603      	mov	r3, r0
 800466c:	4642      	mov	r2, r8
 800466e:	189b      	adds	r3, r3, r2
 8004670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004674:	464b      	mov	r3, r9
 8004676:	460a      	mov	r2, r1
 8004678:	eb42 0303 	adc.w	r3, r2, r3
 800467c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800468c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004694:	460b      	mov	r3, r1
 8004696:	18db      	adds	r3, r3, r3
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
 800469a:	4613      	mov	r3, r2
 800469c:	eb42 0303 	adc.w	r3, r2, r3
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046aa:	f7fc f987 	bl	80009bc <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <UART_SetConfig+0x2d4>)
 80046b4:	fba3 1302 	umull	r1, r3, r3, r2
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	2164      	movs	r1, #100	; 0x64
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	3332      	adds	r3, #50	; 0x32
 80046c6:	4a08      	ldr	r2, [pc, #32]	; (80046e8 <UART_SetConfig+0x2d4>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	f003 0207 	and.w	r2, r3, #7
 80046d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4422      	add	r2, r4
 80046da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046dc:	e106      	b.n	80048ec <UART_SetConfig+0x4d8>
 80046de:	bf00      	nop
 80046e0:	40011000 	.word	0x40011000
 80046e4:	40011400 	.word	0x40011400
 80046e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046f0:	2200      	movs	r2, #0
 80046f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046fe:	4642      	mov	r2, r8
 8004700:	464b      	mov	r3, r9
 8004702:	1891      	adds	r1, r2, r2
 8004704:	6239      	str	r1, [r7, #32]
 8004706:	415b      	adcs	r3, r3
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
 800470a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800470e:	4641      	mov	r1, r8
 8004710:	1854      	adds	r4, r2, r1
 8004712:	4649      	mov	r1, r9
 8004714:	eb43 0501 	adc.w	r5, r3, r1
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	00eb      	lsls	r3, r5, #3
 8004722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004726:	00e2      	lsls	r2, r4, #3
 8004728:	4614      	mov	r4, r2
 800472a:	461d      	mov	r5, r3
 800472c:	4643      	mov	r3, r8
 800472e:	18e3      	adds	r3, r4, r3
 8004730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004734:	464b      	mov	r3, r9
 8004736:	eb45 0303 	adc.w	r3, r5, r3
 800473a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800473e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800474a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800475a:	4629      	mov	r1, r5
 800475c:	008b      	lsls	r3, r1, #2
 800475e:	4621      	mov	r1, r4
 8004760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004764:	4621      	mov	r1, r4
 8004766:	008a      	lsls	r2, r1, #2
 8004768:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800476c:	f7fc f926 	bl	80009bc <__aeabi_uldivmod>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4b60      	ldr	r3, [pc, #384]	; (80048f8 <UART_SetConfig+0x4e4>)
 8004776:	fba3 2302 	umull	r2, r3, r3, r2
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	011c      	lsls	r4, r3, #4
 800477e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004788:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800478c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	1891      	adds	r1, r2, r2
 8004796:	61b9      	str	r1, [r7, #24]
 8004798:	415b      	adcs	r3, r3
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047a0:	4641      	mov	r1, r8
 80047a2:	1851      	adds	r1, r2, r1
 80047a4:	6139      	str	r1, [r7, #16]
 80047a6:	4649      	mov	r1, r9
 80047a8:	414b      	adcs	r3, r1
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047b8:	4659      	mov	r1, fp
 80047ba:	00cb      	lsls	r3, r1, #3
 80047bc:	4651      	mov	r1, sl
 80047be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047c2:	4651      	mov	r1, sl
 80047c4:	00ca      	lsls	r2, r1, #3
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	4642      	mov	r2, r8
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047d4:	464b      	mov	r3, r9
 80047d6:	460a      	mov	r2, r1
 80047d8:	eb42 0303 	adc.w	r3, r2, r3
 80047dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047f8:	4649      	mov	r1, r9
 80047fa:	008b      	lsls	r3, r1, #2
 80047fc:	4641      	mov	r1, r8
 80047fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004802:	4641      	mov	r1, r8
 8004804:	008a      	lsls	r2, r1, #2
 8004806:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800480a:	f7fc f8d7 	bl	80009bc <__aeabi_uldivmod>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4611      	mov	r1, r2
 8004814:	4b38      	ldr	r3, [pc, #224]	; (80048f8 <UART_SetConfig+0x4e4>)
 8004816:	fba3 2301 	umull	r2, r3, r3, r1
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2264      	movs	r2, #100	; 0x64
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	1acb      	subs	r3, r1, r3
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	3332      	adds	r3, #50	; 0x32
 8004828:	4a33      	ldr	r2, [pc, #204]	; (80048f8 <UART_SetConfig+0x4e4>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004834:	441c      	add	r4, r3
 8004836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800483a:	2200      	movs	r2, #0
 800483c:	673b      	str	r3, [r7, #112]	; 0x70
 800483e:	677a      	str	r2, [r7, #116]	; 0x74
 8004840:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004844:	4642      	mov	r2, r8
 8004846:	464b      	mov	r3, r9
 8004848:	1891      	adds	r1, r2, r2
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	415b      	adcs	r3, r3
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004854:	4641      	mov	r1, r8
 8004856:	1851      	adds	r1, r2, r1
 8004858:	6039      	str	r1, [r7, #0]
 800485a:	4649      	mov	r1, r9
 800485c:	414b      	adcs	r3, r1
 800485e:	607b      	str	r3, [r7, #4]
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800486c:	4659      	mov	r1, fp
 800486e:	00cb      	lsls	r3, r1, #3
 8004870:	4651      	mov	r1, sl
 8004872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004876:	4651      	mov	r1, sl
 8004878:	00ca      	lsls	r2, r1, #3
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	4603      	mov	r3, r0
 8004880:	4642      	mov	r2, r8
 8004882:	189b      	adds	r3, r3, r2
 8004884:	66bb      	str	r3, [r7, #104]	; 0x68
 8004886:	464b      	mov	r3, r9
 8004888:	460a      	mov	r2, r1
 800488a:	eb42 0303 	adc.w	r3, r2, r3
 800488e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	663b      	str	r3, [r7, #96]	; 0x60
 800489a:	667a      	str	r2, [r7, #100]	; 0x64
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048a8:	4649      	mov	r1, r9
 80048aa:	008b      	lsls	r3, r1, #2
 80048ac:	4641      	mov	r1, r8
 80048ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b2:	4641      	mov	r1, r8
 80048b4:	008a      	lsls	r2, r1, #2
 80048b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048ba:	f7fc f87f 	bl	80009bc <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <UART_SetConfig+0x4e4>)
 80048c4:	fba3 1302 	umull	r1, r3, r3, r2
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	2164      	movs	r1, #100	; 0x64
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	3332      	adds	r3, #50	; 0x32
 80048d6:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <UART_SetConfig+0x4e4>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	f003 020f 	and.w	r2, r3, #15
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4422      	add	r2, r4
 80048ea:	609a      	str	r2, [r3, #8]
}
 80048ec:	bf00      	nop
 80048ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048f2:	46bd      	mov	sp, r7
 80048f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f8:	51eb851f 	.word	0x51eb851f

080048fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800490a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800490e:	2b84      	cmp	r3, #132	; 0x84
 8004910:	d005      	beq.n	800491e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004912:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4413      	add	r3, r2
 800491a:	3303      	adds	r3, #3
 800491c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800491e:	68fb      	ldr	r3, [r7, #12]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004932:	f3ef 8305 	mrs	r3, IPSR
 8004936:	607b      	str	r3, [r7, #4]
  return(result);
 8004938:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800493a:	2b00      	cmp	r3, #0
 800493c:	bf14      	ite	ne
 800493e:	2301      	movne	r3, #1
 8004940:	2300      	moveq	r3, #0
 8004942:	b2db      	uxtb	r3, r3
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004954:	f001 f942 	bl	8005bdc <vTaskStartScheduler>
  
  return osOK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	bd80      	pop	{r7, pc}

0800495e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800495e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004960:	b089      	sub	sp, #36	; 0x24
 8004962:	af04      	add	r7, sp, #16
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d020      	beq.n	80049b2 <osThreadCreate+0x54>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01c      	beq.n	80049b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685c      	ldr	r4, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691e      	ldr	r6, [r3, #16]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff ffb6 	bl	80048fc <makeFreeRtosPriority>
 8004990:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800499a:	9202      	str	r2, [sp, #8]
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	9100      	str	r1, [sp, #0]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	4632      	mov	r2, r6
 80049a4:	4629      	mov	r1, r5
 80049a6:	4620      	mov	r0, r4
 80049a8:	f000 ff50 	bl	800584c <xTaskCreateStatic>
 80049ac:	4603      	mov	r3, r0
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e01c      	b.n	80049ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685c      	ldr	r4, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049be:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff ff98 	bl	80048fc <makeFreeRtosPriority>
 80049cc:	4602      	mov	r2, r0
 80049ce:	f107 030c 	add.w	r3, r7, #12
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	9200      	str	r2, [sp, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	4632      	mov	r2, r6
 80049da:	4629      	mov	r1, r5
 80049dc:	4620      	mov	r0, r4
 80049de:	f000 ff92 	bl	8005906 <xTaskCreate>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d001      	beq.n	80049ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e000      	b.n	80049ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80049ec:	68fb      	ldr	r3, [r7, #12]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <osDelay+0x16>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	e000      	b.n	8004a0e <osDelay+0x18>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 f8b0 	bl	8005b74 <vTaskDelay>
  
  return osOK;
 8004a14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b082      	sub	sp, #8
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	4619      	mov	r1, r3
 8004a34:	2001      	movs	r0, #1
 8004a36:	f000 faae 	bl	8004f96 <xQueueCreateMutexStatic>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	e003      	b.n	8004a46 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004a3e:	2001      	movs	r0, #1
 8004a40:	f000 fa91 	bl	8004f66 <xQueueCreateMutex>
 8004a44:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <osMutexWait+0x18>
    return osErrorParameter;
 8004a64:	2380      	movs	r3, #128	; 0x80
 8004a66:	e03a      	b.n	8004ade <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d103      	bne.n	8004a7c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004a74:	f04f 33ff 	mov.w	r3, #4294967295
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	e009      	b.n	8004a90 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d006      	beq.n	8004a90 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <osMutexWait+0x40>
      ticks = 1;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004a90:	f7ff ff4c 	bl	800492c <inHandlerMode>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d017      	beq.n	8004aca <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004a9a:	f107 0308 	add.w	r3, r7, #8
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fd2a 	bl	80054fc <xQueueReceiveFromISR>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d001      	beq.n	8004ab2 <osMutexWait+0x62>
      return osErrorOS;
 8004aae:	23ff      	movs	r3, #255	; 0xff
 8004ab0:	e015      	b.n	8004ade <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d011      	beq.n	8004adc <osMutexWait+0x8c>
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <osMutexWait+0x98>)
 8004aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	e008      	b.n	8004adc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004aca:	68f9      	ldr	r1, [r7, #12]
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fc09 	bl	80052e4 <xQueueSemaphoreTake>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d001      	beq.n	8004adc <osMutexWait+0x8c>
    return osErrorOS;
 8004ad8:	23ff      	movs	r3, #255	; 0xff
 8004ada:	e000      	b.n	8004ade <osMutexWait+0x8e>
  }
  
  return osOK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	e000ed04 	.word	0xe000ed04

08004aec <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004afc:	f7ff ff16 	bl	800492c <inHandlerMode>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d016      	beq.n	8004b34 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004b06:	f107 0308 	add.w	r3, r7, #8
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fb5b 	bl	80051c8 <xQueueGiveFromISR>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d001      	beq.n	8004b1c <osMutexRelease+0x30>
      return osErrorOS;
 8004b18:	23ff      	movs	r3, #255	; 0xff
 8004b1a:	e017      	b.n	8004b4c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d013      	beq.n	8004b4a <osMutexRelease+0x5e>
 8004b22:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <osMutexRelease+0x68>)
 8004b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	e00a      	b.n	8004b4a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004b34:	2300      	movs	r3, #0
 8004b36:	2200      	movs	r2, #0
 8004b38:	2100      	movs	r1, #0
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fa46 	bl	8004fcc <xQueueGenericSend>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d001      	beq.n	8004b4a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004b46:	23ff      	movs	r3, #255	; 0xff
 8004b48:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	e000ed04 	.word	0xe000ed04

08004b58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f103 0208 	add.w	r2, r3, #8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f103 0208 	add.w	r2, r3, #8
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f103 0208 	add.w	r2, r3, #8
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	601a      	str	r2, [r3, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d103      	bne.n	8004c1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	e00c      	b.n	8004c34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	e002      	b.n	8004c28 <vListInsert+0x2e>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d2f6      	bcs.n	8004c22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	601a      	str	r2, [r3, #0]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6892      	ldr	r2, [r2, #8]
 8004c82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6852      	ldr	r2, [r2, #4]
 8004c8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d103      	bne.n	8004ca0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	1e5a      	subs	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004cea:	f001 fec3 	bl	8006a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	68f9      	ldr	r1, [r7, #12]
 8004cf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cfa:	fb01 f303 	mul.w	r3, r1, r3
 8004cfe:	441a      	add	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	68f9      	ldr	r1, [r7, #12]
 8004d1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	441a      	add	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	22ff      	movs	r2, #255	; 0xff
 8004d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	22ff      	movs	r2, #255	; 0xff
 8004d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d114      	bne.n	8004d6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01a      	beq.n	8004d7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3310      	adds	r3, #16
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f001 f987 	bl	8006060 <xTaskRemoveFromEventList>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d012      	beq.n	8004d7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <xQueueGenericReset+0xcc>)
 8004d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	e009      	b.n	8004d7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3310      	adds	r3, #16
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff fef2 	bl	8004b58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3324      	adds	r3, #36	; 0x24
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff feed 	bl	8004b58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d7e:	f001 fea9 	bl	8006ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d82:	2301      	movs	r3, #1
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	e000ed04 	.word	0xe000ed04

08004d90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08e      	sub	sp, #56	; 0x38
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <xQueueGenericCreateStatic+0x52>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <xQueueGenericCreateStatic+0x56>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <xQueueGenericCreateStatic+0x58>
 8004de6:	2300      	movs	r3, #0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	623b      	str	r3, [r7, #32]
}
 8004dfe:	bf00      	nop
 8004e00:	e7fe      	b.n	8004e00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d102      	bne.n	8004e0e <xQueueGenericCreateStatic+0x7e>
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <xQueueGenericCreateStatic+0x82>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <xQueueGenericCreateStatic+0x84>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10a      	bne.n	8004e2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	61fb      	str	r3, [r7, #28]
}
 8004e2a:	bf00      	nop
 8004e2c:	e7fe      	b.n	8004e2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e2e:	2348      	movs	r3, #72	; 0x48
 8004e30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b48      	cmp	r3, #72	; 0x48
 8004e36:	d00a      	beq.n	8004e4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	61bb      	str	r3, [r7, #24]
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00d      	beq.n	8004e76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f83f 	bl	8004ef4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3730      	adds	r7, #48	; 0x30
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08a      	sub	sp, #40	; 0x28
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <xQueueGenericCreate+0x2a>
	__asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	613b      	str	r3, [r7, #16]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	fb02 f303 	mul.w	r3, r2, r3
 8004eb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	3348      	adds	r3, #72	; 0x48
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f001 fefd 	bl	8006cb8 <pvPortMalloc>
 8004ebe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d011      	beq.n	8004eea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	3348      	adds	r3, #72	; 0x48
 8004ece:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ed8:	79fa      	ldrb	r2, [r7, #7]
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f805 	bl	8004ef4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004eea:	69bb      	ldr	r3, [r7, #24]
	}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d103      	bne.n	8004f10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	e002      	b.n	8004f16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f22:	2101      	movs	r1, #1
 8004f24:	69b8      	ldr	r0, [r7, #24]
 8004f26:	f7ff fecb 	bl	8004cc0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f2a:	bf00      	nop
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00e      	beq.n	8004f5e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004f52:	2300      	movs	r3, #0
 8004f54:	2200      	movs	r2, #0
 8004f56:	2100      	movs	r1, #0
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f837 	bl	8004fcc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b086      	sub	sp, #24
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004f70:	2301      	movs	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6939      	ldr	r1, [r7, #16]
 8004f7e:	6978      	ldr	r0, [r7, #20]
 8004f80:	f7ff ff7e 	bl	8004e80 <xQueueGenericCreate>
 8004f84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7ff ffd3 	bl	8004f32 <prvInitialiseMutex>

		return xNewQueue;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
	}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b088      	sub	sp, #32
 8004f9a:	af02      	add	r7, sp, #8
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	6039      	str	r1, [r7, #0]
 8004fa0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	6939      	ldr	r1, [r7, #16]
 8004fb4:	6978      	ldr	r0, [r7, #20]
 8004fb6:	f7ff feeb 	bl	8004d90 <xQueueGenericCreateStatic>
 8004fba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7ff ffb8 	bl	8004f32 <prvInitialiseMutex>

		return xNewQueue;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
	}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08e      	sub	sp, #56	; 0x38
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <xQueueGenericSend+0x32>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d103      	bne.n	800500c <xQueueGenericSend+0x40>
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <xQueueGenericSend+0x44>
 800500c:	2301      	movs	r3, #1
 800500e:	e000      	b.n	8005012 <xQueueGenericSend+0x46>
 8005010:	2300      	movs	r3, #0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <xQueueGenericSend+0x60>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d103      	bne.n	800503a <xQueueGenericSend+0x6e>
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <xQueueGenericSend+0x72>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <xQueueGenericSend+0x74>
 800503e:	2300      	movs	r3, #0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10a      	bne.n	800505a <xQueueGenericSend+0x8e>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	623b      	str	r3, [r7, #32]
}
 8005056:	bf00      	nop
 8005058:	e7fe      	b.n	8005058 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800505a:	f001 f9bd 	bl	80063d8 <xTaskGetSchedulerState>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <xQueueGenericSend+0x9e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <xQueueGenericSend+0xa2>
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <xQueueGenericSend+0xa4>
 800506e:	2300      	movs	r3, #0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <xQueueGenericSend+0xbe>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	61fb      	str	r3, [r7, #28]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800508a:	f001 fcf3 	bl	8006a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	429a      	cmp	r2, r3
 8005098:	d302      	bcc.n	80050a0 <xQueueGenericSend+0xd4>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d129      	bne.n	80050f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050a6:	f000 fac1 	bl	800562c <prvCopyDataToQueue>
 80050aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d010      	beq.n	80050d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	3324      	adds	r3, #36	; 0x24
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 ffd1 	bl	8006060 <xTaskRemoveFromEventList>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d013      	beq.n	80050ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050c4:	4b3f      	ldr	r3, [pc, #252]	; (80051c4 <xQueueGenericSend+0x1f8>)
 80050c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	e00a      	b.n	80050ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050dc:	4b39      	ldr	r3, [pc, #228]	; (80051c4 <xQueueGenericSend+0x1f8>)
 80050de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050ec:	f001 fcf2 	bl	8006ad4 <vPortExitCritical>
				return pdPASS;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e063      	b.n	80051bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d103      	bne.n	8005102 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050fa:	f001 fceb 	bl	8006ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	e05c      	b.n	80051bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005104:	2b00      	cmp	r3, #0
 8005106:	d106      	bne.n	8005116 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005108:	f107 0314 	add.w	r3, r7, #20
 800510c:	4618      	mov	r0, r3
 800510e:	f001 f809 	bl	8006124 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005112:	2301      	movs	r3, #1
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005116:	f001 fcdd 	bl	8006ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800511a:	f000 fdbf 	bl	8005c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800511e:	f001 fca9 	bl	8006a74 <vPortEnterCritical>
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005128:	b25b      	sxtb	r3, r3
 800512a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512e:	d103      	bne.n	8005138 <xQueueGenericSend+0x16c>
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800513e:	b25b      	sxtb	r3, r3
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d103      	bne.n	800514e <xQueueGenericSend+0x182>
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800514e:	f001 fcc1 	bl	8006ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005152:	1d3a      	adds	r2, r7, #4
 8005154:	f107 0314 	add.w	r3, r7, #20
 8005158:	4611      	mov	r1, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fff8 	bl	8006150 <xTaskCheckForTimeOut>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d124      	bne.n	80051b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005166:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005168:	f000 fb58 	bl	800581c <prvIsQueueFull>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d018      	beq.n	80051a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	3310      	adds	r3, #16
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	f000 ff4c 	bl	8006018 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005182:	f000 fae3 	bl	800574c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005186:	f000 fd97 	bl	8005cb8 <xTaskResumeAll>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	f47f af7c 	bne.w	800508a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005192:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <xQueueGenericSend+0x1f8>)
 8005194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	e772      	b.n	800508a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051a6:	f000 fad1 	bl	800574c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051aa:	f000 fd85 	bl	8005cb8 <xTaskResumeAll>
 80051ae:	e76c      	b.n	800508a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051b2:	f000 facb 	bl	800574c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051b6:	f000 fd7f 	bl	8005cb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3738      	adds	r7, #56	; 0x38
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	; 0x38
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	623b      	str	r3, [r7, #32]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <xQueueGiveFromISR+0x48>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	61fb      	str	r3, [r7, #28]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d103      	bne.n	8005220 <xQueueGiveFromISR+0x58>
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <xQueueGiveFromISR+0x5c>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <xQueueGiveFromISR+0x5e>
 8005224:	2300      	movs	r3, #0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <xQueueGiveFromISR+0x78>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	61bb      	str	r3, [r7, #24]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005240:	f001 fcfa 	bl	8006c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005244:	f3ef 8211 	mrs	r2, BASEPRI
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	617a      	str	r2, [r7, #20]
 800525a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800525c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800525e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800526c:	429a      	cmp	r2, r3
 800526e:	d22b      	bcs.n	80052c8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005282:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d112      	bne.n	80052b2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	2b00      	cmp	r3, #0
 8005292:	d016      	beq.n	80052c2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	3324      	adds	r3, #36	; 0x24
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fee1 	bl	8006060 <xTaskRemoveFromEventList>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00e      	beq.n	80052c2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00b      	beq.n	80052c2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2201      	movs	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	e007      	b.n	80052c2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052b6:	3301      	adds	r3, #1
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	b25a      	sxtb	r2, r3
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80052c2:	2301      	movs	r3, #1
 80052c4:	637b      	str	r3, [r7, #52]	; 0x34
 80052c6:	e001      	b.n	80052cc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
 80052cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ce:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3738      	adds	r7, #56	; 0x38
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08e      	sub	sp, #56	; 0x38
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	623b      	str	r3, [r7, #32]
}
 8005312:	bf00      	nop
 8005314:	e7fe      	b.n	8005314 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	61fb      	str	r3, [r7, #28]
}
 8005330:	bf00      	nop
 8005332:	e7fe      	b.n	8005332 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005334:	f001 f850 	bl	80063d8 <xTaskGetSchedulerState>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d102      	bne.n	8005344 <xQueueSemaphoreTake+0x60>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <xQueueSemaphoreTake+0x64>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <xQueueSemaphoreTake+0x66>
 8005348:	2300      	movs	r3, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	61bb      	str	r3, [r7, #24]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005364:	f001 fb86 	bl	8006a74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	2b00      	cmp	r3, #0
 8005372:	d024      	beq.n	80053be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	1e5a      	subs	r2, r3, #1
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005384:	f001 f9d0 	bl	8006728 <pvTaskIncrementMutexHeldCount>
 8005388:	4602      	mov	r2, r0
 800538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00f      	beq.n	80053b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	3310      	adds	r3, #16
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fe60 	bl	8006060 <xTaskRemoveFromEventList>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053a6:	4b54      	ldr	r3, [pc, #336]	; (80054f8 <xQueueSemaphoreTake+0x214>)
 80053a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053b6:	f001 fb8d 	bl	8006ad4 <vPortExitCritical>
				return pdPASS;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e097      	b.n	80054ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d111      	bne.n	80053e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	617b      	str	r3, [r7, #20]
}
 80053dc:	bf00      	nop
 80053de:	e7fe      	b.n	80053de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80053e0:	f001 fb78 	bl	8006ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053e4:	2300      	movs	r3, #0
 80053e6:	e082      	b.n	80054ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053ee:	f107 030c 	add.w	r3, r7, #12
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fe96 	bl	8006124 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053f8:	2301      	movs	r3, #1
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053fc:	f001 fb6a 	bl	8006ad4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005400:	f000 fc4c 	bl	8005c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005404:	f001 fb36 	bl	8006a74 <vPortEnterCritical>
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800540e:	b25b      	sxtb	r3, r3
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d103      	bne.n	800541e <xQueueSemaphoreTake+0x13a>
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800541e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005424:	b25b      	sxtb	r3, r3
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542a:	d103      	bne.n	8005434 <xQueueSemaphoreTake+0x150>
 800542c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005434:	f001 fb4e 	bl	8006ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005438:	463a      	mov	r2, r7
 800543a:	f107 030c 	add.w	r3, r7, #12
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fe85 	bl	8006150 <xTaskCheckForTimeOut>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d132      	bne.n	80054b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800544c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800544e:	f000 f9cf 	bl	80057f0 <prvIsQueueEmpty>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d026      	beq.n	80054a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d109      	bne.n	8005474 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005460:	f001 fb08 	bl	8006a74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	4618      	mov	r0, r3
 800546a:	f000 ffd3 	bl	8006414 <xTaskPriorityInherit>
 800546e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005470:	f001 fb30 	bl	8006ad4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005476:	3324      	adds	r3, #36	; 0x24
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	4611      	mov	r1, r2
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fdcb 	bl	8006018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005484:	f000 f962 	bl	800574c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005488:	f000 fc16 	bl	8005cb8 <xTaskResumeAll>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	f47f af68 	bne.w	8005364 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005494:	4b18      	ldr	r3, [pc, #96]	; (80054f8 <xQueueSemaphoreTake+0x214>)
 8005496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	e75e      	b.n	8005364 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80054a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054a8:	f000 f950 	bl	800574c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054ac:	f000 fc04 	bl	8005cb8 <xTaskResumeAll>
 80054b0:	e758      	b.n	8005364 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80054b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054b4:	f000 f94a 	bl	800574c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054b8:	f000 fbfe 	bl	8005cb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054be:	f000 f997 	bl	80057f0 <prvIsQueueEmpty>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f43f af4d 	beq.w	8005364 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00d      	beq.n	80054ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80054d0:	f001 fad0 	bl	8006a74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80054d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054d6:	f000 f891 	bl	80055fc <prvGetDisinheritPriorityAfterTimeout>
 80054da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 f892 	bl	800660c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80054e8:	f001 faf4 	bl	8006ad4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3738      	adds	r7, #56	; 0x38
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	e000ed04 	.word	0xe000ed04

080054fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08e      	sub	sp, #56	; 0x38
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	623b      	str	r3, [r7, #32]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <xQueueReceiveFromISR+0x3a>
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <xQueueReceiveFromISR+0x3e>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <xQueueReceiveFromISR+0x40>
 800553a:	2300      	movs	r3, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	61fb      	str	r3, [r7, #28]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005556:	f001 fb6f 	bl	8006c38 <vPortValidateInterruptPriority>
	__asm volatile
 800555a:	f3ef 8211 	mrs	r2, BASEPRI
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	61ba      	str	r2, [r7, #24]
 8005570:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005572:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005574:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	2b00      	cmp	r3, #0
 8005580:	d02f      	beq.n	80055e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005590:	f000 f8b6 	bl	8005700 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	1e5a      	subs	r2, r3, #1
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800559c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a4:	d112      	bne.n	80055cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	3310      	adds	r3, #16
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fd54 	bl	8006060 <xTaskRemoveFromEventList>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00e      	beq.n	80055dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00b      	beq.n	80055dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e007      	b.n	80055dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80055cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055d0:	3301      	adds	r3, #1
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	b25a      	sxtb	r2, r3
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80055dc:	2301      	movs	r3, #1
 80055de:	637b      	str	r3, [r7, #52]	; 0x34
 80055e0:	e001      	b.n	80055e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	637b      	str	r3, [r7, #52]	; 0x34
 80055e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f383 8811 	msr	BASEPRI, r3
}
 80055f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3738      	adds	r7, #56	; 0x38
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	d006      	beq.n	800561a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1c3 0307 	rsb	r3, r3, #7
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	e001      	b.n	800561e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800561e:	68fb      	ldr	r3, [r7, #12]
	}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10d      	bne.n	8005666 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d14d      	bne.n	80056ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 ff52 	bl	8006500 <xTaskPriorityDisinherit>
 800565c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	609a      	str	r2, [r3, #8]
 8005664:	e043      	b.n	80056ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d119      	bne.n	80056a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6858      	ldr	r0, [r3, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	461a      	mov	r2, r3
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	f001 fd34 	bl	80070e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	441a      	add	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	d32b      	bcc.n	80056ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	605a      	str	r2, [r3, #4]
 800569e:	e026      	b.n	80056ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	68d8      	ldr	r0, [r3, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	461a      	mov	r2, r3
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	f001 fd1a 	bl	80070e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	425b      	negs	r3, r3
 80056ba:	441a      	add	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d207      	bcs.n	80056dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	425b      	negs	r3, r3
 80056d6:	441a      	add	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d105      	bne.n	80056ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80056f6:	697b      	ldr	r3, [r7, #20]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	2b00      	cmp	r3, #0
 8005710:	d018      	beq.n	8005744 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	441a      	add	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	429a      	cmp	r2, r3
 800572a:	d303      	bcc.n	8005734 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68d9      	ldr	r1, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	461a      	mov	r2, r3
 800573e:	6838      	ldr	r0, [r7, #0]
 8005740:	f001 fcd0 	bl	80070e4 <memcpy>
	}
}
 8005744:	bf00      	nop
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005754:	f001 f98e 	bl	8006a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800575e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005760:	e011      	b.n	8005786 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	2b00      	cmp	r3, #0
 8005768:	d012      	beq.n	8005790 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3324      	adds	r3, #36	; 0x24
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fc76 	bl	8006060 <xTaskRemoveFromEventList>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800577a:	f000 fd4b 	bl	8006214 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	3b01      	subs	r3, #1
 8005782:	b2db      	uxtb	r3, r3
 8005784:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800578a:	2b00      	cmp	r3, #0
 800578c:	dce9      	bgt.n	8005762 <prvUnlockQueue+0x16>
 800578e:	e000      	b.n	8005792 <prvUnlockQueue+0x46>
					break;
 8005790:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	22ff      	movs	r2, #255	; 0xff
 8005796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800579a:	f001 f99b 	bl	8006ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800579e:	f001 f969 	bl	8006a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057aa:	e011      	b.n	80057d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d012      	beq.n	80057da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3310      	adds	r3, #16
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 fc51 	bl	8006060 <xTaskRemoveFromEventList>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80057c4:	f000 fd26 	bl	8006214 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80057c8:	7bbb      	ldrb	r3, [r7, #14]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	dce9      	bgt.n	80057ac <prvUnlockQueue+0x60>
 80057d8:	e000      	b.n	80057dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	22ff      	movs	r2, #255	; 0xff
 80057e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80057e4:	f001 f976 	bl	8006ad4 <vPortExitCritical>
}
 80057e8:	bf00      	nop
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057f8:	f001 f93c 	bl	8006a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005804:	2301      	movs	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	e001      	b.n	800580e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800580e:	f001 f961 	bl	8006ad4 <vPortExitCritical>

	return xReturn;
 8005812:	68fb      	ldr	r3, [r7, #12]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005824:	f001 f926 	bl	8006a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005830:	429a      	cmp	r2, r3
 8005832:	d102      	bne.n	800583a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005834:	2301      	movs	r3, #1
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	e001      	b.n	800583e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800583e:	f001 f949 	bl	8006ad4 <vPortExitCritical>

	return xReturn;
 8005842:	68fb      	ldr	r3, [r7, #12]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08e      	sub	sp, #56	; 0x38
 8005850:	af04      	add	r7, sp, #16
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800585a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	623b      	str	r3, [r7, #32]
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <xTaskCreateStatic+0x46>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	61fb      	str	r3, [r7, #28]
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005892:	2354      	movs	r3, #84	; 0x54
 8005894:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	2b54      	cmp	r3, #84	; 0x54
 800589a:	d00a      	beq.n	80058b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	61bb      	str	r3, [r7, #24]
}
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d01e      	beq.n	80058f8 <xTaskCreateStatic+0xac>
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d01b      	beq.n	80058f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	2202      	movs	r2, #2
 80058ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058d2:	2300      	movs	r3, #0
 80058d4:	9303      	str	r3, [sp, #12]
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	9302      	str	r3, [sp, #8]
 80058da:	f107 0314 	add.w	r3, r7, #20
 80058de:	9301      	str	r3, [sp, #4]
 80058e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 f850 	bl	8005990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058f2:	f000 f8d5 	bl	8005aa0 <prvAddNewTaskToReadyList>
 80058f6:	e001      	b.n	80058fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058fc:	697b      	ldr	r3, [r7, #20]
	}
 80058fe:	4618      	mov	r0, r3
 8005900:	3728      	adds	r7, #40	; 0x28
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005906:	b580      	push	{r7, lr}
 8005908:	b08c      	sub	sp, #48	; 0x30
 800590a:	af04      	add	r7, sp, #16
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	603b      	str	r3, [r7, #0]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4618      	mov	r0, r3
 800591c:	f001 f9cc 	bl	8006cb8 <pvPortMalloc>
 8005920:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00e      	beq.n	8005946 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005928:	2054      	movs	r0, #84	; 0x54
 800592a:	f001 f9c5 	bl	8006cb8 <pvPortMalloc>
 800592e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
 800593c:	e005      	b.n	800594a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800593e:	6978      	ldr	r0, [r7, #20]
 8005940:	f001 fa86 	bl	8006e50 <vPortFree>
 8005944:	e001      	b.n	800594a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d017      	beq.n	8005980 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005958:	88fa      	ldrh	r2, [r7, #6]
 800595a:	2300      	movs	r3, #0
 800595c:	9303      	str	r3, [sp, #12]
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	9302      	str	r3, [sp, #8]
 8005962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005964:	9301      	str	r3, [sp, #4]
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f80e 	bl	8005990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005974:	69f8      	ldr	r0, [r7, #28]
 8005976:	f000 f893 	bl	8005aa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800597a:	2301      	movs	r3, #1
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	e002      	b.n	8005986 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005980:	f04f 33ff 	mov.w	r3, #4294967295
 8005984:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005986:	69bb      	ldr	r3, [r7, #24]
	}
 8005988:	4618      	mov	r0, r3
 800598a:	3720      	adds	r7, #32
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059a8:	3b01      	subs	r3, #1
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	f023 0307 	bic.w	r3, r3, #7
 80059b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	617b      	str	r3, [r7, #20]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01f      	beq.n	8005a1e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	e012      	b.n	8005a0a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	7819      	ldrb	r1, [r3, #0]
 80059ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	3334      	adds	r3, #52	; 0x34
 80059f4:	460a      	mov	r2, r1
 80059f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d006      	beq.n	8005a12 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	3301      	adds	r3, #1
 8005a08:	61fb      	str	r3, [r7, #28]
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	2b0f      	cmp	r3, #15
 8005a0e:	d9e9      	bls.n	80059e4 <prvInitialiseNewTask+0x54>
 8005a10:	e000      	b.n	8005a14 <prvInitialiseNewTask+0x84>
			{
				break;
 8005a12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a1c:	e003      	b.n	8005a26 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	2b06      	cmp	r3, #6
 8005a2a:	d901      	bls.n	8005a30 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a2c:	2306      	movs	r3, #6
 8005a2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	2200      	movs	r2, #0
 8005a40:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	3304      	adds	r3, #4
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff f8a6 	bl	8004b98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	3318      	adds	r3, #24
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff f8a1 	bl	8004b98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	f1c3 0207 	rsb	r2, r3, #7
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	2200      	movs	r2, #0
 8005a70:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	68f9      	ldr	r1, [r7, #12]
 8005a7e:	69b8      	ldr	r0, [r7, #24]
 8005a80:	f000 fecc 	bl	800681c <pxPortInitialiseStack>
 8005a84:	4602      	mov	r2, r0
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a96:	bf00      	nop
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005aa8:	f000 ffe4 	bl	8006a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005aac:	4b2a      	ldr	r3, [pc, #168]	; (8005b58 <prvAddNewTaskToReadyList+0xb8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	4a29      	ldr	r2, [pc, #164]	; (8005b58 <prvAddNewTaskToReadyList+0xb8>)
 8005ab4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ab6:	4b29      	ldr	r3, [pc, #164]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d109      	bne.n	8005ad2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005abe:	4a27      	ldr	r2, [pc, #156]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ac4:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <prvAddNewTaskToReadyList+0xb8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d110      	bne.n	8005aee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005acc:	f000 fbc6 	bl	800625c <prvInitialiseTaskLists>
 8005ad0:	e00d      	b.n	8005aee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ad2:	4b23      	ldr	r3, [pc, #140]	; (8005b60 <prvAddNewTaskToReadyList+0xc0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ada:	4b20      	ldr	r3, [pc, #128]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d802      	bhi.n	8005aee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ae8:	4a1c      	ldr	r2, [pc, #112]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005aee:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <prvAddNewTaskToReadyList+0xc4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3301      	adds	r3, #1
 8005af4:	4a1b      	ldr	r2, [pc, #108]	; (8005b64 <prvAddNewTaskToReadyList+0xc4>)
 8005af6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	2201      	movs	r2, #1
 8005afe:	409a      	lsls	r2, r3
 8005b00:	4b19      	ldr	r3, [pc, #100]	; (8005b68 <prvAddNewTaskToReadyList+0xc8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <prvAddNewTaskToReadyList+0xc8>)
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4a15      	ldr	r2, [pc, #84]	; (8005b6c <prvAddNewTaskToReadyList+0xcc>)
 8005b18:	441a      	add	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4610      	mov	r0, r2
 8005b22:	f7ff f846 	bl	8004bb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b26:	f000 ffd5 	bl	8006ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <prvAddNewTaskToReadyList+0xc0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b32:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d207      	bcs.n	8005b50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <prvAddNewTaskToReadyList+0xd0>)
 8005b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000520 	.word	0x20000520
 8005b5c:	20000420 	.word	0x20000420
 8005b60:	2000052c 	.word	0x2000052c
 8005b64:	2000053c 	.word	0x2000053c
 8005b68:	20000528 	.word	0x20000528
 8005b6c:	20000424 	.word	0x20000424
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d017      	beq.n	8005bb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b86:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <vTaskDelay+0x60>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <vTaskDelay+0x30>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	60bb      	str	r3, [r7, #8]
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ba4:	f000 f87a 	bl	8005c9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ba8:	2100      	movs	r1, #0
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fdd0 	bl	8006750 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bb0:	f000 f882 	bl	8005cb8 <xTaskResumeAll>
 8005bb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d107      	bne.n	8005bcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bbc:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <vTaskDelay+0x64>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bcc:	bf00      	nop
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20000548 	.word	0x20000548
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	; 0x28
 8005be0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bea:	463a      	mov	r2, r7
 8005bec:	1d39      	adds	r1, r7, #4
 8005bee:	f107 0308 	add.w	r3, r7, #8
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fb f9b6 	bl	8000f64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	9202      	str	r2, [sp, #8]
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	2300      	movs	r3, #0
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	2300      	movs	r3, #0
 8005c08:	460a      	mov	r2, r1
 8005c0a:	491e      	ldr	r1, [pc, #120]	; (8005c84 <vTaskStartScheduler+0xa8>)
 8005c0c:	481e      	ldr	r0, [pc, #120]	; (8005c88 <vTaskStartScheduler+0xac>)
 8005c0e:	f7ff fe1d 	bl	800584c <xTaskCreateStatic>
 8005c12:	4603      	mov	r3, r0
 8005c14:	4a1d      	ldr	r2, [pc, #116]	; (8005c8c <vTaskStartScheduler+0xb0>)
 8005c16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c18:	4b1c      	ldr	r3, [pc, #112]	; (8005c8c <vTaskStartScheduler+0xb0>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c20:	2301      	movs	r3, #1
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	e001      	b.n	8005c2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d116      	bne.n	8005c5e <vTaskStartScheduler+0x82>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	613b      	str	r3, [r7, #16]
}
 8005c42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c44:	4b12      	ldr	r3, [pc, #72]	; (8005c90 <vTaskStartScheduler+0xb4>)
 8005c46:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c4c:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <vTaskStartScheduler+0xb8>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c52:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <vTaskStartScheduler+0xbc>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c58:	f000 fe6a 	bl	8006930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c5c:	e00e      	b.n	8005c7c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c64:	d10a      	bne.n	8005c7c <vTaskStartScheduler+0xa0>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	60fb      	str	r3, [r7, #12]
}
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <vTaskStartScheduler+0x9e>
}
 8005c7c:	bf00      	nop
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	08007198 	.word	0x08007198
 8005c88:	0800622d 	.word	0x0800622d
 8005c8c:	20000544 	.word	0x20000544
 8005c90:	20000540 	.word	0x20000540
 8005c94:	2000052c 	.word	0x2000052c
 8005c98:	20000524 	.word	0x20000524

08005c9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <vTaskSuspendAll+0x18>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	4a03      	ldr	r2, [pc, #12]	; (8005cb4 <vTaskSuspendAll+0x18>)
 8005ca8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005caa:	bf00      	nop
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	20000548 	.word	0x20000548

08005cb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cc6:	4b41      	ldr	r3, [pc, #260]	; (8005dcc <xTaskResumeAll+0x114>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	603b      	str	r3, [r7, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ce4:	f000 fec6 	bl	8006a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ce8:	4b38      	ldr	r3, [pc, #224]	; (8005dcc <xTaskResumeAll+0x114>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	4a37      	ldr	r2, [pc, #220]	; (8005dcc <xTaskResumeAll+0x114>)
 8005cf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf2:	4b36      	ldr	r3, [pc, #216]	; (8005dcc <xTaskResumeAll+0x114>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d161      	bne.n	8005dbe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cfa:	4b35      	ldr	r3, [pc, #212]	; (8005dd0 <xTaskResumeAll+0x118>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d05d      	beq.n	8005dbe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d02:	e02e      	b.n	8005d62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d04:	4b33      	ldr	r3, [pc, #204]	; (8005dd4 <xTaskResumeAll+0x11c>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3318      	adds	r3, #24
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe ffab 	bl	8004c6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fe ffa6 	bl	8004c6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	2201      	movs	r2, #1
 8005d26:	409a      	lsls	r2, r3
 8005d28:	4b2b      	ldr	r3, [pc, #172]	; (8005dd8 <xTaskResumeAll+0x120>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	4a2a      	ldr	r2, [pc, #168]	; (8005dd8 <xTaskResumeAll+0x120>)
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d36:	4613      	mov	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4a27      	ldr	r2, [pc, #156]	; (8005ddc <xTaskResumeAll+0x124>)
 8005d40:	441a      	add	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3304      	adds	r3, #4
 8005d46:	4619      	mov	r1, r3
 8005d48:	4610      	mov	r0, r2
 8005d4a:	f7fe ff32 	bl	8004bb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d52:	4b23      	ldr	r3, [pc, #140]	; (8005de0 <xTaskResumeAll+0x128>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d302      	bcc.n	8005d62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d5c:	4b21      	ldr	r3, [pc, #132]	; (8005de4 <xTaskResumeAll+0x12c>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d62:	4b1c      	ldr	r3, [pc, #112]	; (8005dd4 <xTaskResumeAll+0x11c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1cc      	bne.n	8005d04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d70:	f000 fb12 	bl	8006398 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d74:	4b1c      	ldr	r3, [pc, #112]	; (8005de8 <xTaskResumeAll+0x130>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d010      	beq.n	8005da2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d80:	f000 f836 	bl	8005df0 <xTaskIncrementTick>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005d8a:	4b16      	ldr	r3, [pc, #88]	; (8005de4 <xTaskResumeAll+0x12c>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1f1      	bne.n	8005d80 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005d9c:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <xTaskResumeAll+0x130>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005da2:	4b10      	ldr	r3, [pc, #64]	; (8005de4 <xTaskResumeAll+0x12c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d009      	beq.n	8005dbe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005daa:	2301      	movs	r3, #1
 8005dac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dae:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <xTaskResumeAll+0x134>)
 8005db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dbe:	f000 fe89 	bl	8006ad4 <vPortExitCritical>

	return xAlreadyYielded;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20000548 	.word	0x20000548
 8005dd0:	20000520 	.word	0x20000520
 8005dd4:	200004e0 	.word	0x200004e0
 8005dd8:	20000528 	.word	0x20000528
 8005ddc:	20000424 	.word	0x20000424
 8005de0:	20000420 	.word	0x20000420
 8005de4:	20000534 	.word	0x20000534
 8005de8:	20000530 	.word	0x20000530
 8005dec:	e000ed04 	.word	0xe000ed04

08005df0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005df6:	2300      	movs	r3, #0
 8005df8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dfa:	4b4e      	ldr	r3, [pc, #312]	; (8005f34 <xTaskIncrementTick+0x144>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f040 808e 	bne.w	8005f20 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e04:	4b4c      	ldr	r3, [pc, #304]	; (8005f38 <xTaskIncrementTick+0x148>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e0c:	4a4a      	ldr	r2, [pc, #296]	; (8005f38 <xTaskIncrementTick+0x148>)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d120      	bne.n	8005e5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e18:	4b48      	ldr	r3, [pc, #288]	; (8005f3c <xTaskIncrementTick+0x14c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	603b      	str	r3, [r7, #0]
}
 8005e34:	bf00      	nop
 8005e36:	e7fe      	b.n	8005e36 <xTaskIncrementTick+0x46>
 8005e38:	4b40      	ldr	r3, [pc, #256]	; (8005f3c <xTaskIncrementTick+0x14c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	4b40      	ldr	r3, [pc, #256]	; (8005f40 <xTaskIncrementTick+0x150>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a3e      	ldr	r2, [pc, #248]	; (8005f3c <xTaskIncrementTick+0x14c>)
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	4a3e      	ldr	r2, [pc, #248]	; (8005f40 <xTaskIncrementTick+0x150>)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	4b3d      	ldr	r3, [pc, #244]	; (8005f44 <xTaskIncrementTick+0x154>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	4a3c      	ldr	r2, [pc, #240]	; (8005f44 <xTaskIncrementTick+0x154>)
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	f000 fa9f 	bl	8006398 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e5a:	4b3b      	ldr	r3, [pc, #236]	; (8005f48 <xTaskIncrementTick+0x158>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d348      	bcc.n	8005ef6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e64:	4b35      	ldr	r3, [pc, #212]	; (8005f3c <xTaskIncrementTick+0x14c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d104      	bne.n	8005e78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e6e:	4b36      	ldr	r3, [pc, #216]	; (8005f48 <xTaskIncrementTick+0x158>)
 8005e70:	f04f 32ff 	mov.w	r2, #4294967295
 8005e74:	601a      	str	r2, [r3, #0]
					break;
 8005e76:	e03e      	b.n	8005ef6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e78:	4b30      	ldr	r3, [pc, #192]	; (8005f3c <xTaskIncrementTick+0x14c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d203      	bcs.n	8005e98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e90:	4a2d      	ldr	r2, [pc, #180]	; (8005f48 <xTaskIncrementTick+0x158>)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e96:	e02e      	b.n	8005ef6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fe fee5 	bl	8004c6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d004      	beq.n	8005eb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	3318      	adds	r3, #24
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fe fedc 	bl	8004c6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	2201      	movs	r2, #1
 8005eba:	409a      	lsls	r2, r3
 8005ebc:	4b23      	ldr	r3, [pc, #140]	; (8005f4c <xTaskIncrementTick+0x15c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	4a22      	ldr	r2, [pc, #136]	; (8005f4c <xTaskIncrementTick+0x15c>)
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4a1f      	ldr	r2, [pc, #124]	; (8005f50 <xTaskIncrementTick+0x160>)
 8005ed4:	441a      	add	r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	4619      	mov	r1, r3
 8005edc:	4610      	mov	r0, r2
 8005ede:	f7fe fe68 	bl	8004bb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee6:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <xTaskIncrementTick+0x164>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d3b9      	bcc.n	8005e64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ef4:	e7b6      	b.n	8005e64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ef6:	4b17      	ldr	r3, [pc, #92]	; (8005f54 <xTaskIncrementTick+0x164>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efc:	4914      	ldr	r1, [pc, #80]	; (8005f50 <xTaskIncrementTick+0x160>)
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	440b      	add	r3, r1
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d901      	bls.n	8005f12 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f12:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <xTaskIncrementTick+0x168>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d007      	beq.n	8005f2a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	e004      	b.n	8005f2a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f20:	4b0e      	ldr	r3, [pc, #56]	; (8005f5c <xTaskIncrementTick+0x16c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3301      	adds	r3, #1
 8005f26:	4a0d      	ldr	r2, [pc, #52]	; (8005f5c <xTaskIncrementTick+0x16c>)
 8005f28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f2a:	697b      	ldr	r3, [r7, #20]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000548 	.word	0x20000548
 8005f38:	20000524 	.word	0x20000524
 8005f3c:	200004d8 	.word	0x200004d8
 8005f40:	200004dc 	.word	0x200004dc
 8005f44:	20000538 	.word	0x20000538
 8005f48:	20000540 	.word	0x20000540
 8005f4c:	20000528 	.word	0x20000528
 8005f50:	20000424 	.word	0x20000424
 8005f54:	20000420 	.word	0x20000420
 8005f58:	20000534 	.word	0x20000534
 8005f5c:	20000530 	.word	0x20000530

08005f60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f66:	4b27      	ldr	r3, [pc, #156]	; (8006004 <vTaskSwitchContext+0xa4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f6e:	4b26      	ldr	r3, [pc, #152]	; (8006008 <vTaskSwitchContext+0xa8>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f74:	e03f      	b.n	8005ff6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005f76:	4b24      	ldr	r3, [pc, #144]	; (8006008 <vTaskSwitchContext+0xa8>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f7c:	4b23      	ldr	r3, [pc, #140]	; (800600c <vTaskSwitchContext+0xac>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	fab3 f383 	clz	r3, r3
 8005f88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f8a:	7afb      	ldrb	r3, [r7, #11]
 8005f8c:	f1c3 031f 	rsb	r3, r3, #31
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	491f      	ldr	r1, [pc, #124]	; (8006010 <vTaskSwitchContext+0xb0>)
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <vTaskSwitchContext+0x5c>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	607b      	str	r3, [r7, #4]
}
 8005fb8:	bf00      	nop
 8005fba:	e7fe      	b.n	8005fba <vTaskSwitchContext+0x5a>
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4a12      	ldr	r2, [pc, #72]	; (8006010 <vTaskSwitchContext+0xb0>)
 8005fc8:	4413      	add	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	605a      	str	r2, [r3, #4]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d104      	bne.n	8005fec <vTaskSwitchContext+0x8c>
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	605a      	str	r2, [r3, #4]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	4a08      	ldr	r2, [pc, #32]	; (8006014 <vTaskSwitchContext+0xb4>)
 8005ff4:	6013      	str	r3, [r2, #0]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000548 	.word	0x20000548
 8006008:	20000534 	.word	0x20000534
 800600c:	20000528 	.word	0x20000528
 8006010:	20000424 	.word	0x20000424
 8006014:	20000420 	.word	0x20000420

08006018 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	60fb      	str	r3, [r7, #12]
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800603e:	4b07      	ldr	r3, [pc, #28]	; (800605c <vTaskPlaceOnEventList+0x44>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3318      	adds	r3, #24
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fe fdd7 	bl	8004bfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800604c:	2101      	movs	r1, #1
 800604e:	6838      	ldr	r0, [r7, #0]
 8006050:	f000 fb7e 	bl	8006750 <prvAddCurrentTaskToDelayedList>
}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20000420 	.word	0x20000420

08006060 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	60fb      	str	r3, [r7, #12]
}
 8006088:	bf00      	nop
 800608a:	e7fe      	b.n	800608a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	3318      	adds	r3, #24
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe fdeb 	bl	8004c6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006096:	4b1d      	ldr	r3, [pc, #116]	; (800610c <xTaskRemoveFromEventList+0xac>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d11c      	bne.n	80060d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	3304      	adds	r3, #4
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe fde2 	bl	8004c6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	2201      	movs	r2, #1
 80060ae:	409a      	lsls	r2, r3
 80060b0:	4b17      	ldr	r3, [pc, #92]	; (8006110 <xTaskRemoveFromEventList+0xb0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	4a16      	ldr	r2, [pc, #88]	; (8006110 <xTaskRemoveFromEventList+0xb0>)
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4a13      	ldr	r2, [pc, #76]	; (8006114 <xTaskRemoveFromEventList+0xb4>)
 80060c8:	441a      	add	r2, r3
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f7fe fd6e 	bl	8004bb2 <vListInsertEnd>
 80060d6:	e005      	b.n	80060e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	3318      	adds	r3, #24
 80060dc:	4619      	mov	r1, r3
 80060de:	480e      	ldr	r0, [pc, #56]	; (8006118 <xTaskRemoveFromEventList+0xb8>)
 80060e0:	f7fe fd67 	bl	8004bb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e8:	4b0c      	ldr	r3, [pc, #48]	; (800611c <xTaskRemoveFromEventList+0xbc>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d905      	bls.n	80060fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060f2:	2301      	movs	r3, #1
 80060f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060f6:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <xTaskRemoveFromEventList+0xc0>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	e001      	b.n	8006102 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006102:	697b      	ldr	r3, [r7, #20]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20000548 	.word	0x20000548
 8006110:	20000528 	.word	0x20000528
 8006114:	20000424 	.word	0x20000424
 8006118:	200004e0 	.word	0x200004e0
 800611c:	20000420 	.word	0x20000420
 8006120:	20000534 	.word	0x20000534

08006124 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <vTaskInternalSetTimeOutState+0x24>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006134:	4b05      	ldr	r3, [pc, #20]	; (800614c <vTaskInternalSetTimeOutState+0x28>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	605a      	str	r2, [r3, #4]
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	20000538 	.word	0x20000538
 800614c:	20000524 	.word	0x20000524

08006150 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	613b      	str	r3, [r7, #16]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10a      	bne.n	8006192 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	60fb      	str	r3, [r7, #12]
}
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006192:	f000 fc6f 	bl	8006a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006196:	4b1d      	ldr	r3, [pc, #116]	; (800620c <xTaskCheckForTimeOut+0xbc>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ae:	d102      	bne.n	80061b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061b0:	2300      	movs	r3, #0
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	e023      	b.n	80061fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4b15      	ldr	r3, [pc, #84]	; (8006210 <xTaskCheckForTimeOut+0xc0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d007      	beq.n	80061d2 <xTaskCheckForTimeOut+0x82>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d302      	bcc.n	80061d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061cc:	2301      	movs	r3, #1
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	e015      	b.n	80061fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d20b      	bcs.n	80061f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	1ad2      	subs	r2, r2, r3
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff ff9b 	bl	8006124 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	e004      	b.n	80061fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061fa:	2301      	movs	r3, #1
 80061fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061fe:	f000 fc69 	bl	8006ad4 <vPortExitCritical>

	return xReturn;
 8006202:	69fb      	ldr	r3, [r7, #28]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3720      	adds	r7, #32
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000524 	.word	0x20000524
 8006210:	20000538 	.word	0x20000538

08006214 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006218:	4b03      	ldr	r3, [pc, #12]	; (8006228 <vTaskMissedYield+0x14>)
 800621a:	2201      	movs	r2, #1
 800621c:	601a      	str	r2, [r3, #0]
}
 800621e:	bf00      	nop
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	20000534 	.word	0x20000534

0800622c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006234:	f000 f852 	bl	80062dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006238:	4b06      	ldr	r3, [pc, #24]	; (8006254 <prvIdleTask+0x28>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d9f9      	bls.n	8006234 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006240:	4b05      	ldr	r3, [pc, #20]	; (8006258 <prvIdleTask+0x2c>)
 8006242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006250:	e7f0      	b.n	8006234 <prvIdleTask+0x8>
 8006252:	bf00      	nop
 8006254:	20000424 	.word	0x20000424
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006262:	2300      	movs	r3, #0
 8006264:	607b      	str	r3, [r7, #4]
 8006266:	e00c      	b.n	8006282 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4a12      	ldr	r2, [pc, #72]	; (80062bc <prvInitialiseTaskLists+0x60>)
 8006274:	4413      	add	r3, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fc6e 	bl	8004b58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3301      	adds	r3, #1
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b06      	cmp	r3, #6
 8006286:	d9ef      	bls.n	8006268 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006288:	480d      	ldr	r0, [pc, #52]	; (80062c0 <prvInitialiseTaskLists+0x64>)
 800628a:	f7fe fc65 	bl	8004b58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800628e:	480d      	ldr	r0, [pc, #52]	; (80062c4 <prvInitialiseTaskLists+0x68>)
 8006290:	f7fe fc62 	bl	8004b58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006294:	480c      	ldr	r0, [pc, #48]	; (80062c8 <prvInitialiseTaskLists+0x6c>)
 8006296:	f7fe fc5f 	bl	8004b58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800629a:	480c      	ldr	r0, [pc, #48]	; (80062cc <prvInitialiseTaskLists+0x70>)
 800629c:	f7fe fc5c 	bl	8004b58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062a0:	480b      	ldr	r0, [pc, #44]	; (80062d0 <prvInitialiseTaskLists+0x74>)
 80062a2:	f7fe fc59 	bl	8004b58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <prvInitialiseTaskLists+0x78>)
 80062a8:	4a05      	ldr	r2, [pc, #20]	; (80062c0 <prvInitialiseTaskLists+0x64>)
 80062aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062ac:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <prvInitialiseTaskLists+0x7c>)
 80062ae:	4a05      	ldr	r2, [pc, #20]	; (80062c4 <prvInitialiseTaskLists+0x68>)
 80062b0:	601a      	str	r2, [r3, #0]
}
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000424 	.word	0x20000424
 80062c0:	200004b0 	.word	0x200004b0
 80062c4:	200004c4 	.word	0x200004c4
 80062c8:	200004e0 	.word	0x200004e0
 80062cc:	200004f4 	.word	0x200004f4
 80062d0:	2000050c 	.word	0x2000050c
 80062d4:	200004d8 	.word	0x200004d8
 80062d8:	200004dc 	.word	0x200004dc

080062dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062e2:	e019      	b.n	8006318 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062e4:	f000 fbc6 	bl	8006a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e8:	4b10      	ldr	r3, [pc, #64]	; (800632c <prvCheckTasksWaitingTermination+0x50>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fe fcb9 	bl	8004c6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062fa:	4b0d      	ldr	r3, [pc, #52]	; (8006330 <prvCheckTasksWaitingTermination+0x54>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3b01      	subs	r3, #1
 8006300:	4a0b      	ldr	r2, [pc, #44]	; (8006330 <prvCheckTasksWaitingTermination+0x54>)
 8006302:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006304:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <prvCheckTasksWaitingTermination+0x58>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3b01      	subs	r3, #1
 800630a:	4a0a      	ldr	r2, [pc, #40]	; (8006334 <prvCheckTasksWaitingTermination+0x58>)
 800630c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800630e:	f000 fbe1 	bl	8006ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f810 	bl	8006338 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006318:	4b06      	ldr	r3, [pc, #24]	; (8006334 <prvCheckTasksWaitingTermination+0x58>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e1      	bne.n	80062e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	200004f4 	.word	0x200004f4
 8006330:	20000520 	.word	0x20000520
 8006334:	20000508 	.word	0x20000508

08006338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006346:	2b00      	cmp	r3, #0
 8006348:	d108      	bne.n	800635c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fd7e 	bl	8006e50 <vPortFree>
				vPortFree( pxTCB );
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fd7b 	bl	8006e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800635a:	e018      	b.n	800638e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006362:	2b01      	cmp	r3, #1
 8006364:	d103      	bne.n	800636e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fd72 	bl	8006e50 <vPortFree>
	}
 800636c:	e00f      	b.n	800638e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006374:	2b02      	cmp	r3, #2
 8006376:	d00a      	beq.n	800638e <prvDeleteTCB+0x56>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	60fb      	str	r3, [r7, #12]
}
 800638a:	bf00      	nop
 800638c:	e7fe      	b.n	800638c <prvDeleteTCB+0x54>
	}
 800638e:	bf00      	nop
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800639e:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <prvResetNextTaskUnblockTime+0x38>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063a8:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <prvResetNextTaskUnblockTime+0x3c>)
 80063aa:	f04f 32ff 	mov.w	r2, #4294967295
 80063ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063b0:	e008      	b.n	80063c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b2:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <prvResetNextTaskUnblockTime+0x38>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	4a04      	ldr	r2, [pc, #16]	; (80063d4 <prvResetNextTaskUnblockTime+0x3c>)
 80063c2:	6013      	str	r3, [r2, #0]
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	200004d8 	.word	0x200004d8
 80063d4:	20000540 	.word	0x20000540

080063d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063de:	4b0b      	ldr	r3, [pc, #44]	; (800640c <xTaskGetSchedulerState+0x34>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d102      	bne.n	80063ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063e6:	2301      	movs	r3, #1
 80063e8:	607b      	str	r3, [r7, #4]
 80063ea:	e008      	b.n	80063fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ec:	4b08      	ldr	r3, [pc, #32]	; (8006410 <xTaskGetSchedulerState+0x38>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d102      	bne.n	80063fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063f4:	2302      	movs	r3, #2
 80063f6:	607b      	str	r3, [r7, #4]
 80063f8:	e001      	b.n	80063fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063fa:	2300      	movs	r3, #0
 80063fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063fe:	687b      	ldr	r3, [r7, #4]
	}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	2000052c 	.word	0x2000052c
 8006410:	20000548 	.word	0x20000548

08006414 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d05e      	beq.n	80064e8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642e:	4b31      	ldr	r3, [pc, #196]	; (80064f4 <xTaskPriorityInherit+0xe0>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	429a      	cmp	r2, r3
 8006436:	d24e      	bcs.n	80064d6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	2b00      	cmp	r3, #0
 800643e:	db06      	blt.n	800644e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006440:	4b2c      	ldr	r3, [pc, #176]	; (80064f4 <xTaskPriorityInherit+0xe0>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	f1c3 0207 	rsb	r2, r3, #7
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6959      	ldr	r1, [r3, #20]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4a26      	ldr	r2, [pc, #152]	; (80064f8 <xTaskPriorityInherit+0xe4>)
 8006460:	4413      	add	r3, r2
 8006462:	4299      	cmp	r1, r3
 8006464:	d12f      	bne.n	80064c6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	3304      	adds	r3, #4
 800646a:	4618      	mov	r0, r3
 800646c:	f7fe fbfe 	bl	8004c6c <uxListRemove>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	2201      	movs	r2, #1
 800647c:	fa02 f303 	lsl.w	r3, r2, r3
 8006480:	43da      	mvns	r2, r3
 8006482:	4b1e      	ldr	r3, [pc, #120]	; (80064fc <xTaskPriorityInherit+0xe8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4013      	ands	r3, r2
 8006488:	4a1c      	ldr	r2, [pc, #112]	; (80064fc <xTaskPriorityInherit+0xe8>)
 800648a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800648c:	4b19      	ldr	r3, [pc, #100]	; (80064f4 <xTaskPriorityInherit+0xe0>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	2201      	movs	r2, #1
 800649c:	409a      	lsls	r2, r3
 800649e:	4b17      	ldr	r3, [pc, #92]	; (80064fc <xTaskPriorityInherit+0xe8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	4a15      	ldr	r2, [pc, #84]	; (80064fc <xTaskPriorityInherit+0xe8>)
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4a10      	ldr	r2, [pc, #64]	; (80064f8 <xTaskPriorityInherit+0xe4>)
 80064b6:	441a      	add	r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4619      	mov	r1, r3
 80064be:	4610      	mov	r0, r2
 80064c0:	f7fe fb77 	bl	8004bb2 <vListInsertEnd>
 80064c4:	e004      	b.n	80064d0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <xTaskPriorityInherit+0xe0>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80064d0:	2301      	movs	r3, #1
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	e008      	b.n	80064e8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <xTaskPriorityInherit+0xe0>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d201      	bcs.n	80064e8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80064e4:	2301      	movs	r3, #1
 80064e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064e8:	68fb      	ldr	r3, [r7, #12]
	}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20000420 	.word	0x20000420
 80064f8:	20000424 	.word	0x20000424
 80064fc:	20000528 	.word	0x20000528

08006500 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d06e      	beq.n	80065f4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006516:	4b3a      	ldr	r3, [pc, #232]	; (8006600 <xTaskPriorityDisinherit+0x100>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	429a      	cmp	r2, r3
 800651e:	d00a      	beq.n	8006536 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	60fb      	str	r3, [r7, #12]
}
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	60bb      	str	r3, [r7, #8]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006558:	1e5a      	subs	r2, r3, #1
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006566:	429a      	cmp	r2, r3
 8006568:	d044      	beq.n	80065f4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800656e:	2b00      	cmp	r3, #0
 8006570:	d140      	bne.n	80065f4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	3304      	adds	r3, #4
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fb78 	bl	8004c6c <uxListRemove>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d115      	bne.n	80065ae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006586:	491f      	ldr	r1, [pc, #124]	; (8006604 <xTaskPriorityDisinherit+0x104>)
 8006588:	4613      	mov	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	440b      	add	r3, r1
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10a      	bne.n	80065ae <xTaskPriorityDisinherit+0xae>
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	2201      	movs	r2, #1
 800659e:	fa02 f303 	lsl.w	r3, r2, r3
 80065a2:	43da      	mvns	r2, r3
 80065a4:	4b18      	ldr	r3, [pc, #96]	; (8006608 <xTaskPriorityDisinherit+0x108>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4013      	ands	r3, r2
 80065aa:	4a17      	ldr	r2, [pc, #92]	; (8006608 <xTaskPriorityDisinherit+0x108>)
 80065ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	f1c3 0207 	rsb	r2, r3, #7
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	2201      	movs	r2, #1
 80065c8:	409a      	lsls	r2, r3
 80065ca:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <xTaskPriorityDisinherit+0x108>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	4a0d      	ldr	r2, [pc, #52]	; (8006608 <xTaskPriorityDisinherit+0x108>)
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4a08      	ldr	r2, [pc, #32]	; (8006604 <xTaskPriorityDisinherit+0x104>)
 80065e2:	441a      	add	r2, r3
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	3304      	adds	r3, #4
 80065e8:	4619      	mov	r1, r3
 80065ea:	4610      	mov	r0, r2
 80065ec:	f7fe fae1 	bl	8004bb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065f0:	2301      	movs	r3, #1
 80065f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065f4:	697b      	ldr	r3, [r7, #20]
	}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000420 	.word	0x20000420
 8006604:	20000424 	.word	0x20000424
 8006608:	20000528 	.word	0x20000528

0800660c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800661a:	2301      	movs	r3, #1
 800661c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d077      	beq.n	8006714 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	60fb      	str	r3, [r7, #12]
}
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	429a      	cmp	r2, r3
 800664a:	d902      	bls.n	8006652 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	61fb      	str	r3, [r7, #28]
 8006650:	e002      	b.n	8006658 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006656:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	69fa      	ldr	r2, [r7, #28]
 800665e:	429a      	cmp	r2, r3
 8006660:	d058      	beq.n	8006714 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	429a      	cmp	r2, r3
 800666a:	d153      	bne.n	8006714 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800666c:	4b2b      	ldr	r3, [pc, #172]	; (800671c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	429a      	cmp	r2, r3
 8006674:	d10a      	bne.n	800668c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	60bb      	str	r3, [r7, #8]
}
 8006688:	bf00      	nop
 800668a:	e7fe      	b.n	800668a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	db04      	blt.n	80066aa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f1c3 0207 	rsb	r2, r3, #7
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	6959      	ldr	r1, [r3, #20]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4a19      	ldr	r2, [pc, #100]	; (8006720 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80066ba:	4413      	add	r3, r2
 80066bc:	4299      	cmp	r1, r3
 80066be:	d129      	bne.n	8006714 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe fad1 	bl	8004c6c <uxListRemove>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	2201      	movs	r2, #1
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
 80066da:	43da      	mvns	r2, r3
 80066dc:	4b11      	ldr	r3, [pc, #68]	; (8006724 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4013      	ands	r3, r2
 80066e2:	4a10      	ldr	r2, [pc, #64]	; (8006724 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80066e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	2201      	movs	r2, #1
 80066ec:	409a      	lsls	r2, r3
 80066ee:	4b0d      	ldr	r3, [pc, #52]	; (8006724 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	4a0b      	ldr	r2, [pc, #44]	; (8006724 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4a06      	ldr	r2, [pc, #24]	; (8006720 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006706:	441a      	add	r2, r3
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	3304      	adds	r3, #4
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f7fe fa4f 	bl	8004bb2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006714:	bf00      	nop
 8006716:	3720      	adds	r7, #32
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000420 	.word	0x20000420
 8006720:	20000424 	.word	0x20000424
 8006724:	20000528 	.word	0x20000528

08006728 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800672c:	4b07      	ldr	r3, [pc, #28]	; (800674c <pvTaskIncrementMutexHeldCount+0x24>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <pvTaskIncrementMutexHeldCount+0x24>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800673a:	3201      	adds	r2, #1
 800673c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800673e:	4b03      	ldr	r3, [pc, #12]	; (800674c <pvTaskIncrementMutexHeldCount+0x24>)
 8006740:	681b      	ldr	r3, [r3, #0]
	}
 8006742:	4618      	mov	r0, r3
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	20000420 	.word	0x20000420

08006750 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800675a:	4b29      	ldr	r3, [pc, #164]	; (8006800 <prvAddCurrentTaskToDelayedList+0xb0>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006760:	4b28      	ldr	r3, [pc, #160]	; (8006804 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3304      	adds	r3, #4
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe fa80 	bl	8004c6c <uxListRemove>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10b      	bne.n	800678a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006772:	4b24      	ldr	r3, [pc, #144]	; (8006804 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	2201      	movs	r2, #1
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	43da      	mvns	r2, r3
 8006780:	4b21      	ldr	r3, [pc, #132]	; (8006808 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4013      	ands	r3, r2
 8006786:	4a20      	ldr	r2, [pc, #128]	; (8006808 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006788:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006790:	d10a      	bne.n	80067a8 <prvAddCurrentTaskToDelayedList+0x58>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d007      	beq.n	80067a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006798:	4b1a      	ldr	r3, [pc, #104]	; (8006804 <prvAddCurrentTaskToDelayedList+0xb4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3304      	adds	r3, #4
 800679e:	4619      	mov	r1, r3
 80067a0:	481a      	ldr	r0, [pc, #104]	; (800680c <prvAddCurrentTaskToDelayedList+0xbc>)
 80067a2:	f7fe fa06 	bl	8004bb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067a6:	e026      	b.n	80067f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4413      	add	r3, r2
 80067ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067b0:	4b14      	ldr	r3, [pc, #80]	; (8006804 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d209      	bcs.n	80067d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067c0:	4b13      	ldr	r3, [pc, #76]	; (8006810 <prvAddCurrentTaskToDelayedList+0xc0>)
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	4b0f      	ldr	r3, [pc, #60]	; (8006804 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3304      	adds	r3, #4
 80067ca:	4619      	mov	r1, r3
 80067cc:	4610      	mov	r0, r2
 80067ce:	f7fe fa14 	bl	8004bfa <vListInsert>
}
 80067d2:	e010      	b.n	80067f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067d4:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <prvAddCurrentTaskToDelayedList+0xc4>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3304      	adds	r3, #4
 80067de:	4619      	mov	r1, r3
 80067e0:	4610      	mov	r0, r2
 80067e2:	f7fe fa0a 	bl	8004bfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <prvAddCurrentTaskToDelayedList+0xc8>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d202      	bcs.n	80067f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80067f0:	4a09      	ldr	r2, [pc, #36]	; (8006818 <prvAddCurrentTaskToDelayedList+0xc8>)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6013      	str	r3, [r2, #0]
}
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000524 	.word	0x20000524
 8006804:	20000420 	.word	0x20000420
 8006808:	20000528 	.word	0x20000528
 800680c:	2000050c 	.word	0x2000050c
 8006810:	200004dc 	.word	0x200004dc
 8006814:	200004d8 	.word	0x200004d8
 8006818:	20000540 	.word	0x20000540

0800681c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3b04      	subs	r3, #4
 800682c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3b04      	subs	r3, #4
 800683a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f023 0201 	bic.w	r2, r3, #1
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3b04      	subs	r3, #4
 800684a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800684c:	4a0c      	ldr	r2, [pc, #48]	; (8006880 <pxPortInitialiseStack+0x64>)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3b14      	subs	r3, #20
 8006856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3b04      	subs	r3, #4
 8006862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f06f 0202 	mvn.w	r2, #2
 800686a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3b20      	subs	r3, #32
 8006870:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006872:	68fb      	ldr	r3, [r7, #12]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	08006885 	.word	0x08006885

08006884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800688e:	4b12      	ldr	r3, [pc, #72]	; (80068d8 <prvTaskExitError+0x54>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d00a      	beq.n	80068ae <prvTaskExitError+0x2a>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	60fb      	str	r3, [r7, #12]
}
 80068aa:	bf00      	nop
 80068ac:	e7fe      	b.n	80068ac <prvTaskExitError+0x28>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	60bb      	str	r3, [r7, #8]
}
 80068c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068c2:	bf00      	nop
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0fc      	beq.n	80068c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068ca:	bf00      	nop
 80068cc:	bf00      	nop
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	2000000c 	.word	0x2000000c
 80068dc:	00000000 	.word	0x00000000

080068e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068e0:	4b07      	ldr	r3, [pc, #28]	; (8006900 <pxCurrentTCBConst2>)
 80068e2:	6819      	ldr	r1, [r3, #0]
 80068e4:	6808      	ldr	r0, [r1, #0]
 80068e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ea:	f380 8809 	msr	PSP, r0
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f380 8811 	msr	BASEPRI, r0
 80068fa:	4770      	bx	lr
 80068fc:	f3af 8000 	nop.w

08006900 <pxCurrentTCBConst2>:
 8006900:	20000420 	.word	0x20000420
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop

08006908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006908:	4808      	ldr	r0, [pc, #32]	; (800692c <prvPortStartFirstTask+0x24>)
 800690a:	6800      	ldr	r0, [r0, #0]
 800690c:	6800      	ldr	r0, [r0, #0]
 800690e:	f380 8808 	msr	MSP, r0
 8006912:	f04f 0000 	mov.w	r0, #0
 8006916:	f380 8814 	msr	CONTROL, r0
 800691a:	b662      	cpsie	i
 800691c:	b661      	cpsie	f
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	df00      	svc	0
 8006928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800692a:	bf00      	nop
 800692c:	e000ed08 	.word	0xe000ed08

08006930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006936:	4b46      	ldr	r3, [pc, #280]	; (8006a50 <xPortStartScheduler+0x120>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a46      	ldr	r2, [pc, #280]	; (8006a54 <xPortStartScheduler+0x124>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d10a      	bne.n	8006956 <xPortStartScheduler+0x26>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	613b      	str	r3, [r7, #16]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006956:	4b3e      	ldr	r3, [pc, #248]	; (8006a50 <xPortStartScheduler+0x120>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a3f      	ldr	r2, [pc, #252]	; (8006a58 <xPortStartScheduler+0x128>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d10a      	bne.n	8006976 <xPortStartScheduler+0x46>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	60fb      	str	r3, [r7, #12]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006976:	4b39      	ldr	r3, [pc, #228]	; (8006a5c <xPortStartScheduler+0x12c>)
 8006978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	22ff      	movs	r2, #255	; 0xff
 8006986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006990:	78fb      	ldrb	r3, [r7, #3]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006998:	b2da      	uxtb	r2, r3
 800699a:	4b31      	ldr	r3, [pc, #196]	; (8006a60 <xPortStartScheduler+0x130>)
 800699c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800699e:	4b31      	ldr	r3, [pc, #196]	; (8006a64 <xPortStartScheduler+0x134>)
 80069a0:	2207      	movs	r2, #7
 80069a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069a4:	e009      	b.n	80069ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80069a6:	4b2f      	ldr	r3, [pc, #188]	; (8006a64 <xPortStartScheduler+0x134>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	4a2d      	ldr	r2, [pc, #180]	; (8006a64 <xPortStartScheduler+0x134>)
 80069ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069ba:	78fb      	ldrb	r3, [r7, #3]
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c2:	2b80      	cmp	r3, #128	; 0x80
 80069c4:	d0ef      	beq.n	80069a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069c6:	4b27      	ldr	r3, [pc, #156]	; (8006a64 <xPortStartScheduler+0x134>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f1c3 0307 	rsb	r3, r3, #7
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d00a      	beq.n	80069e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	60bb      	str	r3, [r7, #8]
}
 80069e4:	bf00      	nop
 80069e6:	e7fe      	b.n	80069e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069e8:	4b1e      	ldr	r3, [pc, #120]	; (8006a64 <xPortStartScheduler+0x134>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	4a1d      	ldr	r2, [pc, #116]	; (8006a64 <xPortStartScheduler+0x134>)
 80069f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069f2:	4b1c      	ldr	r3, [pc, #112]	; (8006a64 <xPortStartScheduler+0x134>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069fa:	4a1a      	ldr	r2, [pc, #104]	; (8006a64 <xPortStartScheduler+0x134>)
 80069fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a06:	4b18      	ldr	r3, [pc, #96]	; (8006a68 <xPortStartScheduler+0x138>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a17      	ldr	r2, [pc, #92]	; (8006a68 <xPortStartScheduler+0x138>)
 8006a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a12:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <xPortStartScheduler+0x138>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a14      	ldr	r2, [pc, #80]	; (8006a68 <xPortStartScheduler+0x138>)
 8006a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a1e:	f000 f8dd 	bl	8006bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a22:	4b12      	ldr	r3, [pc, #72]	; (8006a6c <xPortStartScheduler+0x13c>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a28:	f000 f8fc 	bl	8006c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a2c:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <xPortStartScheduler+0x140>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a0f      	ldr	r2, [pc, #60]	; (8006a70 <xPortStartScheduler+0x140>)
 8006a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a38:	f7ff ff66 	bl	8006908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a3c:	f7ff fa90 	bl	8005f60 <vTaskSwitchContext>
	prvTaskExitError();
 8006a40:	f7ff ff20 	bl	8006884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	e000ed00 	.word	0xe000ed00
 8006a54:	410fc271 	.word	0x410fc271
 8006a58:	410fc270 	.word	0x410fc270
 8006a5c:	e000e400 	.word	0xe000e400
 8006a60:	2000054c 	.word	0x2000054c
 8006a64:	20000550 	.word	0x20000550
 8006a68:	e000ed20 	.word	0xe000ed20
 8006a6c:	2000000c 	.word	0x2000000c
 8006a70:	e000ef34 	.word	0xe000ef34

08006a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	607b      	str	r3, [r7, #4]
}
 8006a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a8e:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <vPortEnterCritical+0x58>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3301      	adds	r3, #1
 8006a94:	4a0d      	ldr	r2, [pc, #52]	; (8006acc <vPortEnterCritical+0x58>)
 8006a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a98:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <vPortEnterCritical+0x58>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d10f      	bne.n	8006ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <vPortEnterCritical+0x5c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	603b      	str	r3, [r7, #0]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <vPortEnterCritical+0x4a>
	}
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	2000000c 	.word	0x2000000c
 8006ad0:	e000ed04 	.word	0xe000ed04

08006ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ada:	4b12      	ldr	r3, [pc, #72]	; (8006b24 <vPortExitCritical+0x50>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <vPortExitCritical+0x24>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	607b      	str	r3, [r7, #4]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006af8:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <vPortExitCritical+0x50>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	4a09      	ldr	r2, [pc, #36]	; (8006b24 <vPortExitCritical+0x50>)
 8006b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b02:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <vPortExitCritical+0x50>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d105      	bne.n	8006b16 <vPortExitCritical+0x42>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	f383 8811 	msr	BASEPRI, r3
}
 8006b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	2000000c 	.word	0x2000000c
	...

08006b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b30:	f3ef 8009 	mrs	r0, PSP
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <pxCurrentTCBConst>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	f01e 0f10 	tst.w	lr, #16
 8006b40:	bf08      	it	eq
 8006b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4a:	6010      	str	r0, [r2, #0]
 8006b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b54:	f380 8811 	msr	BASEPRI, r0
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f7ff f9fe 	bl	8005f60 <vTaskSwitchContext>
 8006b64:	f04f 0000 	mov.w	r0, #0
 8006b68:	f380 8811 	msr	BASEPRI, r0
 8006b6c:	bc09      	pop	{r0, r3}
 8006b6e:	6819      	ldr	r1, [r3, #0]
 8006b70:	6808      	ldr	r0, [r1, #0]
 8006b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b76:	f01e 0f10 	tst.w	lr, #16
 8006b7a:	bf08      	it	eq
 8006b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b80:	f380 8809 	msr	PSP, r0
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	f3af 8000 	nop.w

08006b90 <pxCurrentTCBConst>:
 8006b90:	20000420 	.word	0x20000420
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop

08006b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
}
 8006bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bb2:	f7ff f91d 	bl	8005df0 <xTaskIncrementTick>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <SysTick_Handler+0x40>)
 8006bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	f383 8811 	msr	BASEPRI, r3
}
 8006bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006be0:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <vPortSetupTimerInterrupt+0x34>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006be6:	4b0b      	ldr	r3, [pc, #44]	; (8006c14 <vPortSetupTimerInterrupt+0x38>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bec:	4b0a      	ldr	r3, [pc, #40]	; (8006c18 <vPortSetupTimerInterrupt+0x3c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a0a      	ldr	r2, [pc, #40]	; (8006c1c <vPortSetupTimerInterrupt+0x40>)
 8006bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf6:	099b      	lsrs	r3, r3, #6
 8006bf8:	4a09      	ldr	r2, [pc, #36]	; (8006c20 <vPortSetupTimerInterrupt+0x44>)
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bfe:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <vPortSetupTimerInterrupt+0x34>)
 8006c00:	2207      	movs	r2, #7
 8006c02:	601a      	str	r2, [r3, #0]
}
 8006c04:	bf00      	nop
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	e000e010 	.word	0xe000e010
 8006c14:	e000e018 	.word	0xe000e018
 8006c18:	20000000 	.word	0x20000000
 8006c1c:	10624dd3 	.word	0x10624dd3
 8006c20:	e000e014 	.word	0xe000e014

08006c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c34 <vPortEnableVFP+0x10>
 8006c28:	6801      	ldr	r1, [r0, #0]
 8006c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c2e:	6001      	str	r1, [r0, #0]
 8006c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c32:	bf00      	nop
 8006c34:	e000ed88 	.word	0xe000ed88

08006c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c3e:	f3ef 8305 	mrs	r3, IPSR
 8006c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b0f      	cmp	r3, #15
 8006c48:	d914      	bls.n	8006c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c4a:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <vPortValidateInterruptPriority+0x70>)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c54:	4b15      	ldr	r3, [pc, #84]	; (8006cac <vPortValidateInterruptPriority+0x74>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	7afa      	ldrb	r2, [r7, #11]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d20a      	bcs.n	8006c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	607b      	str	r3, [r7, #4]
}
 8006c70:	bf00      	nop
 8006c72:	e7fe      	b.n	8006c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c74:	4b0e      	ldr	r3, [pc, #56]	; (8006cb0 <vPortValidateInterruptPriority+0x78>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c7c:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <vPortValidateInterruptPriority+0x7c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d90a      	bls.n	8006c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	603b      	str	r3, [r7, #0]
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <vPortValidateInterruptPriority+0x60>
	}
 8006c9a:	bf00      	nop
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	e000e3f0 	.word	0xe000e3f0
 8006cac:	2000054c 	.word	0x2000054c
 8006cb0:	e000ed0c 	.word	0xe000ed0c
 8006cb4:	20000550 	.word	0x20000550

08006cb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08a      	sub	sp, #40	; 0x28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cc4:	f7fe ffea 	bl	8005c9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cc8:	4b5b      	ldr	r3, [pc, #364]	; (8006e38 <pvPortMalloc+0x180>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cd0:	f000 f920 	bl	8006f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cd4:	4b59      	ldr	r3, [pc, #356]	; (8006e3c <pvPortMalloc+0x184>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f040 8093 	bne.w	8006e08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01d      	beq.n	8006d24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ce8:	2208      	movs	r2, #8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4413      	add	r3, r2
 8006cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d014      	beq.n	8006d24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f023 0307 	bic.w	r3, r3, #7
 8006d00:	3308      	adds	r3, #8
 8006d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <pvPortMalloc+0x6c>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	617b      	str	r3, [r7, #20]
}
 8006d20:	bf00      	nop
 8006d22:	e7fe      	b.n	8006d22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d06e      	beq.n	8006e08 <pvPortMalloc+0x150>
 8006d2a:	4b45      	ldr	r3, [pc, #276]	; (8006e40 <pvPortMalloc+0x188>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d869      	bhi.n	8006e08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d34:	4b43      	ldr	r3, [pc, #268]	; (8006e44 <pvPortMalloc+0x18c>)
 8006d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d38:	4b42      	ldr	r3, [pc, #264]	; (8006e44 <pvPortMalloc+0x18c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d3e:	e004      	b.n	8006d4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d903      	bls.n	8006d5c <pvPortMalloc+0xa4>
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1f1      	bne.n	8006d40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d5c:	4b36      	ldr	r3, [pc, #216]	; (8006e38 <pvPortMalloc+0x180>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d050      	beq.n	8006e08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2208      	movs	r2, #8
 8006d6c:	4413      	add	r3, r2
 8006d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	1ad2      	subs	r2, r2, r3
 8006d80:	2308      	movs	r3, #8
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d91f      	bls.n	8006dc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <pvPortMalloc+0xf8>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	613b      	str	r3, [r7, #16]
}
 8006dac:	bf00      	nop
 8006dae:	e7fe      	b.n	8006dae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	1ad2      	subs	r2, r2, r3
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dc2:	69b8      	ldr	r0, [r7, #24]
 8006dc4:	f000 f908 	bl	8006fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dc8:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <pvPortMalloc+0x188>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	4a1b      	ldr	r2, [pc, #108]	; (8006e40 <pvPortMalloc+0x188>)
 8006dd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dd6:	4b1a      	ldr	r3, [pc, #104]	; (8006e40 <pvPortMalloc+0x188>)
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	4b1b      	ldr	r3, [pc, #108]	; (8006e48 <pvPortMalloc+0x190>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d203      	bcs.n	8006dea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006de2:	4b17      	ldr	r3, [pc, #92]	; (8006e40 <pvPortMalloc+0x188>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a18      	ldr	r2, [pc, #96]	; (8006e48 <pvPortMalloc+0x190>)
 8006de8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <pvPortMalloc+0x184>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	431a      	orrs	r2, r3
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006dfe:	4b13      	ldr	r3, [pc, #76]	; (8006e4c <pvPortMalloc+0x194>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3301      	adds	r3, #1
 8006e04:	4a11      	ldr	r2, [pc, #68]	; (8006e4c <pvPortMalloc+0x194>)
 8006e06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e08:	f7fe ff56 	bl	8005cb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <pvPortMalloc+0x174>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	60fb      	str	r3, [r7, #12]
}
 8006e28:	bf00      	nop
 8006e2a:	e7fe      	b.n	8006e2a <pvPortMalloc+0x172>
	return pvReturn;
 8006e2c:	69fb      	ldr	r3, [r7, #28]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3728      	adds	r7, #40	; 0x28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	2000415c 	.word	0x2000415c
 8006e3c:	20004170 	.word	0x20004170
 8006e40:	20004160 	.word	0x20004160
 8006e44:	20004154 	.word	0x20004154
 8006e48:	20004164 	.word	0x20004164
 8006e4c:	20004168 	.word	0x20004168

08006e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d04d      	beq.n	8006efe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e62:	2308      	movs	r3, #8
 8006e64:	425b      	negs	r3, r3
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4413      	add	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	4b24      	ldr	r3, [pc, #144]	; (8006f08 <vPortFree+0xb8>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4013      	ands	r3, r2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <vPortFree+0x44>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	60fb      	str	r3, [r7, #12]
}
 8006e90:	bf00      	nop
 8006e92:	e7fe      	b.n	8006e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00a      	beq.n	8006eb2 <vPortFree+0x62>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60bb      	str	r3, [r7, #8]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	4b14      	ldr	r3, [pc, #80]	; (8006f08 <vPortFree+0xb8>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01e      	beq.n	8006efe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d11a      	bne.n	8006efe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	4b0e      	ldr	r3, [pc, #56]	; (8006f08 <vPortFree+0xb8>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	401a      	ands	r2, r3
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ed8:	f7fe fee0 	bl	8005c9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <vPortFree+0xbc>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	4a09      	ldr	r2, [pc, #36]	; (8006f0c <vPortFree+0xbc>)
 8006ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eea:	6938      	ldr	r0, [r7, #16]
 8006eec:	f000 f874 	bl	8006fd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <vPortFree+0xc0>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	4a06      	ldr	r2, [pc, #24]	; (8006f10 <vPortFree+0xc0>)
 8006ef8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006efa:	f7fe fedd 	bl	8005cb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006efe:	bf00      	nop
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20004170 	.word	0x20004170
 8006f0c:	20004160 	.word	0x20004160
 8006f10:	2000416c 	.word	0x2000416c

08006f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f20:	4b27      	ldr	r3, [pc, #156]	; (8006fc0 <prvHeapInit+0xac>)
 8006f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f003 0307 	and.w	r3, r3, #7
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00c      	beq.n	8006f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3307      	adds	r3, #7
 8006f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 0307 	bic.w	r3, r3, #7
 8006f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	4a1f      	ldr	r2, [pc, #124]	; (8006fc0 <prvHeapInit+0xac>)
 8006f44:	4413      	add	r3, r2
 8006f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f4c:	4a1d      	ldr	r2, [pc, #116]	; (8006fc4 <prvHeapInit+0xb0>)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f52:	4b1c      	ldr	r3, [pc, #112]	; (8006fc4 <prvHeapInit+0xb0>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f60:	2208      	movs	r2, #8
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	1a9b      	subs	r3, r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0307 	bic.w	r3, r3, #7
 8006f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a15      	ldr	r2, [pc, #84]	; (8006fc8 <prvHeapInit+0xb4>)
 8006f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f76:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <prvHeapInit+0xb4>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f7e:	4b12      	ldr	r3, [pc, #72]	; (8006fc8 <prvHeapInit+0xb4>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	1ad2      	subs	r2, r2, r3
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f94:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <prvHeapInit+0xb4>)
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	4a0a      	ldr	r2, [pc, #40]	; (8006fcc <prvHeapInit+0xb8>)
 8006fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	4a09      	ldr	r2, [pc, #36]	; (8006fd0 <prvHeapInit+0xbc>)
 8006faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006fac:	4b09      	ldr	r3, [pc, #36]	; (8006fd4 <prvHeapInit+0xc0>)
 8006fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006fb2:	601a      	str	r2, [r3, #0]
}
 8006fb4:	bf00      	nop
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	20000554 	.word	0x20000554
 8006fc4:	20004154 	.word	0x20004154
 8006fc8:	2000415c 	.word	0x2000415c
 8006fcc:	20004164 	.word	0x20004164
 8006fd0:	20004160 	.word	0x20004160
 8006fd4:	20004170 	.word	0x20004170

08006fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fe0:	4b28      	ldr	r3, [pc, #160]	; (8007084 <prvInsertBlockIntoFreeList+0xac>)
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	e002      	b.n	8006fec <prvInsertBlockIntoFreeList+0x14>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d8f7      	bhi.n	8006fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	4413      	add	r3, r2
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	429a      	cmp	r2, r3
 8007006:	d108      	bne.n	800701a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	441a      	add	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	441a      	add	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d118      	bne.n	8007060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4b15      	ldr	r3, [pc, #84]	; (8007088 <prvInsertBlockIntoFreeList+0xb0>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	429a      	cmp	r2, r3
 8007038:	d00d      	beq.n	8007056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	441a      	add	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	e008      	b.n	8007068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <prvInsertBlockIntoFreeList+0xb0>)
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	e003      	b.n	8007068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	429a      	cmp	r2, r3
 800706e:	d002      	beq.n	8007076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007076:	bf00      	nop
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	20004154 	.word	0x20004154
 8007088:	2000415c 	.word	0x2000415c

0800708c <memset>:
 800708c:	4402      	add	r2, r0
 800708e:	4603      	mov	r3, r0
 8007090:	4293      	cmp	r3, r2
 8007092:	d100      	bne.n	8007096 <memset+0xa>
 8007094:	4770      	bx	lr
 8007096:	f803 1b01 	strb.w	r1, [r3], #1
 800709a:	e7f9      	b.n	8007090 <memset+0x4>

0800709c <__libc_init_array>:
 800709c:	b570      	push	{r4, r5, r6, lr}
 800709e:	4d0d      	ldr	r5, [pc, #52]	; (80070d4 <__libc_init_array+0x38>)
 80070a0:	4c0d      	ldr	r4, [pc, #52]	; (80070d8 <__libc_init_array+0x3c>)
 80070a2:	1b64      	subs	r4, r4, r5
 80070a4:	10a4      	asrs	r4, r4, #2
 80070a6:	2600      	movs	r6, #0
 80070a8:	42a6      	cmp	r6, r4
 80070aa:	d109      	bne.n	80070c0 <__libc_init_array+0x24>
 80070ac:	4d0b      	ldr	r5, [pc, #44]	; (80070dc <__libc_init_array+0x40>)
 80070ae:	4c0c      	ldr	r4, [pc, #48]	; (80070e0 <__libc_init_array+0x44>)
 80070b0:	f000 f826 	bl	8007100 <_init>
 80070b4:	1b64      	subs	r4, r4, r5
 80070b6:	10a4      	asrs	r4, r4, #2
 80070b8:	2600      	movs	r6, #0
 80070ba:	42a6      	cmp	r6, r4
 80070bc:	d105      	bne.n	80070ca <__libc_init_array+0x2e>
 80070be:	bd70      	pop	{r4, r5, r6, pc}
 80070c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c4:	4798      	blx	r3
 80070c6:	3601      	adds	r6, #1
 80070c8:	e7ee      	b.n	80070a8 <__libc_init_array+0xc>
 80070ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ce:	4798      	blx	r3
 80070d0:	3601      	adds	r6, #1
 80070d2:	e7f2      	b.n	80070ba <__libc_init_array+0x1e>
 80070d4:	080071c0 	.word	0x080071c0
 80070d8:	080071c0 	.word	0x080071c0
 80070dc:	080071c0 	.word	0x080071c0
 80070e0:	080071c4 	.word	0x080071c4

080070e4 <memcpy>:
 80070e4:	440a      	add	r2, r1
 80070e6:	4291      	cmp	r1, r2
 80070e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80070ec:	d100      	bne.n	80070f0 <memcpy+0xc>
 80070ee:	4770      	bx	lr
 80070f0:	b510      	push	{r4, lr}
 80070f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070fa:	4291      	cmp	r1, r2
 80070fc:	d1f9      	bne.n	80070f2 <memcpy+0xe>
 80070fe:	bd10      	pop	{r4, pc}

08007100 <_init>:
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007102:	bf00      	nop
 8007104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007106:	bc08      	pop	{r3}
 8007108:	469e      	mov	lr, r3
 800710a:	4770      	bx	lr

0800710c <_fini>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	bf00      	nop
 8007110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007112:	bc08      	pop	{r3}
 8007114:	469e      	mov	lr, r3
 8007116:	4770      	bx	lr
