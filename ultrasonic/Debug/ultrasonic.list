
ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000460c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080047ac  080047ac  000147ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800484c  0800484c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004854  08004854  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004854  08004854  00014854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004858  08004858  00014858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800485c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040cc  20000010  0800486c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040dc  0800486c  000240dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1b1  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000298e  00000000  00000000  0002f234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00031bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b69  00000000  00000000  00032ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016fc0  00000000  00000000  00033619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107a8  00000000  00000000  0004a5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009307c  00000000  00000000  0005ad81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003db8  00000000  00000000  000ede00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000f1bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004794 	.word	0x08004794

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004794 	.word	0x08004794

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b970 	b.w	8000cb4 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9e08      	ldr	r6, [sp, #32]
 80009f2:	460d      	mov	r5, r1
 80009f4:	4604      	mov	r4, r0
 80009f6:	460f      	mov	r7, r1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d14a      	bne.n	8000a92 <__udivmoddi4+0xa6>
 80009fc:	428a      	cmp	r2, r1
 80009fe:	4694      	mov	ip, r2
 8000a00:	d965      	bls.n	8000ace <__udivmoddi4+0xe2>
 8000a02:	fab2 f382 	clz	r3, r2
 8000a06:	b143      	cbz	r3, 8000a1a <__udivmoddi4+0x2e>
 8000a08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a0c:	f1c3 0220 	rsb	r2, r3, #32
 8000a10:	409f      	lsls	r7, r3
 8000a12:	fa20 f202 	lsr.w	r2, r0, r2
 8000a16:	4317      	orrs	r7, r2
 8000a18:	409c      	lsls	r4, r3
 8000a1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a1e:	fa1f f58c 	uxth.w	r5, ip
 8000a22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a26:	0c22      	lsrs	r2, r4, #16
 8000a28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a30:	fb01 f005 	mul.w	r0, r1, r5
 8000a34:	4290      	cmp	r0, r2
 8000a36:	d90a      	bls.n	8000a4e <__udivmoddi4+0x62>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a40:	f080 811c 	bcs.w	8000c7c <__udivmoddi4+0x290>
 8000a44:	4290      	cmp	r0, r2
 8000a46:	f240 8119 	bls.w	8000c7c <__udivmoddi4+0x290>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4462      	add	r2, ip
 8000a4e:	1a12      	subs	r2, r2, r0
 8000a50:	b2a4      	uxth	r4, r4
 8000a52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a5e:	fb00 f505 	mul.w	r5, r0, r5
 8000a62:	42a5      	cmp	r5, r4
 8000a64:	d90a      	bls.n	8000a7c <__udivmoddi4+0x90>
 8000a66:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a6e:	f080 8107 	bcs.w	8000c80 <__udivmoddi4+0x294>
 8000a72:	42a5      	cmp	r5, r4
 8000a74:	f240 8104 	bls.w	8000c80 <__udivmoddi4+0x294>
 8000a78:	4464      	add	r4, ip
 8000a7a:	3802      	subs	r0, #2
 8000a7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a80:	1b64      	subs	r4, r4, r5
 8000a82:	2100      	movs	r1, #0
 8000a84:	b11e      	cbz	r6, 8000a8e <__udivmoddi4+0xa2>
 8000a86:	40dc      	lsrs	r4, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	428b      	cmp	r3, r1
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0xbc>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	f000 80ed 	beq.w	8000c76 <__udivmoddi4+0x28a>
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa8:	fab3 f183 	clz	r1, r3
 8000aac:	2900      	cmp	r1, #0
 8000aae:	d149      	bne.n	8000b44 <__udivmoddi4+0x158>
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	d302      	bcc.n	8000aba <__udivmoddi4+0xce>
 8000ab4:	4282      	cmp	r2, r0
 8000ab6:	f200 80f8 	bhi.w	8000caa <__udivmoddi4+0x2be>
 8000aba:	1a84      	subs	r4, r0, r2
 8000abc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d0e2      	beq.n	8000a8e <__udivmoddi4+0xa2>
 8000ac8:	e9c6 4700 	strd	r4, r7, [r6]
 8000acc:	e7df      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000ace:	b902      	cbnz	r2, 8000ad2 <__udivmoddi4+0xe6>
 8000ad0:	deff      	udf	#255	; 0xff
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8090 	bne.w	8000bfc <__udivmoddi4+0x210>
 8000adc:	1a8a      	subs	r2, r1, r2
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000aec:	fb07 2015 	mls	r0, r7, r5, r2
 8000af0:	0c22      	lsrs	r2, r4, #16
 8000af2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000af6:	fb0e f005 	mul.w	r0, lr, r5
 8000afa:	4290      	cmp	r0, r2
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x124>
 8000afe:	eb1c 0202 	adds.w	r2, ip, r2
 8000b02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x122>
 8000b08:	4290      	cmp	r0, r2
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2b8>
 8000b0e:	4645      	mov	r5, r8
 8000b10:	1a12      	subs	r2, r2, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b18:	fb07 2210 	mls	r2, r7, r0, r2
 8000b1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x14e>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x14c>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2c2>
 8000b38:	4610      	mov	r0, r2
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b42:	e79f      	b.n	8000a84 <__udivmoddi4+0x98>
 8000b44:	f1c1 0720 	rsb	r7, r1, #32
 8000b48:	408b      	lsls	r3, r1
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa05 f401 	lsl.w	r4, r5, r1
 8000b56:	fa20 f307 	lsr.w	r3, r0, r7
 8000b5a:	40fd      	lsrs	r5, r7
 8000b5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b60:	4323      	orrs	r3, r4
 8000b62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b66:	fa1f fe8c 	uxth.w	lr, ip
 8000b6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b6e:	0c1c      	lsrs	r4, r3, #16
 8000b70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b74:	fb08 f50e 	mul.w	r5, r8, lr
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b0>
 8000b84:	eb1c 0404 	adds.w	r4, ip, r4
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b90:	42a5      	cmp	r5, r4
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4464      	add	r4, ip
 8000b9c:	1b64      	subs	r4, r4, r5
 8000b9e:	b29d      	uxth	r5, r3
 8000ba0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ba4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1da>
 8000bb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2ac>
 8000bbe:	45a6      	cmp	lr, r4
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2ac>
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	4464      	add	r4, ip
 8000bc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bca:	fba3 9502 	umull	r9, r5, r3, r2
 8000bce:	eba4 040e 	sub.w	r4, r4, lr
 8000bd2:	42ac      	cmp	r4, r5
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46ae      	mov	lr, r5
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x29c>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x298>
 8000bdc:	b156      	cbz	r6, 8000bf4 <__udivmoddi4+0x208>
 8000bde:	ebb0 0208 	subs.w	r2, r0, r8
 8000be2:	eb64 040e 	sbc.w	r4, r4, lr
 8000be6:	fa04 f707 	lsl.w	r7, r4, r7
 8000bea:	40ca      	lsrs	r2, r1
 8000bec:	40cc      	lsrs	r4, r1
 8000bee:	4317      	orrs	r7, r2
 8000bf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfc:	f1c3 0120 	rsb	r1, r3, #32
 8000c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c04:	fa20 f201 	lsr.w	r2, r0, r1
 8000c08:	fa25 f101 	lsr.w	r1, r5, r1
 8000c0c:	409d      	lsls	r5, r3
 8000c0e:	432a      	orrs	r2, r5
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c20:	0c11      	lsrs	r1, r2, #16
 8000c22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c26:	fb00 f50e 	mul.w	r5, r0, lr
 8000c2a:	428d      	cmp	r5, r1
 8000c2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x258>
 8000c32:	eb1c 0101 	adds.w	r1, ip, r1
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c3c:	428d      	cmp	r5, r1
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1b49      	subs	r1, r1, r5
 8000c46:	b292      	uxth	r2, r2
 8000c48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c54:	fb05 f10e 	mul.w	r1, r5, lr
 8000c58:	4291      	cmp	r1, r2
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x282>
 8000c5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2a8>
 8000c66:	4291      	cmp	r1, r2
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2a8>
 8000c6a:	3d02      	subs	r5, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a52      	subs	r2, r2, r1
 8000c70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0xfc>
 8000c76:	4631      	mov	r1, r6
 8000c78:	4630      	mov	r0, r6
 8000c7a:	e708      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e6e6      	b.n	8000a4e <__udivmoddi4+0x62>
 8000c80:	4610      	mov	r0, r2
 8000c82:	e6fb      	b.n	8000a7c <__udivmoddi4+0x90>
 8000c84:	4548      	cmp	r0, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f0>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c90:	3b01      	subs	r3, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f0>
 8000c94:	4645      	mov	r5, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x282>
 8000c98:	462b      	mov	r3, r5
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1da>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x258>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b0>
 8000ca4:	3d02      	subs	r5, #2
 8000ca6:	4462      	add	r2, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x124>
 8000caa:	4608      	mov	r0, r1
 8000cac:	e70a      	b.n	8000ac4 <__udivmoddi4+0xd8>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x14e>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <delay+0x30>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000cca:	bf00      	nop
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <delay+0x30>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d3f9      	bcc.n	8000ccc <delay+0x14>
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000280 	.word	0x20000280

08000cec <HCSR04_Read>:
#include "main.h"
#include "Ultrasonic.h"


void HCSR04_Read (GPIO_TypeDef* Port, uint16_t Pin,TIM_HandleTypeDef* htim)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	817b      	strh	r3, [r7, #10]
	HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000cfa:	897b      	ldrh	r3, [r7, #10]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4619      	mov	r1, r3
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f000 ffdb 	bl	8001cbc <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us     //////CHANGE THE DELAY
 8000d06:	200a      	movs	r0, #10
 8000d08:	f7ff ffd6 	bl	8000cb8 <delay>
	HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000d0c:	897b      	ldrh	r3, [r7, #10]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	4619      	mov	r1, r3
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f000 ffd2 	bl	8001cbc <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f042 0202 	orr.w	r2, r2, #2
 8000d26:	60da      	str	r2, [r3, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <vApplicationGetIdleTaskMemory+0x30>)
 8000d46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	2000002c 	.word	0x2000002c
 8000d60:	20000080 	.word	0x20000080
 8000d64:	00000000 	.word	0x00000000

08000d68 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_Back_PIN GPIO_PIN_15
#define TRIG_Back_PORT GPIOB


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d78:	f040 8088 	bne.w	8000e8c <HAL_TIM_IC_CaptureCallback+0x124>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	7f1b      	ldrb	r3, [r3, #28]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	f040 8083 	bne.w	8000e8c <HAL_TIM_IC_CaptureCallback+0x124>
		{
			if (Is_First_Captured_Back==0) // if the first value is not captured
 8000d86:	4b8c      	ldr	r3, [pc, #560]	; (8000fb8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d11a      	bne.n	8000dc4 <HAL_TIM_IC_CaptureCallback+0x5c>
			{
				IC_Back_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000d8e:	2100      	movs	r1, #0
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f001 ffd5 	bl	8002d40 <HAL_TIM_ReadCapturedValue>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a88      	ldr	r2, [pc, #544]	; (8000fbc <HAL_TIM_IC_CaptureCallback+0x254>)
 8000d9a:	6013      	str	r3, [r2, #0]
				Is_First_Captured_Back = 1;  // set the first captured as true
 8000d9c:	4b86      	ldr	r3, [pc, #536]	; (8000fb8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6a1a      	ldr	r2, [r3, #32]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 020a 	bic.w	r2, r2, #10
 8000db0:	621a      	str	r2, [r3, #32]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6a1a      	ldr	r2, [r3, #32]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f042 0202 	orr.w	r2, r2, #2
 8000dc0:	621a      	str	r2, [r3, #32]
 8000dc2:	e063      	b.n	8000e8c <HAL_TIM_IC_CaptureCallback+0x124>
			}

			else if (Is_First_Captured_Back==1)   // if the first is already captured
 8000dc4:	4b7c      	ldr	r3, [pc, #496]	; (8000fb8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d15f      	bne.n	8000e8c <HAL_TIM_IC_CaptureCallback+0x124>
			{
				IC_Back_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000dcc:	2100      	movs	r1, #0
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f001 ffb6 	bl	8002d40 <HAL_TIM_ReadCapturedValue>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4a7a      	ldr	r2, [pc, #488]	; (8000fc0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000dd8:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24

				if (IC_Back_Val2 > IC_Back_Val1)
 8000de2:	4b77      	ldr	r3, [pc, #476]	; (8000fc0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4b75      	ldr	r3, [pc, #468]	; (8000fbc <HAL_TIM_IC_CaptureCallback+0x254>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d907      	bls.n	8000dfe <HAL_TIM_IC_CaptureCallback+0x96>
				{
					Back_Difference = IC_Back_Val2-IC_Back_Val1;
 8000dee:	4b74      	ldr	r3, [pc, #464]	; (8000fc0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <HAL_TIM_IC_CaptureCallback+0x254>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	4a72      	ldr	r2, [pc, #456]	; (8000fc4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	e00f      	b.n	8000e1e <HAL_TIM_IC_CaptureCallback+0xb6>
				}

				else if (IC_Back_Val1 > IC_Back_Val2)
 8000dfe:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <HAL_TIM_IC_CaptureCallback+0x254>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	4b6f      	ldr	r3, [pc, #444]	; (8000fc0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d909      	bls.n	8000e1e <HAL_TIM_IC_CaptureCallback+0xb6>
				{
					Back_Difference = (0xffff - IC_Back_Val1) + IC_Back_Val2;
 8000e0a:	4b6d      	ldr	r3, [pc, #436]	; (8000fc0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4b6b      	ldr	r3, [pc, #428]	; (8000fbc <HAL_TIM_IC_CaptureCallback+0x254>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e18:	33ff      	adds	r3, #255	; 0xff
 8000e1a:	4a6a      	ldr	r2, [pc, #424]	; (8000fc4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000e1c:	6013      	str	r3, [r2, #0]
				}

				Back_Distance = Back_Difference * .034/2;
 8000e1e:	4b69      	ldr	r3, [pc, #420]	; (8000fc4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fb1e 	bl	8000464 <__aeabi_ui2d>
 8000e28:	a361      	add	r3, pc, #388	; (adr r3, 8000fb0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	f7ff fb93 	bl	8000558 <__aeabi_dmul>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e42:	f7ff fcb3 	bl	80007ac <__aeabi_ddiv>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f7ff fd95 	bl	800097c <__aeabi_d2uiz>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b5c      	ldr	r3, [pc, #368]	; (8000fc8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000e58:	701a      	strb	r2, [r3, #0]
				Is_First_Captured_Back = 0; // set it back to false
 8000e5a:	4b57      	ldr	r3, [pc, #348]	; (8000fb8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]

				// set polarity to rising edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a1a      	ldr	r2, [r3, #32]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 020a 	bic.w	r2, r2, #10
 8000e6e:	621a      	str	r2, [r3, #32]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6a12      	ldr	r2, [r2, #32]
 8000e7a:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8000e7c:	4b53      	ldr	r3, [pc, #332]	; (8000fcc <HAL_TIM_IC_CaptureCallback+0x264>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	4b52      	ldr	r3, [pc, #328]	; (8000fcc <HAL_TIM_IC_CaptureCallback+0x264>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0202 	bic.w	r2, r2, #2
 8000e8a:	60da      	str	r2, [r3, #12]
			}
		}
	}
	if(htim->Instance== TIM1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a4f      	ldr	r2, [pc, #316]	; (8000fd0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	f040 8088 	bne.w	8000fa8 <HAL_TIM_IC_CaptureCallback+0x240>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7f1b      	ldrb	r3, [r3, #28]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	f040 8083 	bne.w	8000fa8 <HAL_TIM_IC_CaptureCallback+0x240>
		{
			if (Is_First_Captured_Front==0) // if the first value is not captured
 8000ea2:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d11a      	bne.n	8000ee0 <HAL_TIM_IC_CaptureCallback+0x178>
			{
				IC_Front_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000eaa:	2100      	movs	r1, #0
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f001 ff47 	bl	8002d40 <HAL_TIM_ReadCapturedValue>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4a48      	ldr	r2, [pc, #288]	; (8000fd8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000eb6:	6013      	str	r3, [r2, #0]
				Is_First_Captured_Front = 1;  // set the first captured as true
 8000eb8:	4b46      	ldr	r3, [pc, #280]	; (8000fd4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6a1a      	ldr	r2, [r3, #32]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 020a 	bic.w	r2, r2, #10
 8000ecc:	621a      	str	r2, [r3, #32]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6a1a      	ldr	r2, [r3, #32]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f042 0202 	orr.w	r2, r2, #2
 8000edc:	621a      	str	r2, [r3, #32]
			}
		}
	}


}
 8000ede:	e063      	b.n	8000fa8 <HAL_TIM_IC_CaptureCallback+0x240>
			else if (Is_First_Captured_Front==1)   // if the first is already captured
 8000ee0:	4b3c      	ldr	r3, [pc, #240]	; (8000fd4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d15f      	bne.n	8000fa8 <HAL_TIM_IC_CaptureCallback+0x240>
				IC_Front_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000ee8:	2100      	movs	r1, #0
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f001 ff28 	bl	8002d40 <HAL_TIM_ReadCapturedValue>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a3a      	ldr	r2, [pc, #232]	; (8000fdc <HAL_TIM_IC_CaptureCallback+0x274>)
 8000ef4:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Front_Val2 > IC_Front_Val1)
 8000efe:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <HAL_TIM_IC_CaptureCallback+0x274>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d907      	bls.n	8000f1a <HAL_TIM_IC_CaptureCallback+0x1b2>
					Front_Difference = IC_Front_Val2-IC_Front_Val1;
 8000f0a:	4b34      	ldr	r3, [pc, #208]	; (8000fdc <HAL_TIM_IC_CaptureCallback+0x274>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	4a32      	ldr	r2, [pc, #200]	; (8000fe0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	e00f      	b.n	8000f3a <HAL_TIM_IC_CaptureCallback+0x1d2>
				else if (IC_Front_Val1 > IC_Front_Val2)
 8000f1a:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <HAL_TIM_IC_CaptureCallback+0x274>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d909      	bls.n	8000f3a <HAL_TIM_IC_CaptureCallback+0x1d2>
					Front_Difference = (0xffff - IC_Front_Val1) + IC_Front_Val2;
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <HAL_TIM_IC_CaptureCallback+0x274>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f34:	33ff      	adds	r3, #255	; 0xff
 8000f36:	4a2a      	ldr	r2, [pc, #168]	; (8000fe0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000f38:	6013      	str	r3, [r2, #0]
				Front_Distance = Front_Difference * .034/2;
 8000f3a:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fa90 	bl	8000464 <__aeabi_ui2d>
 8000f44:	a31a      	add	r3, pc, #104	; (adr r3, 8000fb0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	f7ff fb05 	bl	8000558 <__aeabi_dmul>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f5e:	f7ff fc25 	bl	80007ac <__aeabi_ddiv>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f7ff fd07 	bl	800097c <__aeabi_d2uiz>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000f74:	701a      	strb	r2, [r3, #0]
				Is_First_Captured_Front = 0; // set it back to false
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6a1a      	ldr	r2, [r3, #32]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 020a 	bic.w	r2, r2, #10
 8000f8a:	621a      	str	r2, [r3, #32]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6a12      	ldr	r2, [r2, #32]
 8000f96:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0202 	bic.w	r2, r2, #2
 8000fa6:	60da      	str	r2, [r3, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	b020c49c 	.word	0xb020c49c
 8000fb4:	3fa16872 	.word	0x3fa16872
 8000fb8:	20000338 	.word	0x20000338
 8000fbc:	2000032c 	.word	0x2000032c
 8000fc0:	20000330 	.word	0x20000330
 8000fc4:	20000334 	.word	0x20000334
 8000fc8:	20000339 	.word	0x20000339
 8000fcc:	200002c8 	.word	0x200002c8
 8000fd0:	40010000 	.word	0x40010000
 8000fd4:	20000328 	.word	0x20000328
 8000fd8:	2000031c 	.word	0x2000031c
 8000fdc:	20000320 	.word	0x20000320
 8000fe0:	20000324 	.word	0x20000324
 8000fe4:	20000329 	.word	0x20000329
 8000fe8:	20000280 	.word	0x20000280

08000fec <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000fec:	b5b0      	push	{r4, r5, r7, lr}
 8000fee:	b096      	sub	sp, #88	; 0x58
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff2:	f000 fbbb 	bl	800176c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff6:	f000 f859 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffa:	f000 f95f 	bl	80012bc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ffe:	f000 f8b5 	bl	800116c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001002:	f000 f909 	bl	8001218 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);  // Start input capture in interrupt mode for TIM1
 8001006:	2100      	movs	r1, #0
 8001008:	4820      	ldr	r0, [pc, #128]	; (800108c <main+0xa0>)
 800100a:	f001 fbf3 	bl	80027f4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800100e:	2100      	movs	r1, #0
 8001010:	481f      	ldr	r0, [pc, #124]	; (8001090 <main+0xa4>)
 8001012:	f001 fbef 	bl	80027f4 <HAL_TIM_IC_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <main+0xa8>)
 8001018:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800101c:	461d      	mov	r5, r3
 800101e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001022:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001026:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800102a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f002 f958 	bl	80032e6 <osThreadCreate>
 8001036:	4603      	mov	r3, r0
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <main+0xac>)
 800103a:	6013      	str	r3, [r2, #0]

  /* definition and creation of UltrasonicFront */
  osThreadDef(UltrasonicFront, UltrasonicFront_Task, osPriorityNormal, 0, 128);
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <main+0xb0>)
 800103e:	f107 0420 	add.w	r4, r7, #32
 8001042:	461d      	mov	r5, r3
 8001044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001048:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800104c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UltrasonicFrontHandle = osThreadCreate(osThread(UltrasonicFront), NULL);
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f002 f945 	bl	80032e6 <osThreadCreate>
 800105c:	4603      	mov	r3, r0
 800105e:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <main+0xb4>)
 8001060:	6013      	str	r3, [r2, #0]

  /* definition and creation of UltrasonicBack */
  osThreadDef(UltrasonicBack, UltrasonicBack_Task, osPriorityAboveNormal, 0, 128);
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <main+0xb8>)
 8001064:	1d3c      	adds	r4, r7, #4
 8001066:	461d      	mov	r5, r3
 8001068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001070:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UltrasonicBackHandle = osThreadCreate(osThread(UltrasonicBack), NULL);
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f002 f934 	bl	80032e6 <osThreadCreate>
 800107e:	4603      	mov	r3, r0
 8001080:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <main+0xbc>)
 8001082:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

 // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
  /* Start scheduler */
  osKernelStart();
 8001084:	f002 f928 	bl	80032d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001088:	e7fe      	b.n	8001088 <main+0x9c>
 800108a:	bf00      	nop
 800108c:	20000280 	.word	0x20000280
 8001090:	200002c8 	.word	0x200002c8
 8001094:	080047b8 	.word	0x080047b8
 8001098:	20000310 	.word	0x20000310
 800109c:	080047e4 	.word	0x080047e4
 80010a0:	20000314 	.word	0x20000314
 80010a4:	08004810 	.word	0x08004810
 80010a8:	20000318 	.word	0x20000318

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	; 0x50
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	2230      	movs	r2, #48	; 0x30
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fb3e 	bl	800473c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	4b23      	ldr	r3, [pc, #140]	; (8001164 <SystemClock_Config+0xb8>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	4a22      	ldr	r2, [pc, #136]	; (8001164 <SystemClock_Config+0xb8>)
 80010da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <SystemClock_Config+0xb8>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <SystemClock_Config+0xbc>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <SystemClock_Config+0xbc>)
 80010fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <SystemClock_Config+0xbc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001110:	2301      	movs	r3, #1
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001114:	2310      	movs	r3, #16
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001118:	2300      	movs	r3, #0
 800111a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fde5 	bl	8001cf0 <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800112c:	f000 f974 	bl	8001418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f847 	bl	80021e0 <HAL_RCC_ClockConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001158:	f000 f95e 	bl	8001418 <Error_Handler>
  }
}
 800115c:	bf00      	nop
 800115e:	3750      	adds	r7, #80	; 0x50
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <MX_TIM1_Init+0xa4>)
 800118a:	4a22      	ldr	r2, [pc, #136]	; (8001214 <MX_TIM1_Init+0xa8>)
 800118c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <MX_TIM1_Init+0xa4>)
 8001190:	220f      	movs	r2, #15
 8001192:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <MX_TIM1_Init+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <MX_TIM1_Init+0xa4>)
 800119c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_TIM1_Init+0xa4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_TIM1_Init+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_TIM1_Init+0xa4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80011b4:	4816      	ldr	r0, [pc, #88]	; (8001210 <MX_TIM1_Init+0xa4>)
 80011b6:	f001 facd 	bl	8002754 <HAL_TIM_IC_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011c0:	f000 f92a 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4619      	mov	r1, r3
 80011d2:	480f      	ldr	r0, [pc, #60]	; (8001210 <MX_TIM1_Init+0xa4>)
 80011d4:	f001 ffe6 	bl	80031a4 <HAL_TIMEx_MasterConfigSynchronization>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011de:	f000 f91b 	bl	8001418 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011e6:	2301      	movs	r3, #1
 80011e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011f2:	463b      	mov	r3, r7
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_TIM1_Init+0xa4>)
 80011fa:	f001 fd05 	bl	8002c08 <HAL_TIM_IC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001204:	f000 f908 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000280 	.word	0x20000280
 8001214:	40010000 	.word	0x40010000

08001218 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001228:	463b      	mov	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <MX_TIM2_Init+0xa0>)
 8001236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_TIM2_Init+0xa0>)
 800123e:	220f      	movs	r2, #15
 8001240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_TIM2_Init+0xa0>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_TIM2_Init+0xa0>)
 800124a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800124e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_TIM2_Init+0xa0>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_TIM2_Init+0xa0>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800125c:	4816      	ldr	r0, [pc, #88]	; (80012b8 <MX_TIM2_Init+0xa0>)
 800125e:	f001 fa79 	bl	8002754 <HAL_TIM_IC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001268:	f000 f8d6 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4619      	mov	r1, r3
 800127a:	480f      	ldr	r0, [pc, #60]	; (80012b8 <MX_TIM2_Init+0xa0>)
 800127c:	f001 ff92 	bl	80031a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001286:	f000 f8c7 	bl	8001418 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800128e:	2301      	movs	r3, #1
 8001290:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM2_Init+0xa0>)
 80012a2:	f001 fcb1 	bl	8002c08 <HAL_TIM_IC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80012ac:	f000 f8b4 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200002c8 	.word	0x200002c8

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <MX_GPIO_Init+0xac>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a23      	ldr	r2, [pc, #140]	; (8001368 <MX_GPIO_Init+0xac>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MX_GPIO_Init+0xac>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_GPIO_Init+0xac>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <MX_GPIO_Init+0xac>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_GPIO_Init+0xac>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800130a:	2200      	movs	r2, #0
 800130c:	f240 21fe 	movw	r1, #766	; 0x2fe
 8001310:	4816      	ldr	r0, [pc, #88]	; (800136c <MX_GPIO_Init+0xb0>)
 8001312:	f000 fcd3 	bl	8001cbc <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800131c:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_GPIO_Init+0xb4>)
 800131e:	f000 fccd 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001322:	f240 23fe 	movw	r3, #766	; 0x2fe
 8001326:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	4619      	mov	r1, r3
 800133a:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_GPIO_Init+0xb0>)
 800133c:	f000 fb3a 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_GPIO_Init+0xb4>)
 800135a:	f000 fb2b 	bl	80019b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800135e:	bf00      	nop
 8001360:	3720      	adds	r7, #32
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400

08001374 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f001 fffe 	bl	800337e <osDelay>
 8001382:	e7fb      	b.n	800137c <StartDefaultTask+0x8>

08001384 <UltrasonicFront_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UltrasonicFront_Task */
void UltrasonicFront_Task(void const * argument)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltrasonicFront_Task */
  /* Infinite loop */
  for(;;)
  {
    HCSR04_Read(TRIG_Front_PORT, TRIG_Front_PIN, &htim1);
 800138c:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <UltrasonicFront_Task+0x3c>)
 800138e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001392:	480c      	ldr	r0, [pc, #48]	; (80013c4 <UltrasonicFront_Task+0x40>)
 8001394:	f7ff fcaa 	bl	8000cec <HCSR04_Read>
    if(Front_Distance < 15)
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <UltrasonicFront_Task+0x44>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b0e      	cmp	r3, #14
 800139e:	d805      	bhi.n	80013ac <UltrasonicFront_Task+0x28>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2102      	movs	r1, #2
 80013a4:	4807      	ldr	r0, [pc, #28]	; (80013c4 <UltrasonicFront_Task+0x40>)
 80013a6:	f000 fc89 	bl	8001cbc <HAL_GPIO_WritePin>
 80013aa:	e004      	b.n	80013b6 <UltrasonicFront_Task+0x32>
    }
    else
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2102      	movs	r1, #2
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <UltrasonicFront_Task+0x40>)
 80013b2:	f000 fc83 	bl	8001cbc <HAL_GPIO_WritePin>
    }
	osDelay(500);
 80013b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ba:	f001 ffe0 	bl	800337e <osDelay>
    HCSR04_Read(TRIG_Front_PORT, TRIG_Front_PIN, &htim1);
 80013be:	e7e5      	b.n	800138c <UltrasonicFront_Task+0x8>
 80013c0:	20000280 	.word	0x20000280
 80013c4:	40020000 	.word	0x40020000
 80013c8:	20000329 	.word	0x20000329

080013cc <UltrasonicBack_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UltrasonicBack_Task */
void UltrasonicBack_Task(void const * argument)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltrasonicBack_Task */
  /* Infinite loop */
  for(;;)
  {
	HCSR04_Read(TRIG_Back_PORT, TRIG_Back_PIN, &htim2);
 80013d4:	4a05      	ldr	r2, [pc, #20]	; (80013ec <UltrasonicBack_Task+0x20>)
 80013d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <UltrasonicBack_Task+0x24>)
 80013dc:	f7ff fc86 	bl	8000cec <HCSR04_Read>
    }
    else
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
    }*/
    osDelay(1000);
 80013e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013e4:	f001 ffcb 	bl	800337e <osDelay>
	HCSR04_Read(TRIG_Back_PORT, TRIG_Back_PIN, &htim2);
 80013e8:	e7f4      	b.n	80013d4 <UltrasonicBack_Task+0x8>
 80013ea:	bf00      	nop
 80013ec:	200002c8 	.word	0x200002c8
 80013f0:	40020400 	.word	0x40020400

080013f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001406:	f000 f9d3 	bl	80017b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40000400 	.word	0x40000400

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001420:	e7fe      	b.n	8001420 <Error_Handler+0x8>
	...

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_MspInit+0x54>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a11      	ldr	r2, [pc, #68]	; (8001478 <HAL_MspInit+0x54>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_MspInit+0x54>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_MspInit+0x54>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_MspInit+0x54>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_MspInit+0x54>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	210f      	movs	r1, #15
 8001466:	f06f 0001 	mvn.w	r0, #1
 800146a:	f000 fa79 	bl	8001960 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a3b      	ldr	r2, [pc, #236]	; (8001588 <HAL_TIM_IC_MspInit+0x10c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d135      	bne.n	800150a <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	4b3a      	ldr	r3, [pc, #232]	; (800158c <HAL_TIM_IC_MspInit+0x110>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	4a39      	ldr	r2, [pc, #228]	; (800158c <HAL_TIM_IC_MspInit+0x110>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6453      	str	r3, [r2, #68]	; 0x44
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <HAL_TIM_IC_MspInit+0x110>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	4b33      	ldr	r3, [pc, #204]	; (800158c <HAL_TIM_IC_MspInit+0x110>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a32      	ldr	r2, [pc, #200]	; (800158c <HAL_TIM_IC_MspInit+0x110>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b30      	ldr	r3, [pc, #192]	; (800158c <HAL_TIM_IC_MspInit+0x110>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	4827      	ldr	r0, [pc, #156]	; (8001590 <HAL_TIM_IC_MspInit+0x114>)
 80014f4:	f000 fa5e 	bl	80019b4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2105      	movs	r1, #5
 80014fc:	201b      	movs	r0, #27
 80014fe:	f000 fa2f 	bl	8001960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001502:	201b      	movs	r0, #27
 8001504:	f000 fa48 	bl	8001998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001508:	e039      	b.n	800157e <HAL_TIM_IC_MspInit+0x102>
  else if(htim_ic->Instance==TIM2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001512:	d134      	bne.n	800157e <HAL_TIM_IC_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_TIM_IC_MspInit+0x110>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <HAL_TIM_IC_MspInit+0x110>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6413      	str	r3, [r2, #64]	; 0x40
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_TIM_IC_MspInit+0x110>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_TIM_IC_MspInit+0x110>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	4a14      	ldr	r2, [pc, #80]	; (800158c <HAL_TIM_IC_MspInit+0x110>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6313      	str	r3, [r2, #48]	; 0x30
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_TIM_IC_MspInit+0x110>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800154c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800155e:	2301      	movs	r3, #1
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4809      	ldr	r0, [pc, #36]	; (8001590 <HAL_TIM_IC_MspInit+0x114>)
 800156a:	f000 fa23 	bl	80019b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2105      	movs	r1, #5
 8001572:	201c      	movs	r0, #28
 8001574:	f000 f9f4 	bl	8001960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001578:	201c      	movs	r0, #28
 800157a:	f000 fa0d 	bl	8001998 <HAL_NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3730      	adds	r7, #48	; 0x30
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40010000 	.word	0x40010000
 800158c:	40023800 	.word	0x40023800
 8001590:	40020000 	.word	0x40020000

08001594 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08e      	sub	sp, #56	; 0x38
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	4b33      	ldr	r3, [pc, #204]	; (8001678 <HAL_InitTick+0xe4>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	4a32      	ldr	r2, [pc, #200]	; (8001678 <HAL_InitTick+0xe4>)
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	6413      	str	r3, [r2, #64]	; 0x40
 80015b4:	4b30      	ldr	r3, [pc, #192]	; (8001678 <HAL_InitTick+0xe4>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015c0:	f107 0210 	add.w	r2, r7, #16
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 ffd4 	bl	8002578 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d103      	bne.n	80015e2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015da:	f000 ffb9 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 80015de:	6378      	str	r0, [r7, #52]	; 0x34
 80015e0:	e004      	b.n	80015ec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015e2:	f000 ffb5 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 80015e6:	4603      	mov	r3, r0
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ee:	4a23      	ldr	r2, [pc, #140]	; (800167c <HAL_InitTick+0xe8>)
 80015f0:	fba2 2303 	umull	r2, r3, r2, r3
 80015f4:	0c9b      	lsrs	r3, r3, #18
 80015f6:	3b01      	subs	r3, #1
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_InitTick+0xec>)
 80015fc:	4a21      	ldr	r2, [pc, #132]	; (8001684 <HAL_InitTick+0xf0>)
 80015fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <HAL_InitTick+0xec>)
 8001602:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001606:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001608:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <HAL_InitTick+0xec>)
 800160a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160c:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_InitTick+0xec>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_InitTick+0xec>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_InitTick+0xec>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001620:	4817      	ldr	r0, [pc, #92]	; (8001680 <HAL_InitTick+0xec>)
 8001622:	f000 ffdb 	bl	80025dc <HAL_TIM_Base_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800162c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001630:	2b00      	cmp	r3, #0
 8001632:	d11b      	bne.n	800166c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001634:	4812      	ldr	r0, [pc, #72]	; (8001680 <HAL_InitTick+0xec>)
 8001636:	f001 f82b 	bl	8002690 <HAL_TIM_Base_Start_IT>
 800163a:	4603      	mov	r3, r0
 800163c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001640:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001644:	2b00      	cmp	r3, #0
 8001646:	d111      	bne.n	800166c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001648:	201d      	movs	r0, #29
 800164a:	f000 f9a5 	bl	8001998 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b0f      	cmp	r3, #15
 8001652:	d808      	bhi.n	8001666 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001654:	2200      	movs	r2, #0
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	201d      	movs	r0, #29
 800165a:	f000 f981 	bl	8001960 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_InitTick+0xf4>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	e002      	b.n	800166c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800166c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001670:	4618      	mov	r0, r3
 8001672:	3738      	adds	r7, #56	; 0x38
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	431bde83 	.word	0x431bde83
 8001680:	2000033c 	.word	0x2000033c
 8001684:	40000400 	.word	0x40000400
 8001688:	20000004 	.word	0x20000004

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001690:	e7fe      	b.n	8001690 <NMI_Handler+0x4>

08001692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <MemManage_Handler+0x4>

0800169e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <UsageFault_Handler+0x4>

080016aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <TIM1_CC_IRQHandler+0x10>)
 80016be:	f001 f9b3 	bl	8002a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000280 	.word	0x20000280

080016cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <TIM2_IRQHandler+0x10>)
 80016d2:	f001 f9a9 	bl	8002a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200002c8 	.word	0x200002c8

080016e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <TIM3_IRQHandler+0x10>)
 80016e6:	f001 f99f 	bl	8002a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000033c 	.word	0x2000033c

080016f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001750 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800171c:	f7ff ffea 	bl	80016f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001722:	490d      	ldr	r1, [pc, #52]	; (8001758 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001724:	4a0d      	ldr	r2, [pc, #52]	; (800175c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001738:	4c0a      	ldr	r4, [pc, #40]	; (8001764 <LoopFillZerobss+0x22>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001746:	f003 f801 	bl	800474c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174a:	f7ff fc4f 	bl	8000fec <main>
  bx  lr    
 800174e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001750:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800175c:	0800485c 	.word	0x0800485c
  ldr r2, =_sbss
 8001760:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001764:	200040dc 	.word	0x200040dc

08001768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC_IRQHandler>
	...

0800176c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <HAL_Init+0x40>)
 8001776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_Init+0x40>)
 8001782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001786:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <HAL_Init+0x40>)
 800178e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001794:	2003      	movs	r0, #3
 8001796:	f000 f8d8 	bl	800194a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179a:	200f      	movs	r0, #15
 800179c:	f7ff fefa 	bl	8001594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a0:	f7ff fe40 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023c00 	.word	0x40023c00

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008
 80017d4:	20000384 	.word	0x20000384

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000384 	.word	0x20000384

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <__NVIC_EnableIRQ+0x38>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ff4c 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001972:	f7ff ff61 	bl	8001838 <__NVIC_GetPriorityGrouping>
 8001976:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	6978      	ldr	r0, [r7, #20]
 800197e:	f7ff ffb1 	bl	80018e4 <NVIC_EncodePriority>
 8001982:	4602      	mov	r2, r0
 8001984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff80 	bl	8001890 <__NVIC_SetPriority>
}
 8001990:	bf00      	nop
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff54 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	e159      	b.n	8001c84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 8148 	bne.w	8001c7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d005      	beq.n	8001a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d130      	bne.n	8001a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0201 	and.w	r2, r3, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d017      	beq.n	8001aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d123      	bne.n	8001af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	08da      	lsrs	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	08da      	lsrs	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3208      	adds	r2, #8
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0203 	and.w	r2, r3, #3
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80a2 	beq.w	8001c7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a56      	ldr	r2, [pc, #344]	; (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b54      	ldr	r3, [pc, #336]	; (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b56:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <HAL_GPIO_Init+0x2f0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d019      	beq.n	8001bb6 <HAL_GPIO_Init+0x202>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a48      	ldr	r2, [pc, #288]	; (8001ca8 <HAL_GPIO_Init+0x2f4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0x1fe>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a47      	ldr	r2, [pc, #284]	; (8001cac <HAL_GPIO_Init+0x2f8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00d      	beq.n	8001bae <HAL_GPIO_Init+0x1fa>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a46      	ldr	r2, [pc, #280]	; (8001cb0 <HAL_GPIO_Init+0x2fc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <HAL_GPIO_Init+0x1f6>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a45      	ldr	r2, [pc, #276]	; (8001cb4 <HAL_GPIO_Init+0x300>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_GPIO_Init+0x1f2>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc8:	4935      	ldr	r1, [pc, #212]	; (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd6:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfa:	4a2f      	ldr	r2, [pc, #188]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c24:	4a24      	ldr	r2, [pc, #144]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4e:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3301      	adds	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	f67f aea2 	bls.w	80019d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40013800 	.word	0x40013800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40013c00 	.word	0x40013c00

08001cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ccc:	787b      	ldrb	r3, [r7, #1]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cd8:	e003      	b.n	8001ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	041a      	lsls	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	619a      	str	r2, [r3, #24]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e267      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d075      	beq.n	8001dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0e:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d00c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1a:	4b85      	ldr	r3, [pc, #532]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d112      	bne.n	8001d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d26:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d32:	d10b      	bne.n	8001d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	4b7e      	ldr	r3, [pc, #504]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d05b      	beq.n	8001df8 <HAL_RCC_OscConfig+0x108>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d157      	bne.n	8001df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e242      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d54:	d106      	bne.n	8001d64 <HAL_RCC_OscConfig+0x74>
 8001d56:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a75      	ldr	r2, [pc, #468]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e01d      	b.n	8001da0 <HAL_RCC_OscConfig+0xb0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x98>
 8001d6e:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a6f      	ldr	r2, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6c      	ldr	r2, [pc, #432]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0xb0>
 8001d88:	4b69      	ldr	r3, [pc, #420]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a68      	ldr	r2, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b66      	ldr	r3, [pc, #408]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a65      	ldr	r2, [pc, #404]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fd16 	bl	80017d8 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff fd12 	bl	80017d8 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e207      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0xc0>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fd02 	bl	80017d8 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fcfe 	bl	80017d8 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e1f3      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	4b51      	ldr	r3, [pc, #324]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xe8>
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d063      	beq.n	8001ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e06:	4b4a      	ldr	r3, [pc, #296]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e12:	4b47      	ldr	r3, [pc, #284]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d11c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1e:	4b44      	ldr	r3, [pc, #272]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d116      	bne.n	8001e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_RCC_OscConfig+0x152>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e1c7      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e42:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4937      	ldr	r1, [pc, #220]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	e03a      	b.n	8001ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d020      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e60:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <HAL_RCC_OscConfig+0x244>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7ff fcb7 	bl	80017d8 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7ff fcb3 	bl	80017d8 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e1a8      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8c:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4925      	ldr	r1, [pc, #148]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
 8001ea0:	e015      	b.n	8001ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_RCC_OscConfig+0x244>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fc96 	bl	80017d8 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fc92 	bl	80017d8 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e187      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d036      	beq.n	8001f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d016      	beq.n	8001f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_RCC_OscConfig+0x248>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee8:	f7ff fc76 	bl	80017d8 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7ff fc72 	bl	80017d8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e167      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x200>
 8001f0e:	e01b      	b.n	8001f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_RCC_OscConfig+0x248>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fc5f 	bl	80017d8 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1c:	e00e      	b.n	8001f3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1e:	f7ff fc5b 	bl	80017d8 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d907      	bls.n	8001f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e150      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	42470000 	.word	0x42470000
 8001f38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	4b88      	ldr	r3, [pc, #544]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ea      	bne.n	8001f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 8097 	beq.w	8002084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5a:	4b81      	ldr	r3, [pc, #516]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10f      	bne.n	8001f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b7d      	ldr	r3, [pc, #500]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a7c      	ldr	r2, [pc, #496]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
 8001f76:	4b7a      	ldr	r3, [pc, #488]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f82:	2301      	movs	r3, #1
 8001f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	4b77      	ldr	r3, [pc, #476]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d118      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f92:	4b74      	ldr	r3, [pc, #464]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a73      	ldr	r2, [pc, #460]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fc1b 	bl	80017d8 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7ff fc17 	bl	80017d8 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e10c      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x2ea>
 8001fcc:	4b64      	ldr	r3, [pc, #400]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd0:	4a63      	ldr	r2, [pc, #396]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd8:	e01c      	b.n	8002014 <HAL_RCC_OscConfig+0x324>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x30c>
 8001fe2:	4b5f      	ldr	r3, [pc, #380]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	4a5e      	ldr	r2, [pc, #376]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6713      	str	r3, [r2, #112]	; 0x70
 8001fee:	4b5c      	ldr	r3, [pc, #368]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	4a5b      	ldr	r2, [pc, #364]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0x324>
 8001ffc:	4b58      	ldr	r3, [pc, #352]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	4a57      	ldr	r2, [pc, #348]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6713      	str	r3, [r2, #112]	; 0x70
 8002008:	4b55      	ldr	r3, [pc, #340]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	4a54      	ldr	r2, [pc, #336]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800200e:	f023 0304 	bic.w	r3, r3, #4
 8002012:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d015      	beq.n	8002048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7ff fbdc 	bl	80017d8 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002022:	e00a      	b.n	800203a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f7ff fbd8 	bl	80017d8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e0cb      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203a:	4b49      	ldr	r3, [pc, #292]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0ee      	beq.n	8002024 <HAL_RCC_OscConfig+0x334>
 8002046:	e014      	b.n	8002072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7ff fbc6 	bl	80017d8 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204e:	e00a      	b.n	8002066 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002050:	f7ff fbc2 	bl	80017d8 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e0b5      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002066:	4b3e      	ldr	r3, [pc, #248]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1ee      	bne.n	8002050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002072:	7dfb      	ldrb	r3, [r7, #23]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002078:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	4a38      	ldr	r2, [pc, #224]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800207e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002082:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80a1 	beq.w	80021d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800208e:	4b34      	ldr	r3, [pc, #208]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b08      	cmp	r3, #8
 8002098:	d05c      	beq.n	8002154 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d141      	bne.n	8002126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_RCC_OscConfig+0x478>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff fb96 	bl	80017d8 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b0:	f7ff fb92 	bl	80017d8 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e087      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	019b      	lsls	r3, r3, #6
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	061b      	lsls	r3, r3, #24
 80020f2:	491b      	ldr	r1, [pc, #108]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_RCC_OscConfig+0x478>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7ff fb6b 	bl	80017d8 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002106:	f7ff fb67 	bl	80017d8 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e05c      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x416>
 8002124:	e054      	b.n	80021d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_RCC_OscConfig+0x478>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fb54 	bl	80017d8 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002134:	f7ff fb50 	bl	80017d8 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e045      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x444>
 8002152:	e03d      	b.n	80021d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e038      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
 8002160:	40023800 	.word	0x40023800
 8002164:	40007000 	.word	0x40007000
 8002168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x4ec>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d028      	beq.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002184:	429a      	cmp	r2, r3
 8002186:	d121      	bne.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d11a      	bne.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800219c:	4013      	ands	r3, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d111      	bne.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	085b      	lsrs	r3, r3, #1
 80021b4:	3b01      	subs	r3, #1
 80021b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0cc      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f4:	4b68      	ldr	r3, [pc, #416]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d90c      	bls.n	800221c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b65      	ldr	r3, [pc, #404]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b63      	ldr	r3, [pc, #396]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0b8      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002234:	4b59      	ldr	r3, [pc, #356]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a58      	ldr	r2, [pc, #352]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800223e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800224c:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a52      	ldr	r2, [pc, #328]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	4b50      	ldr	r3, [pc, #320]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	494d      	ldr	r1, [pc, #308]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d044      	beq.n	8002300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d119      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e07f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d003      	beq.n	800229e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229a:	2b03      	cmp	r3, #3
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ae:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e067      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022be:	4b37      	ldr	r3, [pc, #220]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f023 0203 	bic.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4934      	ldr	r1, [pc, #208]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d0:	f7ff fa82 	bl	80017d8 <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f7ff fa7e 	bl	80017d8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e04f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 020c 	and.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1eb      	bne.n	80022d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002300:	4b25      	ldr	r3, [pc, #148]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d20c      	bcs.n	8002328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e032      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4916      	ldr	r1, [pc, #88]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	490e      	ldr	r1, [pc, #56]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002366:	f000 f821 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 800236a:	4602      	mov	r2, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	490a      	ldr	r1, [pc, #40]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	5ccb      	ldrb	r3, [r1, r3]
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff f904 	bl	8001594 <HAL_InitTick>

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023c00 	.word	0x40023c00
 800239c:	40023800 	.word	0x40023800
 80023a0:	08004834 	.word	0x08004834
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000004 	.word	0x20000004

080023ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b0:	b090      	sub	sp, #64	; 0x40
 80023b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	637b      	str	r3, [r7, #52]	; 0x34
 80023b8:	2300      	movs	r3, #0
 80023ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023bc:	2300      	movs	r3, #0
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCC_GetSysClockFreq+0x180>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d00d      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x40>
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	f200 80a1 	bhi.w	8002518 <HAL_RCC_GetSysClockFreq+0x16c>
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x34>
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d003      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80023de:	e09b      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCC_GetSysClockFreq+0x184>)
 80023e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80023e4:	e09b      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023e6:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_RCC_GetSysClockFreq+0x188>)
 80023e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023ea:	e098      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023ec:	4b4f      	ldr	r3, [pc, #316]	; (800252c <HAL_RCC_GetSysClockFreq+0x180>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023f6:	4b4d      	ldr	r3, [pc, #308]	; (800252c <HAL_RCC_GetSysClockFreq+0x180>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d028      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002402:	4b4a      	ldr	r3, [pc, #296]	; (800252c <HAL_RCC_GetSysClockFreq+0x180>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	099b      	lsrs	r3, r3, #6
 8002408:	2200      	movs	r2, #0
 800240a:	623b      	str	r3, [r7, #32]
 800240c:	627a      	str	r2, [r7, #36]	; 0x24
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002414:	2100      	movs	r1, #0
 8002416:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_GetSysClockFreq+0x188>)
 8002418:	fb03 f201 	mul.w	r2, r3, r1
 800241c:	2300      	movs	r3, #0
 800241e:	fb00 f303 	mul.w	r3, r0, r3
 8002422:	4413      	add	r3, r2
 8002424:	4a43      	ldr	r2, [pc, #268]	; (8002534 <HAL_RCC_GetSysClockFreq+0x188>)
 8002426:	fba0 1202 	umull	r1, r2, r0, r2
 800242a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800242c:	460a      	mov	r2, r1
 800242e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002432:	4413      	add	r3, r2
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002438:	2200      	movs	r2, #0
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	61fa      	str	r2, [r7, #28]
 800243e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002442:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002446:	f7fe fab9 	bl	80009bc <__aeabi_uldivmod>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4613      	mov	r3, r2
 8002450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002452:	e053      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002454:	4b35      	ldr	r3, [pc, #212]	; (800252c <HAL_RCC_GetSysClockFreq+0x180>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	2200      	movs	r2, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	617a      	str	r2, [r7, #20]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002466:	f04f 0b00 	mov.w	fp, #0
 800246a:	4652      	mov	r2, sl
 800246c:	465b      	mov	r3, fp
 800246e:	f04f 0000 	mov.w	r0, #0
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	0159      	lsls	r1, r3, #5
 8002478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800247c:	0150      	lsls	r0, r2, #5
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	ebb2 080a 	subs.w	r8, r2, sl
 8002486:	eb63 090b 	sbc.w	r9, r3, fp
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002496:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800249a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800249e:	ebb2 0408 	subs.w	r4, r2, r8
 80024a2:	eb63 0509 	sbc.w	r5, r3, r9
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	00eb      	lsls	r3, r5, #3
 80024b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024b4:	00e2      	lsls	r2, r4, #3
 80024b6:	4614      	mov	r4, r2
 80024b8:	461d      	mov	r5, r3
 80024ba:	eb14 030a 	adds.w	r3, r4, sl
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	eb45 030b 	adc.w	r3, r5, fp
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024d2:	4629      	mov	r1, r5
 80024d4:	028b      	lsls	r3, r1, #10
 80024d6:	4621      	mov	r1, r4
 80024d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024dc:	4621      	mov	r1, r4
 80024de:	028a      	lsls	r2, r1, #10
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e6:	2200      	movs	r2, #0
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	60fa      	str	r2, [r7, #12]
 80024ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024f0:	f7fe fa64 	bl	80009bc <__aeabi_uldivmod>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4613      	mov	r3, r2
 80024fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_GetSysClockFreq+0x180>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	3301      	adds	r3, #1
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800250c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002516:	e002      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_RCC_GetSysClockFreq+0x184>)
 800251a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800251c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002520:	4618      	mov	r0, r3
 8002522:	3740      	adds	r7, #64	; 0x40
 8002524:	46bd      	mov	sp, r7
 8002526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	00f42400 	.word	0x00f42400
 8002534:	017d7840 	.word	0x017d7840

08002538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_RCC_GetHCLKFreq+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000000 	.word	0x20000000

08002550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002554:	f7ff fff0 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0a9b      	lsrs	r3, r3, #10
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4903      	ldr	r1, [pc, #12]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	08004844 	.word	0x08004844

08002578 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	220f      	movs	r2, #15
 8002586:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <HAL_RCC_GetClockConfig+0x5c>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0203 	and.w	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <HAL_RCC_GetClockConfig+0x5c>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <HAL_RCC_GetClockConfig+0x5c>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCC_GetClockConfig+0x5c>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	08db      	lsrs	r3, r3, #3
 80025b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <HAL_RCC_GetClockConfig+0x60>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0207 	and.w	r2, r3, #7
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	601a      	str	r2, [r3, #0]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40023c00 	.word	0x40023c00

080025dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e041      	b.n	8002672 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f839 	bl	800267a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3304      	adds	r3, #4
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f000 fbf2 	bl	8002e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d001      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e044      	b.n	8002732 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1e      	ldr	r2, [pc, #120]	; (8002740 <HAL_TIM_Base_Start_IT+0xb0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d018      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x6c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d2:	d013      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x6c>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_TIM_Base_Start_IT+0xb4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00e      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x6c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a19      	ldr	r2, [pc, #100]	; (8002748 <HAL_TIM_Base_Start_IT+0xb8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x6c>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a17      	ldr	r2, [pc, #92]	; (800274c <HAL_TIM_Base_Start_IT+0xbc>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d004      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x6c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a16      	ldr	r2, [pc, #88]	; (8002750 <HAL_TIM_Base_Start_IT+0xc0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d111      	bne.n	8002720 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b06      	cmp	r3, #6
 800270c:	d010      	beq.n	8002730 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271e:	e007      	b.n	8002730 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40010000 	.word	0x40010000
 8002744:	40000400 	.word	0x40000400
 8002748:	40000800 	.word	0x40000800
 800274c:	40000c00 	.word	0x40000c00
 8002750:	40014000 	.word	0x40014000

08002754 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e041      	b.n	80027ea <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe fe7e 	bl	800147c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f000 fb36 	bl	8002e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d104      	bne.n	8002812 <HAL_TIM_IC_Start_IT+0x1e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800280e:	b2db      	uxtb	r3, r3
 8002810:	e013      	b.n	800283a <HAL_TIM_IC_Start_IT+0x46>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b04      	cmp	r3, #4
 8002816:	d104      	bne.n	8002822 <HAL_TIM_IC_Start_IT+0x2e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800281e:	b2db      	uxtb	r3, r3
 8002820:	e00b      	b.n	800283a <HAL_TIM_IC_Start_IT+0x46>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d104      	bne.n	8002832 <HAL_TIM_IC_Start_IT+0x3e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800282e:	b2db      	uxtb	r3, r3
 8002830:	e003      	b.n	800283a <HAL_TIM_IC_Start_IT+0x46>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d104      	bne.n	800284c <HAL_TIM_IC_Start_IT+0x58>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002848:	b2db      	uxtb	r3, r3
 800284a:	e013      	b.n	8002874 <HAL_TIM_IC_Start_IT+0x80>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b04      	cmp	r3, #4
 8002850:	d104      	bne.n	800285c <HAL_TIM_IC_Start_IT+0x68>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e00b      	b.n	8002874 <HAL_TIM_IC_Start_IT+0x80>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b08      	cmp	r3, #8
 8002860:	d104      	bne.n	800286c <HAL_TIM_IC_Start_IT+0x78>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e003      	b.n	8002874 <HAL_TIM_IC_Start_IT+0x80>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002872:	b2db      	uxtb	r3, r3
 8002874:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002876:	7bbb      	ldrb	r3, [r7, #14]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d102      	bne.n	8002882 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800287c:	7b7b      	ldrb	r3, [r7, #13]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d001      	beq.n	8002886 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0c2      	b.n	8002a0c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d104      	bne.n	8002896 <HAL_TIM_IC_Start_IT+0xa2>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002894:	e013      	b.n	80028be <HAL_TIM_IC_Start_IT+0xca>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b04      	cmp	r3, #4
 800289a:	d104      	bne.n	80028a6 <HAL_TIM_IC_Start_IT+0xb2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a4:	e00b      	b.n	80028be <HAL_TIM_IC_Start_IT+0xca>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d104      	bne.n	80028b6 <HAL_TIM_IC_Start_IT+0xc2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b4:	e003      	b.n	80028be <HAL_TIM_IC_Start_IT+0xca>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d104      	bne.n	80028ce <HAL_TIM_IC_Start_IT+0xda>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028cc:	e013      	b.n	80028f6 <HAL_TIM_IC_Start_IT+0x102>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d104      	bne.n	80028de <HAL_TIM_IC_Start_IT+0xea>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028dc:	e00b      	b.n	80028f6 <HAL_TIM_IC_Start_IT+0x102>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d104      	bne.n	80028ee <HAL_TIM_IC_Start_IT+0xfa>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ec:	e003      	b.n	80028f6 <HAL_TIM_IC_Start_IT+0x102>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2202      	movs	r2, #2
 80028f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	d841      	bhi.n	8002980 <HAL_TIM_IC_Start_IT+0x18c>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <HAL_TIM_IC_Start_IT+0x110>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002939 	.word	0x08002939
 8002908:	08002981 	.word	0x08002981
 800290c:	08002981 	.word	0x08002981
 8002910:	08002981 	.word	0x08002981
 8002914:	0800294b 	.word	0x0800294b
 8002918:	08002981 	.word	0x08002981
 800291c:	08002981 	.word	0x08002981
 8002920:	08002981 	.word	0x08002981
 8002924:	0800295d 	.word	0x0800295d
 8002928:	08002981 	.word	0x08002981
 800292c:	08002981 	.word	0x08002981
 8002930:	08002981 	.word	0x08002981
 8002934:	0800296f 	.word	0x0800296f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0202 	orr.w	r2, r2, #2
 8002946:	60da      	str	r2, [r3, #12]
      break;
 8002948:	e01d      	b.n	8002986 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0204 	orr.w	r2, r2, #4
 8002958:	60da      	str	r2, [r3, #12]
      break;
 800295a:	e014      	b.n	8002986 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0208 	orr.w	r2, r2, #8
 800296a:	60da      	str	r2, [r3, #12]
      break;
 800296c:	e00b      	b.n	8002986 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0210 	orr.w	r2, r2, #16
 800297c:	60da      	str	r2, [r3, #12]
      break;
 800297e:	e002      	b.n	8002986 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	bf00      	nop
  }

  if (status == HAL_OK)
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d13e      	bne.n	8002a0a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2201      	movs	r2, #1
 8002992:	6839      	ldr	r1, [r7, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fbdf 	bl	8003158 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_TIM_IC_Start_IT+0x220>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d018      	beq.n	80029d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ac:	d013      	beq.n	80029d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a19      	ldr	r2, [pc, #100]	; (8002a18 <HAL_TIM_IC_Start_IT+0x224>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00e      	beq.n	80029d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a17      	ldr	r2, [pc, #92]	; (8002a1c <HAL_TIM_IC_Start_IT+0x228>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d009      	beq.n	80029d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a16      	ldr	r2, [pc, #88]	; (8002a20 <HAL_TIM_IC_Start_IT+0x22c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d004      	beq.n	80029d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <HAL_TIM_IC_Start_IT+0x230>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d111      	bne.n	80029fa <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b06      	cmp	r3, #6
 80029e6:	d010      	beq.n	8002a0a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f8:	e007      	b.n	8002a0a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40010000 	.word	0x40010000
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800
 8002a20:	40000c00 	.word	0x40000c00
 8002a24:	40014000 	.word	0x40014000

08002a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d020      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01b      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0202 	mvn.w	r2, #2
 8002a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe f978 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
 8002a78:	e005      	b.n	8002a86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f9a4 	bl	8002dc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f9ab 	bl	8002ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d020      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01b      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0204 	mvn.w	r2, #4
 8002aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe f952 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
 8002ac4:	e005      	b.n	8002ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f97e 	bl	8002dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f985 	bl	8002ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d020      	beq.n	8002b24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01b      	beq.n	8002b24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0208 	mvn.w	r2, #8
 8002af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2204      	movs	r2, #4
 8002afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe f92c 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
 8002b10:	e005      	b.n	8002b1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f958 	bl	8002dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f95f 	bl	8002ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d020      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01b      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0210 	mvn.w	r2, #16
 8002b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2208      	movs	r2, #8
 8002b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe f906 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
 8002b5c:	e005      	b.n	8002b6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f932 	bl	8002dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f939 	bl	8002ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00c      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0201 	mvn.w	r2, #1
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fe fc30 	bl	80013f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00c      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fb6e 	bl	8003294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f90a 	bl	8002df0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00c      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0220 	mvn.w	r2, #32
 8002bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fb40 	bl	8003280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e088      	b.n	8002d38 <HAL_TIM_IC_ConfigChannel+0x130>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d11b      	bne.n	8002c6c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002c44:	f000 f96a 	bl	8002f1c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 020c 	bic.w	r2, r2, #12
 8002c56:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6999      	ldr	r1, [r3, #24]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	619a      	str	r2, [r3, #24]
 8002c6a:	e060      	b.n	8002d2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d11c      	bne.n	8002cac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002c82:	f000 f9b3 	bl	8002fec <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699a      	ldr	r2, [r3, #24]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c94:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6999      	ldr	r1, [r3, #24]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	021a      	lsls	r2, r3, #8
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	619a      	str	r2, [r3, #24]
 8002caa:	e040      	b.n	8002d2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d11b      	bne.n	8002cea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002cc2:	f000 f9d0 	bl	8003066 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 020c 	bic.w	r2, r2, #12
 8002cd4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69d9      	ldr	r1, [r3, #28]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	61da      	str	r2, [r3, #28]
 8002ce8:	e021      	b.n	8002d2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b0c      	cmp	r3, #12
 8002cee:	d11c      	bne.n	8002d2a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002d00:	f000 f9ed 	bl	80030de <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69da      	ldr	r2, [r3, #28]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d12:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69d9      	ldr	r1, [r3, #28]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	021a      	lsls	r2, r3, #8
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	61da      	str	r2, [r3, #28]
 8002d28:	e001      	b.n	8002d2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d831      	bhi.n	8002db8 <HAL_TIM_ReadCapturedValue+0x78>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d91 	.word	0x08002d91
 8002d60:	08002db9 	.word	0x08002db9
 8002d64:	08002db9 	.word	0x08002db9
 8002d68:	08002db9 	.word	0x08002db9
 8002d6c:	08002d9b 	.word	0x08002d9b
 8002d70:	08002db9 	.word	0x08002db9
 8002d74:	08002db9 	.word	0x08002db9
 8002d78:	08002db9 	.word	0x08002db9
 8002d7c:	08002da5 	.word	0x08002da5
 8002d80:	08002db9 	.word	0x08002db9
 8002d84:	08002db9 	.word	0x08002db9
 8002d88:	08002db9 	.word	0x08002db9
 8002d8c:	08002daf 	.word	0x08002daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d96:	60fb      	str	r3, [r7, #12]

      break;
 8002d98:	e00f      	b.n	8002dba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	60fb      	str	r3, [r7, #12]

      break;
 8002da2:	e00a      	b.n	8002dba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	60fb      	str	r3, [r7, #12]

      break;
 8002dac:	e005      	b.n	8002dba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	60fb      	str	r3, [r7, #12]

      break;
 8002db6:	e000      	b.n	8002dba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002db8:	bf00      	nop
  }

  return tmpreg;
 8002dba:	68fb      	ldr	r3, [r7, #12]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a3a      	ldr	r2, [pc, #232]	; (8002f00 <TIM_Base_SetConfig+0xfc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00f      	beq.n	8002e3c <TIM_Base_SetConfig+0x38>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e22:	d00b      	beq.n	8002e3c <TIM_Base_SetConfig+0x38>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a37      	ldr	r2, [pc, #220]	; (8002f04 <TIM_Base_SetConfig+0x100>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d007      	beq.n	8002e3c <TIM_Base_SetConfig+0x38>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a36      	ldr	r2, [pc, #216]	; (8002f08 <TIM_Base_SetConfig+0x104>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <TIM_Base_SetConfig+0x38>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a35      	ldr	r2, [pc, #212]	; (8002f0c <TIM_Base_SetConfig+0x108>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d108      	bne.n	8002e4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a2b      	ldr	r2, [pc, #172]	; (8002f00 <TIM_Base_SetConfig+0xfc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01b      	beq.n	8002e8e <TIM_Base_SetConfig+0x8a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5c:	d017      	beq.n	8002e8e <TIM_Base_SetConfig+0x8a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a28      	ldr	r2, [pc, #160]	; (8002f04 <TIM_Base_SetConfig+0x100>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <TIM_Base_SetConfig+0x8a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a27      	ldr	r2, [pc, #156]	; (8002f08 <TIM_Base_SetConfig+0x104>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00f      	beq.n	8002e8e <TIM_Base_SetConfig+0x8a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <TIM_Base_SetConfig+0x108>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00b      	beq.n	8002e8e <TIM_Base_SetConfig+0x8a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a25      	ldr	r2, [pc, #148]	; (8002f10 <TIM_Base_SetConfig+0x10c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d007      	beq.n	8002e8e <TIM_Base_SetConfig+0x8a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a24      	ldr	r2, [pc, #144]	; (8002f14 <TIM_Base_SetConfig+0x110>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d003      	beq.n	8002e8e <TIM_Base_SetConfig+0x8a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a23      	ldr	r2, [pc, #140]	; (8002f18 <TIM_Base_SetConfig+0x114>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d108      	bne.n	8002ea0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <TIM_Base_SetConfig+0xfc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d103      	bne.n	8002ed4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d105      	bne.n	8002ef2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f023 0201 	bic.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	611a      	str	r2, [r3, #16]
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40010000 	.word	0x40010000
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40000800 	.word	0x40000800
 8002f0c:	40000c00 	.word	0x40000c00
 8002f10:	40014000 	.word	0x40014000
 8002f14:	40014400 	.word	0x40014400
 8002f18:	40014800 	.word	0x40014800

08002f1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f023 0201 	bic.w	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <TIM_TI1_SetConfig+0xbc>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <TIM_TI1_SetConfig+0x56>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f50:	d00f      	beq.n	8002f72 <TIM_TI1_SetConfig+0x56>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4a21      	ldr	r2, [pc, #132]	; (8002fdc <TIM_TI1_SetConfig+0xc0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00b      	beq.n	8002f72 <TIM_TI1_SetConfig+0x56>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a20      	ldr	r2, [pc, #128]	; (8002fe0 <TIM_TI1_SetConfig+0xc4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d007      	beq.n	8002f72 <TIM_TI1_SetConfig+0x56>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <TIM_TI1_SetConfig+0xc8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d003      	beq.n	8002f72 <TIM_TI1_SetConfig+0x56>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <TIM_TI1_SetConfig+0xcc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <TIM_TI1_SetConfig+0x5a>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <TIM_TI1_SetConfig+0x5c>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f023 0303 	bic.w	r3, r3, #3
 8002f82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	e003      	b.n	8002f96 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f023 030a 	bic.w	r3, r3, #10
 8002fb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f003 030a 	and.w	r3, r3, #10
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40000c00 	.word	0x40000c00
 8002fe8:	40014000 	.word	0x40014000

08002fec <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f023 0210 	bic.w	r2, r3, #16
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003018:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800302a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	031b      	lsls	r3, r3, #12
 8003030:	b29b      	uxth	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800303e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	621a      	str	r2, [r3, #32]
}
 800305a:	bf00      	nop
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003066:	b480      	push	{r7}
 8003068:	b087      	sub	sp, #28
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f023 0303 	bic.w	r3, r3, #3
 8003092:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80030b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	621a      	str	r2, [r3, #32]
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030de:	b480      	push	{r7}
 80030e0:	b087      	sub	sp, #28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800311c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	031b      	lsls	r3, r3, #12
 8003122:	b29b      	uxth	r3, r3
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003130:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	031b      	lsls	r3, r3, #12
 8003136:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	621a      	str	r2, [r3, #32]
}
 800314c:	bf00      	nop
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	2201      	movs	r2, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1a      	ldr	r2, [r3, #32]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	43db      	mvns	r3, r3
 800317a:	401a      	ands	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a1a      	ldr	r2, [r3, #32]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	fa01 f303 	lsl.w	r3, r1, r3
 8003190:	431a      	orrs	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	621a      	str	r2, [r3, #32]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e050      	b.n	800325e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1c      	ldr	r2, [pc, #112]	; (800326c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d018      	beq.n	8003232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003208:	d013      	beq.n	8003232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a18      	ldr	r2, [pc, #96]	; (8003270 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00e      	beq.n	8003232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a16      	ldr	r2, [pc, #88]	; (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d009      	beq.n	8003232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a15      	ldr	r2, [pc, #84]	; (8003278 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d004      	beq.n	8003232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a13      	ldr	r2, [pc, #76]	; (800327c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d10c      	bne.n	800324c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	4313      	orrs	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40010000 	.word	0x40010000
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800
 8003278:	40000c00 	.word	0x40000c00
 800327c:	40014000 	.word	0x40014000

08003280 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80032b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ba:	2b84      	cmp	r3, #132	; 0x84
 80032bc:	d005      	beq.n	80032ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80032be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4413      	add	r3, r2
 80032c6:	3303      	adds	r3, #3
 80032c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80032ca:	68fb      	ldr	r3, [r7, #12]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80032dc:	f000 fade 	bl	800389c <vTaskStartScheduler>
  
  return osOK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80032e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032e8:	b089      	sub	sp, #36	; 0x24
 80032ea:	af04      	add	r7, sp, #16
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <osThreadCreate+0x54>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01c      	beq.n	800333a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685c      	ldr	r4, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691e      	ldr	r6, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff ffc8 	bl	80032a8 <makeFreeRtosPriority>
 8003318:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003322:	9202      	str	r2, [sp, #8]
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	9100      	str	r1, [sp, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	4632      	mov	r2, r6
 800332c:	4629      	mov	r1, r5
 800332e:	4620      	mov	r0, r4
 8003330:	f000 f8ed 	bl	800350e <xTaskCreateStatic>
 8003334:	4603      	mov	r3, r0
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e01c      	b.n	8003374 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685c      	ldr	r4, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003346:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff ffaa 	bl	80032a8 <makeFreeRtosPriority>
 8003354:	4602      	mov	r2, r0
 8003356:	f107 030c 	add.w	r3, r7, #12
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	9200      	str	r2, [sp, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	4632      	mov	r2, r6
 8003362:	4629      	mov	r1, r5
 8003364:	4620      	mov	r0, r4
 8003366:	f000 f92f 	bl	80035c8 <xTaskCreate>
 800336a:	4603      	mov	r3, r0
 800336c:	2b01      	cmp	r3, #1
 800336e:	d001      	beq.n	8003374 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003374:	68fb      	ldr	r3, [r7, #12]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800337e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <osDelay+0x16>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	e000      	b.n	8003396 <osDelay+0x18>
 8003394:	2301      	movs	r3, #1
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fa4c 	bl	8003834 <vTaskDelay>
  
  return osOK;
 800339c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f103 0208 	add.w	r2, r3, #8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f04f 32ff 	mov.w	r2, #4294967295
 80033be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f103 0208 	add.w	r2, r3, #8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f103 0208 	add.w	r2, r3, #8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	601a      	str	r2, [r3, #0]
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d103      	bne.n	8003468 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	e00c      	b.n	8003482 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3308      	adds	r3, #8
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	e002      	b.n	8003476 <vListInsert+0x2e>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	429a      	cmp	r2, r3
 8003480:	d2f6      	bcs.n	8003470 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	601a      	str	r2, [r3, #0]
}
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6892      	ldr	r2, [r2, #8]
 80034d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6852      	ldr	r2, [r2, #4]
 80034da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d103      	bne.n	80034ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	1e5a      	subs	r2, r3, #1
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800350e:	b580      	push	{r7, lr}
 8003510:	b08e      	sub	sp, #56	; 0x38
 8003512:	af04      	add	r7, sp, #16
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800351c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10a      	bne.n	8003538 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003534:	bf00      	nop
 8003536:	e7fe      	b.n	8003536 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10a      	bne.n	8003554 <xTaskCreateStatic+0x46>
	__asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	61fb      	str	r3, [r7, #28]
}
 8003550:	bf00      	nop
 8003552:	e7fe      	b.n	8003552 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003554:	2354      	movs	r3, #84	; 0x54
 8003556:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b54      	cmp	r3, #84	; 0x54
 800355c:	d00a      	beq.n	8003574 <xTaskCreateStatic+0x66>
	__asm volatile
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	61bb      	str	r3, [r7, #24]
}
 8003570:	bf00      	nop
 8003572:	e7fe      	b.n	8003572 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003574:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01e      	beq.n	80035ba <xTaskCreateStatic+0xac>
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01b      	beq.n	80035ba <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800358a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	2202      	movs	r2, #2
 8003590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003594:	2300      	movs	r3, #0
 8003596:	9303      	str	r3, [sp, #12]
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	9302      	str	r3, [sp, #8]
 800359c:	f107 0314 	add.w	r3, r7, #20
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f850 	bl	8003652 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035b4:	f000 f8d4 	bl	8003760 <prvAddNewTaskToReadyList>
 80035b8:	e001      	b.n	80035be <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035be:	697b      	ldr	r3, [r7, #20]
	}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3728      	adds	r7, #40	; 0x28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08c      	sub	sp, #48	; 0x30
 80035cc:	af04      	add	r7, sp, #16
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fec3 	bl	8004368 <pvPortMalloc>
 80035e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00e      	beq.n	8003608 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035ea:	2054      	movs	r0, #84	; 0x54
 80035ec:	f000 febc 	bl	8004368 <pvPortMalloc>
 80035f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	631a      	str	r2, [r3, #48]	; 0x30
 80035fe:	e005      	b.n	800360c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003600:	6978      	ldr	r0, [r7, #20]
 8003602:	f000 ff7d 	bl	8004500 <vPortFree>
 8003606:	e001      	b.n	800360c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d017      	beq.n	8003642 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	2300      	movs	r3, #0
 800361e:	9303      	str	r3, [sp, #12]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	9302      	str	r3, [sp, #8]
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f80e 	bl	8003652 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003636:	69f8      	ldr	r0, [r7, #28]
 8003638:	f000 f892 	bl	8003760 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800363c:	2301      	movs	r3, #1
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	e002      	b.n	8003648 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
 8003646:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003648:	69bb      	ldr	r3, [r7, #24]
	}
 800364a:	4618      	mov	r0, r3
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b088      	sub	sp, #32
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800366a:	3b01      	subs	r3, #1
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f023 0307 	bic.w	r3, r3, #7
 8003678:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <prvInitialiseNewTask+0x48>
	__asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	617b      	str	r3, [r7, #20]
}
 8003696:	bf00      	nop
 8003698:	e7fe      	b.n	8003698 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01f      	beq.n	80036e0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	e012      	b.n	80036cc <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	4413      	add	r3, r2
 80036ac:	7819      	ldrb	r1, [r3, #0]
 80036ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	3334      	adds	r3, #52	; 0x34
 80036b6:	460a      	mov	r2, r1
 80036b8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d006      	beq.n	80036d4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3301      	adds	r3, #1
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b0f      	cmp	r3, #15
 80036d0:	d9e9      	bls.n	80036a6 <prvInitialiseNewTask+0x54>
 80036d2:	e000      	b.n	80036d6 <prvInitialiseNewTask+0x84>
			{
				break;
 80036d4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036de:	e003      	b.n	80036e8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d901      	bls.n	80036f2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036ee:	2306      	movs	r3, #6
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	2200      	movs	r2, #0
 8003702:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	3304      	adds	r3, #4
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fe6c 	bl	80033e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	3318      	adds	r3, #24
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fe67 	bl	80033e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	f1c3 0207 	rsb	r2, r3, #7
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	2200      	movs	r2, #0
 8003732:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	68f9      	ldr	r1, [r7, #12]
 8003740:	69b8      	ldr	r0, [r7, #24]
 8003742:	f000 fc05 	bl	8003f50 <pxPortInitialiseStack>
 8003746:	4602      	mov	r2, r0
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003756:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003758:	bf00      	nop
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003768:	f000 fd1c 	bl	80041a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800376c:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <prvAddNewTaskToReadyList+0xb8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	4a29      	ldr	r2, [pc, #164]	; (8003818 <prvAddNewTaskToReadyList+0xb8>)
 8003774:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003776:	4b29      	ldr	r3, [pc, #164]	; (800381c <prvAddNewTaskToReadyList+0xbc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800377e:	4a27      	ldr	r2, [pc, #156]	; (800381c <prvAddNewTaskToReadyList+0xbc>)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003784:	4b24      	ldr	r3, [pc, #144]	; (8003818 <prvAddNewTaskToReadyList+0xb8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d110      	bne.n	80037ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800378c:	f000 fabc 	bl	8003d08 <prvInitialiseTaskLists>
 8003790:	e00d      	b.n	80037ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003792:	4b23      	ldr	r3, [pc, #140]	; (8003820 <prvAddNewTaskToReadyList+0xc0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800379a:	4b20      	ldr	r3, [pc, #128]	; (800381c <prvAddNewTaskToReadyList+0xbc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d802      	bhi.n	80037ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037a8:	4a1c      	ldr	r2, [pc, #112]	; (800381c <prvAddNewTaskToReadyList+0xbc>)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037ae:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <prvAddNewTaskToReadyList+0xc4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <prvAddNewTaskToReadyList+0xc4>)
 80037b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	2201      	movs	r2, #1
 80037be:	409a      	lsls	r2, r3
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <prvAddNewTaskToReadyList+0xc8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	4a18      	ldr	r2, [pc, #96]	; (8003828 <prvAddNewTaskToReadyList+0xc8>)
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4a15      	ldr	r2, [pc, #84]	; (800382c <prvAddNewTaskToReadyList+0xcc>)
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	4619      	mov	r1, r3
 80037e0:	4610      	mov	r0, r2
 80037e2:	f7ff fe0d 	bl	8003400 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037e6:	f000 fd0d 	bl	8004204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <prvAddNewTaskToReadyList+0xc0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00e      	beq.n	8003810 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037f2:	4b0a      	ldr	r3, [pc, #40]	; (800381c <prvAddNewTaskToReadyList+0xbc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d207      	bcs.n	8003810 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <prvAddNewTaskToReadyList+0xd0>)
 8003802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20000488 	.word	0x20000488
 800381c:	20000388 	.word	0x20000388
 8003820:	20000494 	.word	0x20000494
 8003824:	200004a4 	.word	0x200004a4
 8003828:	20000490 	.word	0x20000490
 800382c:	2000038c 	.word	0x2000038c
 8003830:	e000ed04 	.word	0xe000ed04

08003834 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800383c:	2300      	movs	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d017      	beq.n	8003876 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003846:	4b13      	ldr	r3, [pc, #76]	; (8003894 <vTaskDelay+0x60>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <vTaskDelay+0x30>
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	60bb      	str	r3, [r7, #8]
}
 8003860:	bf00      	nop
 8003862:	e7fe      	b.n	8003862 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003864:	f000 f87a 	bl	800395c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003868:	2100      	movs	r1, #0
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fb0a 	bl	8003e84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003870:	f000 f882 	bl	8003978 <xTaskResumeAll>
 8003874:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <vTaskDelay+0x64>)
 800387e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	200004b0 	.word	0x200004b0
 8003898:	e000ed04 	.word	0xe000ed04

0800389c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038aa:	463a      	mov	r2, r7
 80038ac:	1d39      	adds	r1, r7, #4
 80038ae:	f107 0308 	add.w	r3, r7, #8
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd fa3c 	bl	8000d30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	9202      	str	r2, [sp, #8]
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	2300      	movs	r3, #0
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	2300      	movs	r3, #0
 80038c8:	460a      	mov	r2, r1
 80038ca:	491e      	ldr	r1, [pc, #120]	; (8003944 <vTaskStartScheduler+0xa8>)
 80038cc:	481e      	ldr	r0, [pc, #120]	; (8003948 <vTaskStartScheduler+0xac>)
 80038ce:	f7ff fe1e 	bl	800350e <xTaskCreateStatic>
 80038d2:	4603      	mov	r3, r0
 80038d4:	4a1d      	ldr	r2, [pc, #116]	; (800394c <vTaskStartScheduler+0xb0>)
 80038d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038d8:	4b1c      	ldr	r3, [pc, #112]	; (800394c <vTaskStartScheduler+0xb0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038e0:	2301      	movs	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e001      	b.n	80038ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d116      	bne.n	800391e <vTaskStartScheduler+0x82>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	613b      	str	r3, [r7, #16]
}
 8003902:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003904:	4b12      	ldr	r3, [pc, #72]	; (8003950 <vTaskStartScheduler+0xb4>)
 8003906:	f04f 32ff 	mov.w	r2, #4294967295
 800390a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <vTaskStartScheduler+0xb8>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <vTaskStartScheduler+0xbc>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003918:	f000 fba2 	bl	8004060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800391c:	e00e      	b.n	800393c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d10a      	bne.n	800393c <vTaskStartScheduler+0xa0>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	60fb      	str	r3, [r7, #12]
}
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <vTaskStartScheduler+0x9e>
}
 800393c:	bf00      	nop
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	0800482c 	.word	0x0800482c
 8003948:	08003cd9 	.word	0x08003cd9
 800394c:	200004ac 	.word	0x200004ac
 8003950:	200004a8 	.word	0x200004a8
 8003954:	20000494 	.word	0x20000494
 8003958:	2000048c 	.word	0x2000048c

0800395c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <vTaskSuspendAll+0x18>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	4a03      	ldr	r2, [pc, #12]	; (8003974 <vTaskSuspendAll+0x18>)
 8003968:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800396a:	bf00      	nop
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	200004b0 	.word	0x200004b0

08003978 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003986:	4b41      	ldr	r3, [pc, #260]	; (8003a8c <xTaskResumeAll+0x114>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	603b      	str	r3, [r7, #0]
}
 80039a0:	bf00      	nop
 80039a2:	e7fe      	b.n	80039a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039a4:	f000 fbfe 	bl	80041a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039a8:	4b38      	ldr	r3, [pc, #224]	; (8003a8c <xTaskResumeAll+0x114>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	4a37      	ldr	r2, [pc, #220]	; (8003a8c <xTaskResumeAll+0x114>)
 80039b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b2:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <xTaskResumeAll+0x114>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d161      	bne.n	8003a7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039ba:	4b35      	ldr	r3, [pc, #212]	; (8003a90 <xTaskResumeAll+0x118>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d05d      	beq.n	8003a7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039c2:	e02e      	b.n	8003a22 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c4:	4b33      	ldr	r3, [pc, #204]	; (8003a94 <xTaskResumeAll+0x11c>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3318      	adds	r3, #24
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fd72 	bl	80034ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3304      	adds	r3, #4
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fd6d 	bl	80034ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	2201      	movs	r2, #1
 80039e6:	409a      	lsls	r2, r3
 80039e8:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <xTaskResumeAll+0x120>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <xTaskResumeAll+0x120>)
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4a27      	ldr	r2, [pc, #156]	; (8003a9c <xTaskResumeAll+0x124>)
 8003a00:	441a      	add	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f7ff fcf9 	bl	8003400 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a12:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <xTaskResumeAll+0x128>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d302      	bcc.n	8003a22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003a1c:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <xTaskResumeAll+0x12c>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a22:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <xTaskResumeAll+0x11c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1cc      	bne.n	80039c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a30:	f000 fa08 	bl	8003e44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a34:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <xTaskResumeAll+0x130>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d010      	beq.n	8003a62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a40:	f000 f836 	bl	8003ab0 <xTaskIncrementTick>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003a4a:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <xTaskResumeAll+0x12c>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f1      	bne.n	8003a40 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003a5c:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <xTaskResumeAll+0x130>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <xTaskResumeAll+0x12c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <xTaskResumeAll+0x134>)
 8003a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a7e:	f000 fbc1 	bl	8004204 <vPortExitCritical>

	return xAlreadyYielded;
 8003a82:	68bb      	ldr	r3, [r7, #8]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200004b0 	.word	0x200004b0
 8003a90:	20000488 	.word	0x20000488
 8003a94:	20000448 	.word	0x20000448
 8003a98:	20000490 	.word	0x20000490
 8003a9c:	2000038c 	.word	0x2000038c
 8003aa0:	20000388 	.word	0x20000388
 8003aa4:	2000049c 	.word	0x2000049c
 8003aa8:	20000498 	.word	0x20000498
 8003aac:	e000ed04 	.word	0xe000ed04

08003ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aba:	4b4e      	ldr	r3, [pc, #312]	; (8003bf4 <xTaskIncrementTick+0x144>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f040 808e 	bne.w	8003be0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ac4:	4b4c      	ldr	r3, [pc, #304]	; (8003bf8 <xTaskIncrementTick+0x148>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003acc:	4a4a      	ldr	r2, [pc, #296]	; (8003bf8 <xTaskIncrementTick+0x148>)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d120      	bne.n	8003b1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ad8:	4b48      	ldr	r3, [pc, #288]	; (8003bfc <xTaskIncrementTick+0x14c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	603b      	str	r3, [r7, #0]
}
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <xTaskIncrementTick+0x46>
 8003af8:	4b40      	ldr	r3, [pc, #256]	; (8003bfc <xTaskIncrementTick+0x14c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	4b40      	ldr	r3, [pc, #256]	; (8003c00 <xTaskIncrementTick+0x150>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a3e      	ldr	r2, [pc, #248]	; (8003bfc <xTaskIncrementTick+0x14c>)
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4a3e      	ldr	r2, [pc, #248]	; (8003c00 <xTaskIncrementTick+0x150>)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <xTaskIncrementTick+0x154>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3301      	adds	r3, #1
 8003b12:	4a3c      	ldr	r2, [pc, #240]	; (8003c04 <xTaskIncrementTick+0x154>)
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	f000 f995 	bl	8003e44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b1a:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <xTaskIncrementTick+0x158>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d348      	bcc.n	8003bb6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b24:	4b35      	ldr	r3, [pc, #212]	; (8003bfc <xTaskIncrementTick+0x14c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b2e:	4b36      	ldr	r3, [pc, #216]	; (8003c08 <xTaskIncrementTick+0x158>)
 8003b30:	f04f 32ff 	mov.w	r2, #4294967295
 8003b34:	601a      	str	r2, [r3, #0]
					break;
 8003b36:	e03e      	b.n	8003bb6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b38:	4b30      	ldr	r3, [pc, #192]	; (8003bfc <xTaskIncrementTick+0x14c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d203      	bcs.n	8003b58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b50:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <xTaskIncrementTick+0x158>)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b56:	e02e      	b.n	8003bb6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fcac 	bl	80034ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	3318      	adds	r3, #24
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fca3 	bl	80034ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	2201      	movs	r2, #1
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	4b23      	ldr	r3, [pc, #140]	; (8003c0c <xTaskIncrementTick+0x15c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <xTaskIncrementTick+0x15c>)
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4a1f      	ldr	r2, [pc, #124]	; (8003c10 <xTaskIncrementTick+0x160>)
 8003b94:	441a      	add	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f7ff fc2f 	bl	8003400 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba6:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <xTaskIncrementTick+0x164>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d3b9      	bcc.n	8003b24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bb4:	e7b6      	b.n	8003b24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bb6:	4b17      	ldr	r3, [pc, #92]	; (8003c14 <xTaskIncrementTick+0x164>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	4914      	ldr	r1, [pc, #80]	; (8003c10 <xTaskIncrementTick+0x160>)
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d901      	bls.n	8003bd2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003bd2:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <xTaskIncrementTick+0x168>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	e004      	b.n	8003bea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003be0:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <xTaskIncrementTick+0x16c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3301      	adds	r3, #1
 8003be6:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <xTaskIncrementTick+0x16c>)
 8003be8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003bea:	697b      	ldr	r3, [r7, #20]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	200004b0 	.word	0x200004b0
 8003bf8:	2000048c 	.word	0x2000048c
 8003bfc:	20000440 	.word	0x20000440
 8003c00:	20000444 	.word	0x20000444
 8003c04:	200004a0 	.word	0x200004a0
 8003c08:	200004a8 	.word	0x200004a8
 8003c0c:	20000490 	.word	0x20000490
 8003c10:	2000038c 	.word	0x2000038c
 8003c14:	20000388 	.word	0x20000388
 8003c18:	2000049c 	.word	0x2000049c
 8003c1c:	20000498 	.word	0x20000498

08003c20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c26:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <vTaskSwitchContext+0xa4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <vTaskSwitchContext+0xa8>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c34:	e03f      	b.n	8003cb6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003c36:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <vTaskSwitchContext+0xa8>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c3c:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <vTaskSwitchContext+0xac>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	fab3 f383 	clz	r3, r3
 8003c48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003c4a:	7afb      	ldrb	r3, [r7, #11]
 8003c4c:	f1c3 031f 	rsb	r3, r3, #31
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	491f      	ldr	r1, [pc, #124]	; (8003cd0 <vTaskSwitchContext+0xb0>)
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	607b      	str	r3, [r7, #4]
}
 8003c78:	bf00      	nop
 8003c7a:	e7fe      	b.n	8003c7a <vTaskSwitchContext+0x5a>
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <vTaskSwitchContext+0xb0>)
 8003c88:	4413      	add	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d104      	bne.n	8003cac <vTaskSwitchContext+0x8c>
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	605a      	str	r2, [r3, #4]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	4a08      	ldr	r2, [pc, #32]	; (8003cd4 <vTaskSwitchContext+0xb4>)
 8003cb4:	6013      	str	r3, [r2, #0]
}
 8003cb6:	bf00      	nop
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	200004b0 	.word	0x200004b0
 8003cc8:	2000049c 	.word	0x2000049c
 8003ccc:	20000490 	.word	0x20000490
 8003cd0:	2000038c 	.word	0x2000038c
 8003cd4:	20000388 	.word	0x20000388

08003cd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ce0:	f000 f852 	bl	8003d88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ce4:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <prvIdleTask+0x28>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d9f9      	bls.n	8003ce0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <prvIdleTask+0x2c>)
 8003cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003cfc:	e7f0      	b.n	8003ce0 <prvIdleTask+0x8>
 8003cfe:	bf00      	nop
 8003d00:	2000038c 	.word	0x2000038c
 8003d04:	e000ed04 	.word	0xe000ed04

08003d08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d0e:	2300      	movs	r3, #0
 8003d10:	607b      	str	r3, [r7, #4]
 8003d12:	e00c      	b.n	8003d2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <prvInitialiseTaskLists+0x60>)
 8003d20:	4413      	add	r3, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fb3f 	bl	80033a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b06      	cmp	r3, #6
 8003d32:	d9ef      	bls.n	8003d14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d34:	480d      	ldr	r0, [pc, #52]	; (8003d6c <prvInitialiseTaskLists+0x64>)
 8003d36:	f7ff fb36 	bl	80033a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d3a:	480d      	ldr	r0, [pc, #52]	; (8003d70 <prvInitialiseTaskLists+0x68>)
 8003d3c:	f7ff fb33 	bl	80033a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d40:	480c      	ldr	r0, [pc, #48]	; (8003d74 <prvInitialiseTaskLists+0x6c>)
 8003d42:	f7ff fb30 	bl	80033a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d46:	480c      	ldr	r0, [pc, #48]	; (8003d78 <prvInitialiseTaskLists+0x70>)
 8003d48:	f7ff fb2d 	bl	80033a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d4c:	480b      	ldr	r0, [pc, #44]	; (8003d7c <prvInitialiseTaskLists+0x74>)
 8003d4e:	f7ff fb2a 	bl	80033a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <prvInitialiseTaskLists+0x78>)
 8003d54:	4a05      	ldr	r2, [pc, #20]	; (8003d6c <prvInitialiseTaskLists+0x64>)
 8003d56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d58:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <prvInitialiseTaskLists+0x7c>)
 8003d5a:	4a05      	ldr	r2, [pc, #20]	; (8003d70 <prvInitialiseTaskLists+0x68>)
 8003d5c:	601a      	str	r2, [r3, #0]
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	2000038c 	.word	0x2000038c
 8003d6c:	20000418 	.word	0x20000418
 8003d70:	2000042c 	.word	0x2000042c
 8003d74:	20000448 	.word	0x20000448
 8003d78:	2000045c 	.word	0x2000045c
 8003d7c:	20000474 	.word	0x20000474
 8003d80:	20000440 	.word	0x20000440
 8003d84:	20000444 	.word	0x20000444

08003d88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d8e:	e019      	b.n	8003dc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d90:	f000 fa08 	bl	80041a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d94:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <prvCheckTasksWaitingTermination+0x50>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fb8a 	bl	80034ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <prvCheckTasksWaitingTermination+0x54>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	4a0b      	ldr	r2, [pc, #44]	; (8003ddc <prvCheckTasksWaitingTermination+0x54>)
 8003dae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <prvCheckTasksWaitingTermination+0x58>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <prvCheckTasksWaitingTermination+0x58>)
 8003db8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dba:	f000 fa23 	bl	8004204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f810 	bl	8003de4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <prvCheckTasksWaitingTermination+0x58>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e1      	bne.n	8003d90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	2000045c 	.word	0x2000045c
 8003ddc:	20000488 	.word	0x20000488
 8003de0:	20000470 	.word	0x20000470

08003de4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d108      	bne.n	8003e08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fb80 	bl	8004500 <vPortFree>
				vPortFree( pxTCB );
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fb7d 	bl	8004500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e06:	e018      	b.n	8003e3a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d103      	bne.n	8003e1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fb74 	bl	8004500 <vPortFree>
	}
 8003e18:	e00f      	b.n	8003e3a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d00a      	beq.n	8003e3a <prvDeleteTCB+0x56>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	60fb      	str	r3, [r7, #12]
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <prvDeleteTCB+0x54>
	}
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <prvResetNextTaskUnblockTime+0x38>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e54:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <prvResetNextTaskUnblockTime+0x3c>)
 8003e56:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e5c:	e008      	b.n	8003e70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <prvResetNextTaskUnblockTime+0x38>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	4a04      	ldr	r2, [pc, #16]	; (8003e80 <prvResetNextTaskUnblockTime+0x3c>)
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	20000440 	.word	0x20000440
 8003e80:	200004a8 	.word	0x200004a8

08003e84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e8e:	4b29      	ldr	r3, [pc, #164]	; (8003f34 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e94:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fb0d 	bl	80034ba <uxListRemove>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10b      	bne.n	8003ebe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ea6:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	2201      	movs	r2, #1
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43da      	mvns	r2, r3
 8003eb4:	4b21      	ldr	r3, [pc, #132]	; (8003f3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	4a20      	ldr	r2, [pc, #128]	; (8003f3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ebc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d10a      	bne.n	8003edc <prvAddCurrentTaskToDelayedList+0x58>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	481a      	ldr	r0, [pc, #104]	; (8003f40 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003ed6:	f7ff fa93 	bl	8003400 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003eda:	e026      	b.n	8003f2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ee4:	4b14      	ldr	r3, [pc, #80]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d209      	bcs.n	8003f08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ef4:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4619      	mov	r1, r3
 8003f00:	4610      	mov	r0, r2
 8003f02:	f7ff faa1 	bl	8003448 <vListInsert>
}
 8003f06:	e010      	b.n	8003f2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f08:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f7ff fa97 	bl	8003448 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d202      	bcs.n	8003f2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f24:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6013      	str	r3, [r2, #0]
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	2000048c 	.word	0x2000048c
 8003f38:	20000388 	.word	0x20000388
 8003f3c:	20000490 	.word	0x20000490
 8003f40:	20000474 	.word	0x20000474
 8003f44:	20000444 	.word	0x20000444
 8003f48:	20000440 	.word	0x20000440
 8003f4c:	200004a8 	.word	0x200004a8

08003f50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3b04      	subs	r3, #4
 8003f60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3b04      	subs	r3, #4
 8003f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f023 0201 	bic.w	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3b04      	subs	r3, #4
 8003f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f80:	4a0c      	ldr	r2, [pc, #48]	; (8003fb4 <pxPortInitialiseStack+0x64>)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3b14      	subs	r3, #20
 8003f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3b04      	subs	r3, #4
 8003f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f06f 0202 	mvn.w	r2, #2
 8003f9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3b20      	subs	r3, #32
 8003fa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	08003fb9 	.word	0x08003fb9

08003fb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003fc2:	4b12      	ldr	r3, [pc, #72]	; (800400c <prvTaskExitError+0x54>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fca:	d00a      	beq.n	8003fe2 <prvTaskExitError+0x2a>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	60fb      	str	r3, [r7, #12]
}
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <prvTaskExitError+0x28>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	60bb      	str	r3, [r7, #8]
}
 8003ff4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003ff6:	bf00      	nop
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0fc      	beq.n	8003ff8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ffe:	bf00      	nop
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	2000000c 	.word	0x2000000c

08004010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004010:	4b07      	ldr	r3, [pc, #28]	; (8004030 <pxCurrentTCBConst2>)
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	6808      	ldr	r0, [r1, #0]
 8004016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401a:	f380 8809 	msr	PSP, r0
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f04f 0000 	mov.w	r0, #0
 8004026:	f380 8811 	msr	BASEPRI, r0
 800402a:	4770      	bx	lr
 800402c:	f3af 8000 	nop.w

08004030 <pxCurrentTCBConst2>:
 8004030:	20000388 	.word	0x20000388
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop

08004038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004038:	4808      	ldr	r0, [pc, #32]	; (800405c <prvPortStartFirstTask+0x24>)
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	6800      	ldr	r0, [r0, #0]
 800403e:	f380 8808 	msr	MSP, r0
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f380 8814 	msr	CONTROL, r0
 800404a:	b662      	cpsie	i
 800404c:	b661      	cpsie	f
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	df00      	svc	0
 8004058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800405a:	bf00      	nop
 800405c:	e000ed08 	.word	0xe000ed08

08004060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004066:	4b46      	ldr	r3, [pc, #280]	; (8004180 <xPortStartScheduler+0x120>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a46      	ldr	r2, [pc, #280]	; (8004184 <xPortStartScheduler+0x124>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d10a      	bne.n	8004086 <xPortStartScheduler+0x26>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	613b      	str	r3, [r7, #16]
}
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004086:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <xPortStartScheduler+0x120>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a3f      	ldr	r2, [pc, #252]	; (8004188 <xPortStartScheduler+0x128>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d10a      	bne.n	80040a6 <xPortStartScheduler+0x46>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	60fb      	str	r3, [r7, #12]
}
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040a6:	4b39      	ldr	r3, [pc, #228]	; (800418c <xPortStartScheduler+0x12c>)
 80040a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	22ff      	movs	r2, #255	; 0xff
 80040b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	4b31      	ldr	r3, [pc, #196]	; (8004190 <xPortStartScheduler+0x130>)
 80040cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040ce:	4b31      	ldr	r3, [pc, #196]	; (8004194 <xPortStartScheduler+0x134>)
 80040d0:	2207      	movs	r2, #7
 80040d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040d4:	e009      	b.n	80040ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80040d6:	4b2f      	ldr	r3, [pc, #188]	; (8004194 <xPortStartScheduler+0x134>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3b01      	subs	r3, #1
 80040dc:	4a2d      	ldr	r2, [pc, #180]	; (8004194 <xPortStartScheduler+0x134>)
 80040de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f2:	2b80      	cmp	r3, #128	; 0x80
 80040f4:	d0ef      	beq.n	80040d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040f6:	4b27      	ldr	r3, [pc, #156]	; (8004194 <xPortStartScheduler+0x134>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f1c3 0307 	rsb	r3, r3, #7
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d00a      	beq.n	8004118 <xPortStartScheduler+0xb8>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	60bb      	str	r3, [r7, #8]
}
 8004114:	bf00      	nop
 8004116:	e7fe      	b.n	8004116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004118:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <xPortStartScheduler+0x134>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <xPortStartScheduler+0x134>)
 8004120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004122:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <xPortStartScheduler+0x134>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800412a:	4a1a      	ldr	r2, [pc, #104]	; (8004194 <xPortStartScheduler+0x134>)
 800412c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	b2da      	uxtb	r2, r3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004136:	4b18      	ldr	r3, [pc, #96]	; (8004198 <xPortStartScheduler+0x138>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a17      	ldr	r2, [pc, #92]	; (8004198 <xPortStartScheduler+0x138>)
 800413c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004142:	4b15      	ldr	r3, [pc, #84]	; (8004198 <xPortStartScheduler+0x138>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a14      	ldr	r2, [pc, #80]	; (8004198 <xPortStartScheduler+0x138>)
 8004148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800414c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800414e:	f000 f8dd 	bl	800430c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004152:	4b12      	ldr	r3, [pc, #72]	; (800419c <xPortStartScheduler+0x13c>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004158:	f000 f8fc 	bl	8004354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800415c:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <xPortStartScheduler+0x140>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0f      	ldr	r2, [pc, #60]	; (80041a0 <xPortStartScheduler+0x140>)
 8004162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004168:	f7ff ff66 	bl	8004038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800416c:	f7ff fd58 	bl	8003c20 <vTaskSwitchContext>
	prvTaskExitError();
 8004170:	f7ff ff22 	bl	8003fb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	e000ed00 	.word	0xe000ed00
 8004184:	410fc271 	.word	0x410fc271
 8004188:	410fc270 	.word	0x410fc270
 800418c:	e000e400 	.word	0xe000e400
 8004190:	200004b4 	.word	0x200004b4
 8004194:	200004b8 	.word	0x200004b8
 8004198:	e000ed20 	.word	0xe000ed20
 800419c:	2000000c 	.word	0x2000000c
 80041a0:	e000ef34 	.word	0xe000ef34

080041a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	607b      	str	r3, [r7, #4]
}
 80041bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041be:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <vPortEnterCritical+0x58>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3301      	adds	r3, #1
 80041c4:	4a0d      	ldr	r2, [pc, #52]	; (80041fc <vPortEnterCritical+0x58>)
 80041c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <vPortEnterCritical+0x58>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d10f      	bne.n	80041f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <vPortEnterCritical+0x5c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	603b      	str	r3, [r7, #0]
}
 80041ec:	bf00      	nop
 80041ee:	e7fe      	b.n	80041ee <vPortEnterCritical+0x4a>
	}
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	2000000c 	.word	0x2000000c
 8004200:	e000ed04 	.word	0xe000ed04

08004204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800420a:	4b12      	ldr	r3, [pc, #72]	; (8004254 <vPortExitCritical+0x50>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <vPortExitCritical+0x24>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	607b      	str	r3, [r7, #4]
}
 8004224:	bf00      	nop
 8004226:	e7fe      	b.n	8004226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004228:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <vPortExitCritical+0x50>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3b01      	subs	r3, #1
 800422e:	4a09      	ldr	r2, [pc, #36]	; (8004254 <vPortExitCritical+0x50>)
 8004230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004232:	4b08      	ldr	r3, [pc, #32]	; (8004254 <vPortExitCritical+0x50>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d105      	bne.n	8004246 <vPortExitCritical+0x42>
 800423a:	2300      	movs	r3, #0
 800423c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	2000000c 	.word	0x2000000c
	...

08004260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004260:	f3ef 8009 	mrs	r0, PSP
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <pxCurrentTCBConst>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	f01e 0f10 	tst.w	lr, #16
 8004270:	bf08      	it	eq
 8004272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427a:	6010      	str	r0, [r2, #0]
 800427c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004284:	f380 8811 	msr	BASEPRI, r0
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f7ff fcc6 	bl	8003c20 <vTaskSwitchContext>
 8004294:	f04f 0000 	mov.w	r0, #0
 8004298:	f380 8811 	msr	BASEPRI, r0
 800429c:	bc09      	pop	{r0, r3}
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	6808      	ldr	r0, [r1, #0]
 80042a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a6:	f01e 0f10 	tst.w	lr, #16
 80042aa:	bf08      	it	eq
 80042ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042b0:	f380 8809 	msr	PSP, r0
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	f3af 8000 	nop.w

080042c0 <pxCurrentTCBConst>:
 80042c0:	20000388 	.word	0x20000388
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop

080042c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	607b      	str	r3, [r7, #4]
}
 80042e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042e2:	f7ff fbe5 	bl	8003ab0 <xTaskIncrementTick>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <SysTick_Handler+0x40>)
 80042ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	2300      	movs	r3, #0
 80042f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f383 8811 	msr	BASEPRI, r3
}
 80042fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <vPortSetupTimerInterrupt+0x34>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <vPortSetupTimerInterrupt+0x38>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <vPortSetupTimerInterrupt+0x3c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0a      	ldr	r2, [pc, #40]	; (800434c <vPortSetupTimerInterrupt+0x40>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	4a09      	ldr	r2, [pc, #36]	; (8004350 <vPortSetupTimerInterrupt+0x44>)
 800432a:	3b01      	subs	r3, #1
 800432c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800432e:	4b04      	ldr	r3, [pc, #16]	; (8004340 <vPortSetupTimerInterrupt+0x34>)
 8004330:	2207      	movs	r2, #7
 8004332:	601a      	str	r2, [r3, #0]
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	e000e010 	.word	0xe000e010
 8004344:	e000e018 	.word	0xe000e018
 8004348:	20000000 	.word	0x20000000
 800434c:	10624dd3 	.word	0x10624dd3
 8004350:	e000e014 	.word	0xe000e014

08004354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004364 <vPortEnableVFP+0x10>
 8004358:	6801      	ldr	r1, [r0, #0]
 800435a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800435e:	6001      	str	r1, [r0, #0]
 8004360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004362:	bf00      	nop
 8004364:	e000ed88 	.word	0xe000ed88

08004368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	; 0x28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004374:	f7ff faf2 	bl	800395c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004378:	4b5b      	ldr	r3, [pc, #364]	; (80044e8 <pvPortMalloc+0x180>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004380:	f000 f920 	bl	80045c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004384:	4b59      	ldr	r3, [pc, #356]	; (80044ec <pvPortMalloc+0x184>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	f040 8093 	bne.w	80044b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01d      	beq.n	80043d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004398:	2208      	movs	r2, #8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d014      	beq.n	80043d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f023 0307 	bic.w	r3, r3, #7
 80043b0:	3308      	adds	r3, #8
 80043b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <pvPortMalloc+0x6c>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	617b      	str	r3, [r7, #20]
}
 80043d0:	bf00      	nop
 80043d2:	e7fe      	b.n	80043d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d06e      	beq.n	80044b8 <pvPortMalloc+0x150>
 80043da:	4b45      	ldr	r3, [pc, #276]	; (80044f0 <pvPortMalloc+0x188>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d869      	bhi.n	80044b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043e4:	4b43      	ldr	r3, [pc, #268]	; (80044f4 <pvPortMalloc+0x18c>)
 80043e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043e8:	4b42      	ldr	r3, [pc, #264]	; (80044f4 <pvPortMalloc+0x18c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ee:	e004      	b.n	80043fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	d903      	bls.n	800440c <pvPortMalloc+0xa4>
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f1      	bne.n	80043f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800440c:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <pvPortMalloc+0x180>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004412:	429a      	cmp	r2, r3
 8004414:	d050      	beq.n	80044b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2208      	movs	r2, #8
 800441c:	4413      	add	r3, r2
 800441e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	1ad2      	subs	r2, r2, r3
 8004430:	2308      	movs	r3, #8
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	429a      	cmp	r2, r3
 8004436:	d91f      	bls.n	8004478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4413      	add	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <pvPortMalloc+0xf8>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	613b      	str	r3, [r7, #16]
}
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	1ad2      	subs	r2, r2, r3
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004472:	69b8      	ldr	r0, [r7, #24]
 8004474:	f000 f908 	bl	8004688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004478:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <pvPortMalloc+0x188>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <pvPortMalloc+0x188>)
 8004484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004486:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <pvPortMalloc+0x188>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <pvPortMalloc+0x190>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d203      	bcs.n	800449a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004492:	4b17      	ldr	r3, [pc, #92]	; (80044f0 <pvPortMalloc+0x188>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <pvPortMalloc+0x190>)
 8004498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	4b13      	ldr	r3, [pc, #76]	; (80044ec <pvPortMalloc+0x184>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <pvPortMalloc+0x194>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3301      	adds	r3, #1
 80044b4:	4a11      	ldr	r2, [pc, #68]	; (80044fc <pvPortMalloc+0x194>)
 80044b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044b8:	f7ff fa5e 	bl	8003978 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <pvPortMalloc+0x174>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	60fb      	str	r3, [r7, #12]
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <pvPortMalloc+0x172>
	return pvReturn;
 80044dc:	69fb      	ldr	r3, [r7, #28]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3728      	adds	r7, #40	; 0x28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	200040c4 	.word	0x200040c4
 80044ec:	200040d8 	.word	0x200040d8
 80044f0:	200040c8 	.word	0x200040c8
 80044f4:	200040bc 	.word	0x200040bc
 80044f8:	200040cc 	.word	0x200040cc
 80044fc:	200040d0 	.word	0x200040d0

08004500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d04d      	beq.n	80045ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004512:	2308      	movs	r3, #8
 8004514:	425b      	negs	r3, r3
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4413      	add	r3, r2
 800451a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <vPortFree+0xb8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <vPortFree+0x44>
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	60fb      	str	r3, [r7, #12]
}
 8004540:	bf00      	nop
 8004542:	e7fe      	b.n	8004542 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <vPortFree+0x62>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	60bb      	str	r3, [r7, #8]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <vPortFree+0xb8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01e      	beq.n	80045ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d11a      	bne.n	80045ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <vPortFree+0xb8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	43db      	mvns	r3, r3
 8004582:	401a      	ands	r2, r3
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004588:	f7ff f9e8 	bl	800395c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <vPortFree+0xbc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4413      	add	r3, r2
 8004596:	4a09      	ldr	r2, [pc, #36]	; (80045bc <vPortFree+0xbc>)
 8004598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800459a:	6938      	ldr	r0, [r7, #16]
 800459c:	f000 f874 	bl	8004688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80045a0:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <vPortFree+0xc0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3301      	adds	r3, #1
 80045a6:	4a06      	ldr	r2, [pc, #24]	; (80045c0 <vPortFree+0xc0>)
 80045a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80045aa:	f7ff f9e5 	bl	8003978 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045ae:	bf00      	nop
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	200040d8 	.word	0x200040d8
 80045bc:	200040c8 	.word	0x200040c8
 80045c0:	200040d4 	.word	0x200040d4

080045c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80045ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045d0:	4b27      	ldr	r3, [pc, #156]	; (8004670 <prvHeapInit+0xac>)
 80045d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00c      	beq.n	80045f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3307      	adds	r3, #7
 80045e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0307 	bic.w	r3, r3, #7
 80045ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <prvHeapInit+0xac>)
 80045f4:	4413      	add	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <prvHeapInit+0xb0>)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004602:	4b1c      	ldr	r3, [pc, #112]	; (8004674 <prvHeapInit+0xb0>)
 8004604:	2200      	movs	r2, #0
 8004606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	4413      	add	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004610:	2208      	movs	r2, #8
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0307 	bic.w	r3, r3, #7
 800461e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4a15      	ldr	r2, [pc, #84]	; (8004678 <prvHeapInit+0xb4>)
 8004624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <prvHeapInit+0xb4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2200      	movs	r2, #0
 800462c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <prvHeapInit+0xb4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <prvHeapInit+0xb4>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4a0a      	ldr	r2, [pc, #40]	; (800467c <prvHeapInit+0xb8>)
 8004652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a09      	ldr	r2, [pc, #36]	; (8004680 <prvHeapInit+0xbc>)
 800465a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <prvHeapInit+0xc0>)
 800465e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004662:	601a      	str	r2, [r3, #0]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	200004bc 	.word	0x200004bc
 8004674:	200040bc 	.word	0x200040bc
 8004678:	200040c4 	.word	0x200040c4
 800467c:	200040cc 	.word	0x200040cc
 8004680:	200040c8 	.word	0x200040c8
 8004684:	200040d8 	.word	0x200040d8

08004688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004690:	4b28      	ldr	r3, [pc, #160]	; (8004734 <prvInsertBlockIntoFreeList+0xac>)
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e002      	b.n	800469c <prvInsertBlockIntoFreeList+0x14>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d8f7      	bhi.n	8004696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	4413      	add	r3, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d108      	bne.n	80046ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	441a      	add	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	441a      	add	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d118      	bne.n	8004710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b15      	ldr	r3, [pc, #84]	; (8004738 <prvInsertBlockIntoFreeList+0xb0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d00d      	beq.n	8004706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	441a      	add	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	e008      	b.n	8004718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004706:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <prvInsertBlockIntoFreeList+0xb0>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e003      	b.n	8004718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	429a      	cmp	r2, r3
 800471e:	d002      	beq.n	8004726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004726:	bf00      	nop
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	200040bc 	.word	0x200040bc
 8004738:	200040c4 	.word	0x200040c4

0800473c <memset>:
 800473c:	4402      	add	r2, r0
 800473e:	4603      	mov	r3, r0
 8004740:	4293      	cmp	r3, r2
 8004742:	d100      	bne.n	8004746 <memset+0xa>
 8004744:	4770      	bx	lr
 8004746:	f803 1b01 	strb.w	r1, [r3], #1
 800474a:	e7f9      	b.n	8004740 <memset+0x4>

0800474c <__libc_init_array>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	4d0d      	ldr	r5, [pc, #52]	; (8004784 <__libc_init_array+0x38>)
 8004750:	4c0d      	ldr	r4, [pc, #52]	; (8004788 <__libc_init_array+0x3c>)
 8004752:	1b64      	subs	r4, r4, r5
 8004754:	10a4      	asrs	r4, r4, #2
 8004756:	2600      	movs	r6, #0
 8004758:	42a6      	cmp	r6, r4
 800475a:	d109      	bne.n	8004770 <__libc_init_array+0x24>
 800475c:	4d0b      	ldr	r5, [pc, #44]	; (800478c <__libc_init_array+0x40>)
 800475e:	4c0c      	ldr	r4, [pc, #48]	; (8004790 <__libc_init_array+0x44>)
 8004760:	f000 f818 	bl	8004794 <_init>
 8004764:	1b64      	subs	r4, r4, r5
 8004766:	10a4      	asrs	r4, r4, #2
 8004768:	2600      	movs	r6, #0
 800476a:	42a6      	cmp	r6, r4
 800476c:	d105      	bne.n	800477a <__libc_init_array+0x2e>
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	f855 3b04 	ldr.w	r3, [r5], #4
 8004774:	4798      	blx	r3
 8004776:	3601      	adds	r6, #1
 8004778:	e7ee      	b.n	8004758 <__libc_init_array+0xc>
 800477a:	f855 3b04 	ldr.w	r3, [r5], #4
 800477e:	4798      	blx	r3
 8004780:	3601      	adds	r6, #1
 8004782:	e7f2      	b.n	800476a <__libc_init_array+0x1e>
 8004784:	08004854 	.word	0x08004854
 8004788:	08004854 	.word	0x08004854
 800478c:	08004854 	.word	0x08004854
 8004790:	08004858 	.word	0x08004858

08004794 <_init>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	bf00      	nop
 8004798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479a:	bc08      	pop	{r3}
 800479c:	469e      	mov	lr, r3
 800479e:	4770      	bx	lr

080047a0 <_fini>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	bf00      	nop
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr
